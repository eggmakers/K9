<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\ACFly.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\ACFly.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Mon Feb 24 13:14:55 2025
<BR><P>
<H3>Maximum Stack Usage =       7536 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
M32_PosCtrl::main_func(void*, unsigned int) &rArr; process_AuxFuncs(Receiver const*, double) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[5e9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[56c]">lfs_file_rawwrite</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56c]">lfs_file_rawwrite</a><BR>
 <LI><a href="#[56a]">lfs_file_flush</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56c]">lfs_file_rawwrite</a><BR>
 <LI><a href="#[56b]">lfs_file_rawread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[56a]">lfs_file_flush</a><BR>
 <LI><a href="#[557]">lfs_dir_compact</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[557]">lfs_dir_compact</a><BR>
 <LI><a href="#[558]">lfs_dir_traverse</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[558]">lfs_dir_traverse</a><BR>
 <LI><a href="#[560]">lfs_dir_commit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[560]">lfs_dir_commit</a><BR>
 <LI><a href="#[64b]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64b]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[586]">pattern_matching</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[586]">pattern_matching</a><BR>
 <LI><a href="#[526]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[526]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[527]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[527]">std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[528]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[528]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[52a]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[52a]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</a><BR>
 <LI><a href="#[64c]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[64c]">std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from drv_sensors.o(.text.DMA1_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from drv_uart1.o(.text.DMA1_Stream3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from drv_uart3.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from drv_uart5.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from drv_uart7.o(.text.DMA2_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from drv_uart8.o(.text.DMA2_Stream3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from drv_crc.o(.text.DMA2_Stream5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from drv_can.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from drv_can.o(.text.FDCAN1_IT1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d3]">Flash_erase</a> from flash_diskio.o(.text.Flash_erase) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[d2]">Flash_read</a> from flash_diskio.o(.text.Flash_read) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[d5]">Flash_sync</a> from flash_diskio.o(.text.Flash_sync) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[d4]">Flash_write</a> from flash_diskio.o(.text.Flash_write) referenced 2 times from internalstorage.o(.text._Z20init_InternalStoragev)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from drv_extiic.o(.text.I2C1_ER_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from drv_extiic.o(.text.I2C1_EV_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from drv_intiic.o(.text.I2C2_ER_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from drv_intiic.o(.text.I2C2_EV_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from drv_usb.o(.text.OTG_FS_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from drv_flash.o(.text.QUADSPI_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from drv_sdmmc.o(.text.SDMMC1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f9]">SD_initialize</a> from sd_diskio.o(.text.SD_initialize) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[1fd]">SD_ioctl</a> from sd_diskio.o(.text.SD_ioctl) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[1fb]">SD_read</a> from sd_diskio.o(.text.SD_read) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[1fa]">SD_status</a> from sd_diskio.o(.text.SD_status) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[1fc]">SD_write</a> from sd_diskio.o(.text.SD_write) referenced from sd_diskio.o(.rodata.SD_Driver)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from drv_sensors.o(.text.TIM16_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from drv_rcppm.o(.text.TIM1_CC_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[176]">TIM1_IRQHandlerTCB</a> from drv_rcppm.o(.text.TIM1_IRQHandlerTCB) referenced 2 times from drv_rcppm.o(.text.TIM1_CC_IRQHandler)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from drv_rcppm.o(.text.TIM1_UP_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from auxfuncs.o(.text.TIM4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from timebase.o(.text.TIM5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from drv_uart5.o(.text.UART5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from drv_uart7.o(.text.UART7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from drv_uart8.o(.text.UART8_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from drv_uart1.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from drv_rcsbus.o(.text.USART2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17b]">USART2_IRQHandlerTCB</a> from drv_rcsbus.o(.text.USART2_IRQHandlerTCB) referenced 2 times from drv_rcsbus.o(.text.USART2_IRQHandler)
 <LI><a href="#[31]">USART3_IRQHandler</a> from drv_uart3.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[167]">_GLOBAL__sub_I_AuxFuncs.cpp</a> from auxfuncs.o(.text._GLOBAL__sub_I_AuxFuncs.cpp) referenced from auxfuncs.o(.init_array)
 <LI><a href="#[168]">_GLOBAL__sub_I_Avoidance.cpp</a> from avoidance.o(.text._GLOBAL__sub_I_Avoidance.cpp) referenced from avoidance.o(.init_array)
 <LI><a href="#[163]">_GLOBAL__sub_I_Commulink.cpp</a> from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp) referenced from commulink.o(.init_array)
 <LI><a href="#[152]">_GLOBAL__sub_I_Fences.cpp</a> from fences.o(.text._GLOBAL__sub_I_Fences.cpp) referenced from fences.o(.init_array)
 <LI><a href="#[16b]">_GLOBAL__sub_I_MS_Attitude.cpp</a> from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp) referenced from ms_attitude.o(.init_array)
 <LI><a href="#[16c]">_GLOBAL__sub_I_MS_Position.cpp</a> from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp) referenced from ms_position.o(.init_array)
 <LI><a href="#[164]">_GLOBAL__sub_I_MavlinkCMDProcess.cpp</a> from mavlinkcmdprocess.o(.text._GLOBAL__sub_I_MavlinkCMDProcess.cpp) referenced from mavlinkcmdprocess.o(.init_array)
 <LI><a href="#[165]">_GLOBAL__sub_I_MavlinkRCProcess.cpp</a> from mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp) referenced from mavlinkrcprocess.o(.init_array)
 <LI><a href="#[151]">_GLOBAL__sub_I_Missions.cpp</a> from missions.o(.text._GLOBAL__sub_I_Missions.cpp) referenced from missions.o(.init_array)
 <LI><a href="#[166]">_GLOBAL__sub_I_Modes.cpp</a> from modes.o(.text._GLOBAL__sub_I_Modes.cpp) referenced from modes.o(.init_array)
 <LI><a href="#[150]">_GLOBAL__sub_I_Parameters.cpp</a> from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp) referenced from parameters.o(.init_array)
 <LI><a href="#[156]">_GLOBAL__sub_I_Receiver.cpp</a> from receiver.o(.text._GLOBAL__sub_I_Receiver.cpp) referenced from receiver.o(.init_array)
 <LI><a href="#[14f]">_GLOBAL__sub_I_SDStorage.cpp</a> from sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp) referenced from sdstorage.o(.init_array)
 <LI><a href="#[155]">_GLOBAL__sub_I_Sensors.cpp</a> from sensors.o(.text._GLOBAL__sub_I_Sensors.cpp) referenced from sensors.o(.init_array)
 <LI><a href="#[169]">_GLOBAL__sub_I_ctrl_Main.cpp</a> from ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp) referenced from ctrl_main.o(.init_array)
 <LI><a href="#[16a]">_GLOBAL__sub_I_ctrl_Position.cpp</a> from ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp) referenced from ctrl_position.o(.init_array)
 <LI><a href="#[15e]">_GLOBAL__sub_I_drv_ADC.cpp</a> from drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp) referenced from drv_adc.o(.init_array)
 <LI><a href="#[15f]">_GLOBAL__sub_I_drv_CRC.cpp</a> from drv_crc.o(.text._GLOBAL__sub_I_drv_CRC.cpp) referenced from drv_crc.o(.init_array)
 <LI><a href="#[160]">_GLOBAL__sub_I_drv_Can.cpp</a> from drv_can.o(.text._GLOBAL__sub_I_drv_Can.cpp) referenced from drv_can.o(.init_array)
 <LI><a href="#[15d]">_GLOBAL__sub_I_drv_ExtIIC.cpp</a> from drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp) referenced from drv_extiic.o(.init_array)
 <LI><a href="#[162]">_GLOBAL__sub_I_drv_ExtMag.cpp</a> from drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp) referenced from drv_extmag.o(.init_array)
 <LI><a href="#[15c]">_GLOBAL__sub_I_drv_IntIIC.cpp</a> from drv_intiic.o(.text._GLOBAL__sub_I_drv_IntIIC.cpp) referenced from drv_intiic.o(.init_array)
 <LI><a href="#[161]">_GLOBAL__sub_I_drv_InternalMag.cpp</a> from drv_internalmag.o(.text._GLOBAL__sub_I_drv_InternalMag.cpp) referenced from drv_internalmag.o(.init_array)
 <LI><a href="#[157]">_GLOBAL__sub_I_drv_Uart1.cpp</a> from drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp) referenced from drv_uart1.o(.init_array)
 <LI><a href="#[158]">_GLOBAL__sub_I_drv_Uart3.cpp</a> from drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp) referenced from drv_uart3.o(.init_array)
 <LI><a href="#[159]">_GLOBAL__sub_I_drv_Uart5.cpp</a> from drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp) referenced from drv_uart5.o(.init_array)
 <LI><a href="#[15a]">_GLOBAL__sub_I_drv_Uart7.cpp</a> from drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp) referenced from drv_uart7.o(.init_array)
 <LI><a href="#[15b]">_GLOBAL__sub_I_drv_Uart8.cpp</a> from drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp) referenced from drv_uart8.o(.init_array)
 <LI><a href="#[154]">_GLOBAL__sub_I_followTarget.cpp</a> from followtarget.o(.text._GLOBAL__sub_I_followTarget.cpp) referenced from followtarget.o(.init_array)
 <LI><a href="#[153]">_GLOBAL__sub_I_precLand.cpp</a> from precland.o(.text._GLOBAL__sub_I_precLand.cpp) referenced from precland.o(.init_array)
 <LI><a href="#[b2]">Lock_Uart1(double)</a> from drv_uart1.o(.text._Z10Lock_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18c]">Lock_Uart3(double)</a> from drv_uart3.o(.text._Z10Lock_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[bb]">Lock_Uart5(double)</a> from drv_uart5.o(.text._Z10Lock_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c2]">Lock_Uart7(double)</a> from drv_uart7.o(.text._Z10Lock_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[194]">Lock_Uart8(double)</a> from drv_uart8.o(.text._Z10Lock_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[b4]">Read_Uart1(unsigned char*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z10Read_Uart1Phtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18e]">Read_Uart3(unsigned char*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z10Read_Uart3Phtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[bd]">Read_Uart5(unsigned char*, unsigned short, double, double)</a> from drv_uart5.o(.text._Z10Read_Uart5Phtdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c4]">Read_Uart7(unsigned char*, unsigned short, double, double)</a> from drv_uart7.o(.text._Z10Read_Uart7Phtdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[196]">Read_Uart8(unsigned char*, unsigned short, double, double)</a> from drv_uart8.o(.text._Z10Read_Uart8Phtdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[b5]">Write_Uart1(unsigned char const*, unsigned short, double, double)</a> from drv_uart1.o(.text._Z11Write_Uart1PKhtdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18f]">Write_Uart3(unsigned char const*, unsigned short, double, double)</a> from drv_uart3.o(.text._Z11Write_Uart3PKhtdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[be]">Write_Uart5(unsigned char const*, unsigned short, double, double)</a> from drv_uart5.o(.text._Z11Write_Uart5PKhtdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c5]">Write_Uart7(unsigned char const*, unsigned short, double, double)</a> from drv_uart7.o(.text._Z11Write_Uart7PKhtdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[197]">Write_Uart8(unsigned char const*, unsigned short, double, double)</a> from drv_uart8.o(.text._Z11Write_Uart8PKhtdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[184]">MS_Main_Gyro(void*)</a> from ms_main.o(.text._Z12MS_Main_GyroPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[b1]">Unlock_Uart1()</a> from drv_uart1.o(.text._Z12Unlock_Uart1v) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18b]">Unlock_Uart3()</a> from drv_uart3.o(.text._Z12Unlock_Uart3v) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[ba]">Unlock_Uart5()</a> from drv_uart5.o(.text._Z12Unlock_Uart5v) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c1]">Unlock_Uart7()</a> from drv_uart7.o(.text._Z12Unlock_Uart7v) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[193]">Unlock_Uart8()</a> from drv_uart8.o(.text._Z12Unlock_Uart8v) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[b3]">ResetRx_Uart1(double)</a> from drv_uart1.o(.text._Z13ResetRx_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18d]">ResetRx_Uart3(double)</a> from drv_uart3.o(.text._Z13ResetRx_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[bc]">ResetRx_Uart5(double)</a> from drv_uart5.o(.text._Z13ResetRx_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c3]">ResetRx_Uart7(double)</a> from drv_uart7.o(.text._Z13ResetRx_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[195]">ResetRx_Uart8(double)</a> from drv_uart8.o(.text._Z13ResetRx_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[a5]">Lock_USBD_VCOM(double)</a> from drv_usb.o(.text._Z14Lock_USBD_VCOMd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[a7]">Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</a> from drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b6]">WaitSent_Uart1(double)</a> from drv_uart1.o(.text._Z14WaitSent_Uart1d) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[188]">WaitSent_Uart3(double)</a> from drv_uart3.o(.text._Z14WaitSent_Uart3d) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[b7]">WaitSent_Uart5(double)</a> from drv_uart5.o(.text._Z14WaitSent_Uart5d) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c6]">WaitSent_Uart7(double)</a> from drv_uart7.o(.text._Z14WaitSent_Uart7d) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[190]">WaitSent_Uart8(double)</a> from drv_uart8.o(.text._Z14WaitSent_Uart8d) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[fe]">DriverInit_task(void*)</a> from main.o(.text._Z15DriverInit_taskPv) referenced 2 times from main.o(.text.main)
 <LI><a href="#[a9]">Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)</a> from drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[a6]">Unlock_USBD_VCOM()</a> from drv_usb.o(.text._Z16Unlock_USBD_VCOMv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[a8]">ResetRx_USBD_VCOM(double)</a> from drv_usb.o(.text._Z17ResetRx_USBD_VCOMd) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[b0]">SetBaudRate_Uart1(unsigned int, double, double)</a> from drv_uart1.o(.text._Z17SetBaudRate_Uart1jdd) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[18a]">SetBaudRate_Uart3(unsigned int, double, double)</a> from drv_uart3.o(.text._Z17SetBaudRate_Uart3jdd) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[b9]">SetBaudRate_Uart5(unsigned int, double, double)</a> from drv_uart5.o(.text._Z17SetBaudRate_Uart5jdd) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[c0]">SetBaudRate_Uart7(unsigned int, double, double)</a> from drv_uart7.o(.text._Z17SetBaudRate_Uart7jdd) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[192]">SetBaudRate_Uart8(unsigned int, double, double)</a> from drv_uart8.o(.text._Z17SetBaudRate_Uart8jdd) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[aa]">USBD_TxSpacesAvailable()</a> from drv_usb.o(.text._Z22USBD_TxSpacesAvailablev) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[af]">Uart1_TxSpacesAvailable()</a> from drv_uart1.o(.text._Z23Uart1_TxSpacesAvailablev) referenced 2 times from drv_uart1.o(.text._Z14init_drv_Uart1v)
 <LI><a href="#[189]">Uart3_TxSpacesAvailable()</a> from drv_uart3.o(.text._Z23Uart3_TxSpacesAvailablev) referenced 2 times from drv_uart3.o(.text._Z14init_drv_Uart3v)
 <LI><a href="#[b8]">Uart5_TxSpacesAvailable()</a> from drv_uart5.o(.text._Z23Uart5_TxSpacesAvailablev) referenced 2 times from drv_uart5.o(.text._Z14init_drv_Uart5v)
 <LI><a href="#[bf]">Uart7_TxSpacesAvailable()</a> from drv_uart7.o(.text._Z23Uart7_TxSpacesAvailablev) referenced 2 times from drv_uart7.o(.text._Z14init_drv_Uart7v)
 <LI><a href="#[191]">Uart8_TxSpacesAvailable()</a> from drv_uart8.o(.text._Z23Uart8_TxSpacesAvailablev) referenced 2 times from drv_uart8.o(.text._Z14init_drv_Uart8v)
 <LI><a href="#[185]">MS_Main(void*)</a> from ms_main.o(.text._Z7MS_MainPv) referenced 2 times from ms_main.o(.text._Z12init_MS_Mainv)
 <LI><a href="#[181]">Debug_task(void*)</a> from debug.o(.text._ZL10Debug_taskPv) referenced 2 times from debug.o(.text._Z10init_Debugv)
 <LI><a href="#[e4]">GPS_Server(void*)</a> from drv_gps.o(.text._ZL10GPS_ServerPv) referenced 6 times from drv_gps.o(.text._ZL14GPS_DriverInit4Portj)
 <LI><a href="#[e6]">RTK_Server(void*)</a> from drv_rtk.o(.text._ZL10RTK_ServerPv) referenced 16 times from drv_rtk.o(.text._ZL14RTK_DriverInit4Portj)
 <LI><a href="#[1b6]">MR72_Server(void*)</a> from drv_mr72_uartav.o(.text._ZL11MR72_ServerPv) referenced 2 times from drv_mr72_uartav.o(.text._ZL15MR72_DriverInit4Portj)
 <LI><a href="#[175]">icm20689TCB(void*, unsigned int)</a> from drv_sensors.o(.text._ZL11icm20689TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[1fe]">Heli131_Init()</a> from ctrl_attitude.o(.text._ZL12Heli131_Initv) referenced from ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
 <LI><a href="#[a2]">LPDaemonTask(void*)</a> from basic.o(.text._ZL12LPDaemonTaskPv) referenced 2 times from basic.o(.text._Z10init_Basicv)
 <LI><a href="#[182]">MSafe_Server(void*)</a> from msafe.o(.text._ZL12MSafe_ServerPv) referenced 2 times from msafe.o(.text._Z10init_MSafev)
 <LI><a href="#[183]">Modes_Server(void*)</a> from modes.o(.text._ZL12Modes_ServerPv) referenced 2 times from modes.o(.text._Z10init_Modesv)
 <LI><a href="#[ea]">NRA24_Server(void*)</a> from drv_nra24.o(.text._ZL12NRA24_ServerPv) referenced 2 times from drv_nra24.o(.text._ZL16NRA24_DriverInit4Portj)
 <LI><a href="#[eb]">US100_Server(void*)</a> from drv_us100.o(.text._ZL12US100_ServerPv) referenced 2 times from drv_us100.o(.text._ZL16US100_DriverInit4Portj)
 <LI><a href="#[ec]">ADM001_Server(void*)</a> from drv_adm001.o(.text._ZL13ADM001_ServerPv) referenced 2 times from drv_adm001.o(.text._ZL17ADM001_DriverInit4Portj)
 <LI><a href="#[f9]">ExtLed_Server(void*)</a> from drv_extled_tca62724fmg.o(.text._ZL13ExtLed_ServerPv) referenced 2 times from drv_extled_tca62724fmg.o(.text._ZL32I2C_ExtLed_TCA62724FMG_DriverRunv)
 <LI><a href="#[ee]">ExtMag_Server(void*)</a> from drv_extmag.o(.text._ZL13ExtMag_ServerPv) referenced 2 times from drv_extmag.o(.text._ZL20I2C_ExtMag_DriverRunv)
 <LI><a href="#[1be]">IRLock_Server(void*)</a> from drv_iic_irlock.o(.text._ZL13IRLock_ServerPv) referenced 2 times from drv_iic_irlock.o(.text._ZL20I2C_IRLock_DriverRunv)
 <LI><a href="#[1f0]">Msg74_VFR_HUD(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[110]">NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[1b7]">TFMini_Server(void*)</a> from drv_tfmini.o(.text._ZL13TFMini_ServerPv) referenced 2 times from drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj)
 <LI><a href="#[1ba]">TFMini_Server(void*)</a> from drv_tfminiav.o(.text._ZL13TFMini_ServerPv) referenced 2 times from drv_tfminiav.o(.text._ZL19TFMiniAv_DriverInit4Portj)
 <LI><a href="#[ef]">TFMini_Server(void*)</a> from drv_iictfmini.o(.text._ZL13TFMini_ServerPv) referenced 2 times from drv_iictfmini.o(.text._ZL20I2C_TFMini_DriverRunv)
 <LI><a href="#[117]">TriRotor_Init()</a> from ctrl_attitude.o(.text._ZL13TriRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
 <LI><a href="#[1bd]">YT_RYEOP_Read(void*)</a> from drv_yt_ryeop.o(.text._ZL13YT_RYEOP_ReadPv) referenced 2 times from drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj)
 <LI><a href="#[172]">bmi088GyroTCB(void*, unsigned int)</a> from drv_sensors.o(.text._ZL13bmi088GyroTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[186]">GPS_DriverInit(Port, unsigned int)</a> from drv_gps.o(.text._ZL14GPS_DriverInit4Portj) referenced 2 times from drv_gps.o(.text._Z12init_drv_GPSv)
 <LI><a href="#[cb]">GPS_DriverInit(Port, unsigned int)</a> from drv_gps_nmea.o(.text._ZL14GPS_DriverInit4Portj) referenced 2 times from drv_gps_nmea.o(.text._Z17init_drv_GPS_nmeav)
 <LI><a href="#[d9]">GPS_DriverInit(Port, unsigned int)</a> from drv_rtk_dao_move.o(.text._ZL14GPS_DriverInit4Portj) referenced 2 times from drv_rtk_dao_move.o(.text._Z21init_drv_RTK_DAO_Movev)
 <LI><a href="#[1ff]">Heli131_DeInit()</a> from ctrl_attitude.o(.text._ZL14Heli131_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
 <LI><a href="#[ed]">ISTRA24_Server(void*)</a> from drv_istra24.o(.text._ZL14ISTRA24_ServerPv) referenced 4 times from drv_istra24.o(.text._ZL18ISTRA24_DriverInit4Portj)
 <LI><a href="#[1c7]">Msg0_HEARTBEAT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1c8]">Msg11_SET_MODE(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1e8]">Msg30_ATTITUDE(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[113]">NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[a4]">RTK_DriverInit(Port, unsigned int)</a> from drv_rtk.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_rtk.o(.text._Z12init_drv_RTKv)
 <LI><a href="#[19f]">RTK_DriverInit(Port, unsigned int)</a> from drv_rtk_track.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_rtk_track.o(.text._Z18init_drv_RTK_Trackv)
 <LI><a href="#[d1]">RTK_DriverInit(Port, unsigned int)</a> from drv_um482.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_um482.o(.text._Z18init_drv_RTK_UM482v)
 <LI><a href="#[1a0]">RTK_DriverInit(Port, unsigned int)</a> from drv_um982.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_um982.o(.text._Z18init_drv_RTK_UM982v)
 <LI><a href="#[d8]">RTK_DriverInit(Port, unsigned int)</a> from drv_rtk_dao_base.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_rtk_dao_base.o(.text._Z21init_drv_RTK_DAO_Basev)
 <LI><a href="#[1ab]">RTK_DriverInit(Port, unsigned int)</a> from drv_mosaxicx5.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_mosaxicx5.o(.text._Z22init_drv_RTK_MosaxicX5v)
 <LI><a href="#[da]">RTK_DriverInit(Port, unsigned int)</a> from drv_mosaxicx6.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_mosaxicx6.o(.text._Z22init_drv_RTK_MosaxicX6v)
 <LI><a href="#[e3]">RTK_DriverInit(Port, unsigned int)</a> from drv_um982_movingtrack.o(.text._ZL14RTK_DriverInit4Portj) referenced 2 times from drv_um982_movingtrack.o(.text._Z30init_drv_RTK_UM982_movingTrackv)
 <LI><a href="#[1b9]">YT_ZR10_Server(void*)</a> from drv_yt_zr10.o(.text._ZL14YT_ZR10_ServerPv) referenced 2 times from drv_yt_zr10.o(.text._ZL18YT_ZR10_DriverInit4Portj)
 <LI><a href="#[174]">bmi088AccelTCB(void*, unsigned int)</a> from drv_sensors.o(.text._ZL14bmi088AccelTCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[1a5]">MR72_DriverInit(Port, unsigned int)</a> from drv_mr72_uartav.o(.text._ZL15MR72_DriverInit4Portj) referenced 2 times from drv_mr72_uartav.o(.text._Z20init_drv_MR72_UartAvv)
 <LI><a href="#[1dc]">Msg111_TIMESYNC(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL15Msg111_TIMESYNChPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1f2]">Msg124_GPS2_RAW(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL15Msg124_GPS2_RAWhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1cb]">Msg23_PARAM_SET(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
 <LI><a href="#[121]">MultiRotor_Init()</a> from ctrl_attitude.o(.text._ZL15MultiRotor_Initv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
 <LI><a href="#[f3]">TFMiniAv_Server(void*)</a> from drv_iictfmini_av.o(.text._ZL15TFMiniAv_ServerPv) referenced 2 times from drv_iictfmini_av.o(.text._ZL22I2C_TFMiniAv_DriverRunv)
 <LI><a href="#[118]">TriRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL15TriRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
 <LI><a href="#[1bb]">YT_INYYO_Server(void*)</a> from drv_yt_inyyo.o(.text._ZL15YT_INYYO_ServerPv) referenced 2 times from drv_yt_inyyo.o(.text._ZL19YT_INYYO_DriverInit4Portj)
 <LI><a href="#[1bc]">YT_RYEOP_Server(void*)</a> from drv_yt_ryeop.o(.text._ZL15YT_RYEOP_ServerPv) referenced 2 times from drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj)
 <LI><a href="#[ab]">usb_device_task(void*)</a> from drv_usb.o(.text._ZL15usb_device_taskPv) referenced 2 times from drv_usb.o(.text._Z12init_drv_USBv)
 <LI><a href="#[11c]">CoaxialM2S2_Init()</a> from ctrl_attitude.o(.text._ZL16CoaxialM2S2_Initv) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
 <LI><a href="#[203]">CoaxialM2S3_Init()</a> from ctrl_attitude.o(.text._ZL16CoaxialM2S3_Initv) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
 <LI><a href="#[ac]">Commulink_Server(void*)</a> from commulink.o(.text._ZL16Commulink_ServerPv) referenced 2 times from commulink.o(.text._Z14init_Commulinkv)
 <LI><a href="#[1e3]">Msg01_SYS_STATUS(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1f5]">Msg241_VIBRATION(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL16Msg241_VIBRATIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1e6]">Msg26_SCALED_IMU(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL16Msg26_SCALED_IMUhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[ad]">NRA24_DriverInit(Port, unsigned int)</a> from drv_nra24.o(.text._ZL16NRA24_DriverInit4Portj) referenced 2 times from drv_nra24.o(.text._Z14init_drv_NRA24v)
 <LI><a href="#[111]">NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[f0]">RTCMInput_Server(void*)</a> from drv_rtcminput.o(.text._ZL16RTCMInput_ServerPv) referenced 2 times from drv_rtcminput.o(.text._ZL20RTCMInput_DriverInit4Portj)
 <LI><a href="#[ae]">US100_DriverInit(Port, unsigned int)</a> from drv_us100.o(.text._ZL16US100_DriverInit4Portj) referenced 2 times from drv_us100.o(.text._Z14init_drv_US100v)
 <LI><a href="#[c7]">ADM001_DriverInit(Port, unsigned int)</a> from drv_adm001.o(.text._ZL17ADM001_DriverInit4Portj) referenced 2 times from drv_adm001.o(.text._Z15init_drv_ADM001v)
 <LI><a href="#[1e4]">Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL17Msg02_SYSTEM_TIMEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1e5]">Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1ef]">Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1d6]">Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL17Msg75_COMMAND_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
 <LI><a href="#[122]">MultiRotor_DeInit()</a> from ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
 <LI><a href="#[10e]">NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[198]">TFMini_DriverInit(Port, unsigned int)</a> from drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj) referenced 2 times from drv_tfmini.o(.text._Z15init_drv_TFMiniv)
 <LI><a href="#[a3]">gyroOffsetSaveTCB(void*, unsigned int)</a> from ms_attitude.o(.text._ZL17gyroOffsetSaveTCBPvj) referenced 2 times from ms_attitude.o(.text._Z11MS_Attitudeh10IMU_Sensor)
 <LI><a href="#[f1]">CAN_MR72_Av_Server(void*)</a> from drv_can_mr72_av.o(.text._ZL18CAN_MR72_Av_ServerPv) referenced 4 times from drv_can_mr72_av.o(.text._ZL21CAN_MR72_Av_DriverRunv)
 <LI><a href="#[11d]">CoaxialM2S2_DeInit()</a> from ctrl_attitude.o(.text._ZL18CoaxialM2S2_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
 <LI><a href="#[204]">CoaxialM2S3_DeInit()</a> from ctrl_attitude.o(.text._ZL18CoaxialM2S3_DeInitv) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
 <LI><a href="#[ce]">ControlSystem_Task(void*)</a> from ctrl_main.o(.text._ZL18ControlSystem_TaskPv) referenced 2 times from ctrl_main.o(.text._Z18init_ControlSystemv)
 <LI><a href="#[ca]">ISTRA24_DriverInit(Port, unsigned int)</a> from drv_istra24.o(.text._ZL18ISTRA24_DriverInit4Portj) referenced 2 times from drv_istra24.o(.text._Z16init_drv_ISTRA24v)
 <LI><a href="#[19d]">ISTRA24_DriverInit(Port, unsigned int)</a> from drv_istra24_2.o(.text._ZL18ISTRA24_DriverInit4Portj) referenced 2 times from drv_istra24_2.o(.text._Z18init_drv_ISTRA24_2v)
 <LI><a href="#[1c0]">InternalMag_Server(void*)</a> from drv_internalmag.o(.text._ZL18InternalMag_ServerPv) referenced 2 times from drv_internalmag.o(.text._ZL25I2C_InternalMag_DriverRunv)
 <LI><a href="#[1f1]">Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL18Msg116_SCALED_IMU2hP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1f3]">Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL18Msg129_SCALED_IMU3hP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1cc]">Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1d7]">Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[f5]">OpticalFlow_Server(void*)</a> from drv_uwb_linktrack.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_uwb_linktrack.o(.text._ZL24UWB_LinkTrack_DriverInit4Portj)
 <LI><a href="#[1c2]">OpticalFlow_Server(void*)</a> from drv_opticalflow_lc302.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj)
 <LI><a href="#[f7]">OpticalFlow_Server(void*)</a> from drv_opticalflow_lc306.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj)
 <LI><a href="#[1c4]">OpticalFlow_Server(void*)</a> from drv_opticalflow_gl9306.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj)
 <LI><a href="#[f8]">OpticalFlow_Server(void*)</a> from drv_opticalflow_jl32xx.o(.text._ZL18OpticalFlow_ServerPv) referenced 2 times from drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj)
 <LI><a href="#[f4]">YT_Viewlink_Server(void*)</a> from drv_yt_viewlink.o(.text._ZL18YT_Viewlink_ServerPv) referenced 2 times from drv_yt_viewlink.o(.text._ZL22YT_Viewlink_DriverInit4Portj)
 <LI><a href="#[199]">YT_ZR10_DriverInit(Port, unsigned int)</a> from drv_yt_zr10.o(.text._ZL18YT_ZR10_DriverInit4Portj) referenced 2 times from drv_yt_zr10.o(.text._Z16init_drv_YT_ZR10v)
 <LI><a href="#[106]">Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL19Cmd183_DO_SET_SERVOhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[1c1]">ExtBarometer_Server(void*)</a> from drv_extbarometer.o(.text._ZL19ExtBarometer_ServerPv) referenced 2 times from drv_extbarometer.o(.text._ZL26I2C_ExtBarometer_DriverRunv)
 <LI><a href="#[201]">Heli131_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL19Heli131_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
 <LI><a href="#[1f4]">Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL19Msg234_HIGH_LATENCYhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1d0]">Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[112]">NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL19NavCmd23_LAND_LOCALdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[cc]">TFMiniAv_DriverInit(Port, unsigned int)</a> from drv_tfminiav.o(.text._ZL19TFMiniAv_DriverInit4Portj) referenced 2 times from drv_tfminiav.o(.text._Z17init_drv_TFMiniAvv)
 <LI><a href="#[19a]">YT_INYYO_DriverInit(Port, unsigned int)</a> from drv_yt_inyyo.o(.text._ZL19YT_INYYO_DriverInit4Portj) referenced 2 times from drv_yt_inyyo.o(.text._Z17init_drv_YT_INYYOv)
 <LI><a href="#[cd]">YT_RYEOP_DriverInit(Port, unsigned int)</a> from drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj) referenced 2 times from drv_yt_ryeop.o(.text._Z17init_drv_YT_RYEOPv)
 <LI><a href="#[202]">Heli131_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL20Heli131_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
 <LI><a href="#[c9]">I2C_ExtMag_DriverRun()</a> from drv_extmag.o(.text._ZL20I2C_ExtMag_DriverRunv) referenced 2 times from drv_extmag.o(.text._Z15init_drv_ExtMagv)
 <LI><a href="#[d0]">I2C_IRLock_DriverRun()</a> from drv_iic_irlock.o(.text._ZL20I2C_IRLock_DriverRunv) referenced 2 times from drv_iic_irlock.o(.text._Z18init_drv_IICIRLockv)
 <LI><a href="#[19c]">I2C_TFMini_DriverRun()</a> from drv_iictfmini.o(.text._ZL20I2C_TFMini_DriverRunv) referenced 2 times from drv_iictfmini.o(.text._Z18init_drv_IICTFMiniv)
 <LI><a href="#[1dd]">Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL20Msg144_FOLLOW_TARGEThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1e1]">Msg233_GPS_RTCM_DATA(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1f6]">Msg242_HOME_POSITION(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL20Msg242_HOME_POSITIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1d4]">Msg69_MANUAL_CONTROL(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL20Msg69_MANUAL_CONTROLhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[19e]">RTCMInput_DriverInit(Port, unsigned int)</a> from drv_rtcminput.o(.text._ZL20RTCMInput_DriverInit4Portj) referenced 2 times from drv_rtcminput.o(.text._Z18init_drv_RTCMInputv)
 <LI><a href="#[11a]">TriRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL20TriRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
 <LI><a href="#[d7]">CAN_MR72_Av_DriverRun()</a> from drv_can_mr72_av.o(.text._ZL21CAN_MR72_Av_DriverRunv) referenced 2 times from drv_can_mr72_av.o(.text._Z20init_drv_CAN_MR72_Avv)
 <LI><a href="#[de]">CAN_MR72_Av_DriverRun()</a> from drv_can_mr72_backav.o(.text._ZL21CAN_MR72_Av_DriverRunv) referenced 2 times from drv_can_mr72_backav.o(.text._Z24init_drv_CAN_MR72_BackAvv)
 <LI><a href="#[104]">Cmd12_MAV_CMD_SET_RTC(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[200]">Heli131_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL21Heli131_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
 <LI><a href="#[c8]">I2C_ExtMag_DriverInit()</a> from drv_extmag.o(.text._ZL21I2C_ExtMag_DriverInitv) referenced 2 times from drv_extmag.o(.text._Z15init_drv_ExtMagv)
 <LI><a href="#[cf]">I2C_IRLock_DriverInit()</a> from drv_iic_irlock.o(.text._ZL21I2C_IRLock_DriverInitv) referenced 2 times from drv_iic_irlock.o(.text._Z18init_drv_IICIRLockv)
 <LI><a href="#[19b]">I2C_TFMini_DriverInit()</a> from drv_iictfmini.o(.text._ZL21I2C_TFMini_DriverInitv) referenced 2 times from drv_iictfmini.o(.text._Z18init_drv_IICTFMiniv)
 <LI><a href="#[1e7]">Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1cd]">Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1ed]">Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL21Msg42_MISSION_CURRENThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[d6]">CAN_MR72_Av_DriverInit()</a> from drv_can_mr72_av.o(.text._ZL22CAN_MR72_Av_DriverInitv) referenced 2 times from drv_can_mr72_av.o(.text._Z20init_drv_CAN_MR72_Avv)
 <LI><a href="#[dd]">CAN_MR72_Av_DriverInit()</a> from drv_can_mr72_backav.o(.text._ZL22CAN_MR72_Av_DriverInitv) referenced 2 times from drv_can_mr72_backav.o(.text._Z24init_drv_CAN_MR72_BackAvv)
 <LI><a href="#[1bf]">CAN_QOAR1271_Av_Server(void*)</a> from drv_can_qoar1271_av.o(.text._ZL22CAN_QOAR1271_Av_ServerPv) referenced 2 times from drv_can_qoar1271_av.o(.text._ZL25CAN_QOAR1271_Av_DriverRunv)
 <LI><a href="#[102]">Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[1a2]">I2C_TFMiniAv_DriverRun()</a> from drv_iictfmini_av.o(.text._ZL22I2C_TFMiniAv_DriverRunv) referenced 2 times from drv_iictfmini_av.o(.text._Z20init_drv_IICTFMiniAvv)
 <LI><a href="#[1d5]">Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
 <LI><a href="#[124]">MultiRotor_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
 <LI><a href="#[11b]">TriRotorX_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL22TriRotorX_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
 <LI><a href="#[119]">TriRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL22TriRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
 <LI><a href="#[1a6]">YT_Viewlink_DriverInit(Port, unsigned int)</a> from drv_yt_viewlink.o(.text._ZL22YT_Viewlink_DriverInit4Portj) referenced 2 times from drv_yt_viewlink.o(.text._Z20init_drv_YT_Viewlinkv)
 <LI><a href="#[103]">Cmd11_MAV_CMD_WRITE_WGA(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[11f]">CoaxialM2S2_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL23CoaxialM2S2_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
 <LI><a href="#[206]">CoaxialM2S3_InitControl(bool)</a> from ctrl_attitude.o(.text._ZL23CoaxialM2S3_InitControlb) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
 <LI><a href="#[1a1]">I2C_TFMiniAv_DriverInit()</a> from drv_iictfmini_av.o(.text._ZL23I2C_TFMiniAv_DriverInitv) referenced 2 times from drv_iictfmini_av.o(.text._Z20init_drv_IICTFMiniAvv)
 <LI><a href="#[1d1]">Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[115]">NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL23NavCmd115_CONDITION_YAWdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[116]">NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL23NavCmd192_DO_REPOSITIONdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[f6]">CAN_Radar_TR60_AH_Server(void*)</a> from drv_can_radar_tr60_ah.o(.text._ZL24CAN_Radar_TR60_AH_ServerPv) referenced 2 times from drv_can_radar_tr60_ah.o(.text._ZL27CAN_Radar_TR60_AH_DriverRunv)
 <LI><a href="#[120]">CoaxialM2S2_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL24CoaxialM2S2_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
 <LI><a href="#[207]">CoaxialM2S3_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL24CoaxialM2S3_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
 <LI><a href="#[1c9]">Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1ca]">Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1e2]">Msg243_SET_HOME_POSITION(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1ea]">Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1f8]">Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL24Msg330_OBSTACLE_DISTANCEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1ec]">Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
 <LI><a href="#[123]">MultiRotor_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
 <LI><a href="#[1ac]">UWB_LinkTrack_DriverInit(Port, unsigned int)</a> from drv_uwb_linktrack.o(.text._ZL24UWB_LinkTrack_DriverInit4Portj) referenced 2 times from drv_uwb_linktrack.o(.text._Z22init_drv_UWB_LinkTrackv)
 <LI><a href="#[1ae]">CAN_QOAR1271_Av_DriverRun()</a> from drv_can_qoar1271_av.o(.text._ZL25CAN_QOAR1271_Av_DriverRunv) referenced 2 times from drv_can_qoar1271_av.o(.text._Z24init_drv_CAN_QOAR1271_Avv)
 <LI><a href="#[11e]">CoaxialM2S2_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL25CoaxialM2S2_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
 <LI><a href="#[205]">CoaxialM2S3_PreArmControl(Receiver)</a> from ctrl_attitude.o(.text._ZL25CoaxialM2S3_PreArmControl8Receiver) referenced from ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
 <LI><a href="#[1a4]">I2C_InternalMag_DriverRun()</a> from drv_internalmag.o(.text._ZL25I2C_InternalMag_DriverRunv) referenced 2 times from drv_internalmag.o(.text._Z20init_drv_InternalMagv)
 <LI><a href="#[1f7]">Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL25Msg245_EXTENDED_SYS_STATEhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1e9]">Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1eb]">Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[1ce]">Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1d2]">Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1d3]">Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[125]">MultiRotor4C_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor4C_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
 <LI><a href="#[20c]">MultiRotor4X_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor4X_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
 <LI><a href="#[20d]">MultiRotor6C_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor6C_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
 <LI><a href="#[126]">MultiRotor6X_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor6X_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
 <LI><a href="#[127]">MultiRotor8C_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor8C_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
 <LI><a href="#[20e]">MultiRotor8X_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL25MultiRotor8X_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
 <LI><a href="#[114]">NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL25NavCmd112_CONDITION_DELAYdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[10f]">NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)</a> from navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf) referenced from navcmdprocess.o(.rodata._ZL13NavCmdProcess)
 <LI><a href="#[1ad]">CAN_QOAR1271_Av_DriverInit()</a> from drv_can_qoar1271_av.o(.text._ZL26CAN_QOAR1271_Av_DriverInitv) referenced 2 times from drv_can_qoar1271_av.o(.text._Z24init_drv_CAN_QOAR1271_Avv)
 <LI><a href="#[1c3]">CAN_Radar_BMS_TATTU_Server(void*)</a> from drv_can_bms_tattu.o(.text._ZL26CAN_Radar_BMS_TATTU_ServerPv) referenced 2 times from drv_can_bms_tattu.o(.text._ZL29CAN_Radar_BMS_TATTU_DriverRunv)
 <LI><a href="#[1a8]">I2C_ExtBarometer_DriverRun()</a> from drv_extbarometer.o(.text._ZL26I2C_ExtBarometer_DriverRunv) referenced 2 times from drv_extbarometer.o(.text._Z21init_drv_ExtBarometerv)
 <LI><a href="#[1a3]">I2C_InternalMag_DriverInit()</a> from drv_internalmag.o(.text._ZL26I2C_InternalMag_DriverInitv) referenced 2 times from drv_internalmag.o(.text._Z20init_drv_InternalMagv)
 <LI><a href="#[1cf]">Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[20f]">MultiRotor42X_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL26MultiRotor42X_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
 <LI><a href="#[128]">MultiRotor62X_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL26MultiRotor62X_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
 <LI><a href="#[210]">MultiRotor6S1_MotorControl(double, double, double, double, bool)</a> from ctrl_attitude.o(.text._ZL26MultiRotor6S1_MotorControlddddb) referenced from ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
 <LI><a href="#[dc]">CAN_Radar_TR60_AH_DriverRun()</a> from drv_can_radar_tr60_ah.o(.text._ZL27CAN_Radar_TR60_AH_DriverRunv) referenced 2 times from drv_can_radar_tr60_ah.o(.text._Z22init_drv_Radar_TR60_AHv)
 <LI><a href="#[1a7]">I2C_ExtBarometer_DriverInit()</a> from drv_extbarometer.o(.text._ZL27I2C_ExtBarometer_DriverInitv) referenced 2 times from drv_extbarometer.o(.text._Z21init_drv_ExtBarometerv)
 <LI><a href="#[209]">InflightCmd183_DO_SET_SERVO(unsigned short, double*)</a> from inflightcmdprocess.o(.text._ZL27InflightCmd183_DO_SET_SERVOtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[1ee]">Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)</a> from mavlinksendfuncs.o(.text._ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message) referenced from mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
 <LI><a href="#[db]">CAN_Radar_TR60_AH_DriverInit()</a> from drv_can_radar_tr60_ah.o(.text._ZL28CAN_Radar_TR60_AH_DriverInitv) referenced 2 times from drv_can_radar_tr60_ah.o(.text._Z22init_drv_Radar_TR60_AHv)
 <LI><a href="#[108]">Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL28Cmd209_MAV_CMD_DO_MOTOR_TESThPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[1e0]">Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL28Msg209_ACFly_UpdatePosSensorhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[df]">OpticalFlow_LC302_DriverInit(Port, unsigned int)</a> from drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj) referenced 2 times from drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v)
 <LI><a href="#[1af]">OpticalFlow_LC306_DriverInit(Port, unsigned int)</a> from drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj) referenced 2 times from drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v)
 <LI><a href="#[1aa]">CAN_Radar_BMS_TATTU_DriverRun()</a> from drv_can_bms_tattu.o(.text._ZL29CAN_Radar_BMS_TATTU_DriverRunv) referenced 2 times from drv_can_bms_tattu.o(.text._Z22init_drv_CAN_BMS_TATTUv)
 <LI><a href="#[1db]">Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL29Msg110_FILE_TRANSFER_PROTOCOLhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[e2]">OpticalFlow_GL9306_DriverInit(Port, unsigned int)</a> from drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj) referenced 2 times from drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v)
 <LI><a href="#[1b0]">OpticalFlow_JL32xx_DriverInit(Port, unsigned int)</a> from drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj) referenced 2 times from drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv)
 <LI><a href="#[1a9]">CAN_Radar_BMS_TATTU_DriverInit()</a> from drv_can_bms_tattu.o(.text._ZL30CAN_Radar_BMS_TATTU_DriverInitv) referenced 2 times from drv_can_bms_tattu.o(.text._Z22init_drv_CAN_BMS_TATTUv)
 <LI><a href="#[1da]">Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1df]">Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL31Msg208_ACFly_RegeisterPosSensorhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[10a]">Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[e1]">I2C_ExtLed_TCA62724FMG_DriverRun()</a> from drv_extled_tca62724fmg.o(.text._ZL32I2C_ExtLed_TCA62724FMG_DriverRunv) referenced 2 times from drv_extled_tca62724fmg.o(.text._Z27init_drv_ExtLed_TCA62724FMGv)
 <LI><a href="#[1de]">Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL32Msg183_AUTOPILOT_VERSION_REQUESThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[107]">Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[e0]">I2C_ExtLed_TCA62724FMG_DriverInit()</a> from drv_extled_tca62724fmg.o(.text._ZL33I2C_ExtLed_TCA62724FMG_DriverInitv) referenced 2 times from drv_extled_tca62724fmg.o(.text._Z27init_drv_ExtLed_TCA62724FMGv)
 <LI><a href="#[10b]">Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[1d8]">Msg84_SET_POSITION_TARGET_LOCAL_NED(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL35Msg84_SET_POSITION_TARGET_LOCAL_NEDhPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[1d9]">Msg86_SET_POSITION_TARGET_GLOBAL_INT(unsigned char, __mavlink_message const*)</a> from mavlinkrcprocess.o(.text._ZL36Msg86_SET_POSITION_TARGET_GLOBAL_INThPK17__mavlink_message) referenced from mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
 <LI><a href="#[208]">InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)</a> from inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[10c]">Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[20a]">InflightCmd205_MAV_CMD_DO_MOUNT_CONTROL(unsigned short, double*)</a> from inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[109]">Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL40Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWNhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[20b]">InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DIST(unsigned short, double*)</a> from inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd) referenced from inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
 <LI><a href="#[10d]">Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[105]">Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAM(unsigned char, __mavlink_message const*)</a> from mavlinkcmdprocess.o(.text._ZL49Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAMhPK17__mavlink_message) referenced from mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
 <LI><a href="#[178]">TxTCB(void*, unsigned int)</a> from drv_uart5.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart5.o(.text.UART5_IRQHandler)
 <LI><a href="#[9b]">TxTCB(void*, unsigned int)</a> from drv_uart7.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart7.o(.text.UART7_IRQHandler)
 <LI><a href="#[179]">TxTCB(void*, unsigned int)</a> from drv_uart8.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart8.o(.text.UART8_IRQHandler)
 <LI><a href="#[17a]">TxTCB(void*, unsigned int)</a> from drv_uart1.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart1.o(.text.USART1_IRQHandler)
 <LI><a href="#[9c]">TxTCB(void*, unsigned int)</a> from drv_uart3.o(.text._ZL5TxTCBPvj) referenced 2 times from drv_uart3.o(.text.USART3_IRQHandler)
 <LI><a href="#[187]">SDS_Task(void*)</a> from sdstorage.o(.text._ZL8SDS_TaskPv) referenced 2 times from sdstorage.o(.text._Z14init_SDStoragev)
 <LI><a href="#[173]">SPL06TCB(void*, unsigned int)</a> from drv_sensors.o(.text._ZL8SPL06TCBPvj) referenced 2 times from drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
 <LI><a href="#[177]">IOTrigTCB(void*, unsigned int)</a> from auxfuncs.o(.text._ZL9IOTrigTCBPvj) referenced 2 times from auxfuncs.o(.text.TIM4_IRQHandler)
 <LI><a href="#[9a]">CanMailBox::CanRxTCB(void*, unsigned int)</a> from drv_can.o(.text._ZN10CanMailBox8CanRxTCBEPvj) referenced 2 times from drv_can.o(.text.HAL_FDCAN_RxFifo0Callback)
 <LI><a href="#[211]">M10_RCCalib::main_func(void*, unsigned int)</a> from m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj) referenced from m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
 <LI><a href="#[212]">M30_AttCtrl::main_func(void*, unsigned int)</a> from m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj) referenced from m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
 <LI><a href="#[12a]">M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m32_posctrl.o(.text._ZN11M32_PosCtrl15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
 <LI><a href="#[129]">M32_PosCtrl::main_func(void*, unsigned int)</a> from m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj) referenced from m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
 <LI><a href="#[12b]">M12_AccCalib::main_func(void*, unsigned int)</a> from m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj) referenced from m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
 <LI><a href="#[213]">M13_MagCalib::main_func(void*, unsigned int)</a> from m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj) referenced from m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
 <LI><a href="#[214]">M11_TempCalib::main_func(void*, unsigned int)</a> from m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj) referenced from m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
 <LI><a href="#[21d]">ESO_AngularRate::load_LearnKs(double*)</a> from ms_attitude.o(.text._ZN15ESO_AngularRate12load_LearnKsEPd) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[21a]">ESO_AngularRate::run(double, bool)</a> from ms_attitude.o(.text._ZN15ESO_AngularRate3runEdb) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[219]">ESO_AngularRate::update_u(double)</a> from ms_attitude.o(.text._ZN15ESO_AngularRate8update_uEd) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[215]">ESO_AngularRate::~ESO_AngularRate__deallocating()</a> from ms_attitude.o(.text._ZN15ESO_AngularRateD0Ev) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[12d]">M14_HorizonCalib::main_func(void*, unsigned int)</a> from m14_horizoncalib.o(.text._ZN16M14_HorizonCalib9main_funcEPvj) referenced from m14_horizoncalib.o(.rodata._ZTV16M14_HorizonCalib)
 <LI><a href="#[137]">ESO_AngularRateHeli::load_LearnKs(double*)</a> from ms_attitude.o(.text._ZN19ESO_AngularRateHeli12load_LearnKsEPd) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[134]">ESO_AngularRateHeli::run(double, bool)</a> from ms_attitude.o(.text._ZN19ESO_AngularRateHeli3runEdb) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[133]">ESO_AngularRateHeli::update_u(double)</a> from ms_attitude.o(.text._ZN19ESO_AngularRateHeli8update_uEd) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[12f]">ESO_AngularRateHeli::~ESO_AngularRateHeli__deallocating()</a> from ms_attitude.o(.text._ZN19ESO_AngularRateHeliD0Ev) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[12e]">ESO_AngularRate_Base::~ESO_AngularRate_Base__sub_object()</a> from ms_attitude.o(.text._ZN20ESO_AngularRate_BaseD2Ev) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[12e]">ESO_AngularRate_Base::~ESO_AngularRate_Base__sub_object()</a> from ms_attitude.o(.text._ZN20ESO_AngularRate_BaseD2Ev) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[228]">M35_Auto1::main_func(void*, unsigned int)</a> from m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj) referenced from m35_auto1.o(.rodata._ZTV9M35_Auto1)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m14_horizoncalib.o(.rodata._ZTV16M14_HorizonCalib)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m35_auto1.o(.rodata._ZTV9M35_Auto1)
 <LI><a href="#[12c]">Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</a> from m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc) referenced from m10_rccalib.o(.rodata._ZTV9Mode_Base)
 <LI><a href="#[17f]">RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[17e]">RingQueue&lang;vector2&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector2IdEED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[9d]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
 <LI><a href="#[9d]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
 <LI><a href="#[9d]">RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</a> from ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev) referenced 2 times from ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp)
 <LI><a href="#[21c]">ESO_AngularRate::get_LearnKs() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate11get_LearnKsEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[21b]">ESO_AngularRate::get_ftFreqs() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate11get_ftFreqsEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[227]">ESO_AngularRate::get_EsMainPower() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate15get_EsMainPowerEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[21e]">ESO_AngularRate::get_EsAngularRate() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate17get_EsAngularRateEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[21f]">ESO_AngularRate::get_EsDisturbance() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate17get_EsDisturbanceEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[225]">ESO_AngularRate::get_EsDisturbanceD() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate18get_EsDisturbanceDEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[221]">ESO_AngularRate::get_EsDisturbanceZ() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate18get_EsDisturbanceZEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[223]">ESO_AngularRate::get_EsDisturbanceLearn() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate22get_EsDisturbanceLearnEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[220]">ESO_AngularRate::get_EsDisturbanceFilted() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate23get_EsDisturbanceFiltedEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[224]">ESO_AngularRate::get_EsDisturbanceLearnF() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate23get_EsDisturbanceLearnFEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[222]">ESO_AngularRate::get_EsDisturbanceZFilted() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate24get_EsDisturbanceZFiltedEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[226]">ESO_AngularRate::get_EsAngularAcceleration() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate25get_EsAngularAccelerationEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[216]">ESO_AngularRate::get_T() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate5get_TEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[217]">ESO_AngularRate::get_b() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate5get_bEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[218]">ESO_AngularRate::get_u() const</a> from ms_attitude.o(.text._ZNK15ESO_AngularRate5get_uEv) referenced from ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
 <LI><a href="#[136]">ESO_AngularRateHeli::get_LearnKs() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli11get_LearnKsEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[135]">ESO_AngularRateHeli::get_ftFreqs() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli11get_ftFreqsEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[141]">ESO_AngularRateHeli::get_EsMainPower() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli15get_EsMainPowerEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[138]">ESO_AngularRateHeli::get_EsAngularRate() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli17get_EsAngularRateEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[139]">ESO_AngularRateHeli::get_EsDisturbance() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli17get_EsDisturbanceEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13f]">ESO_AngularRateHeli::get_EsDisturbanceD() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli18get_EsDisturbanceDEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13b]">ESO_AngularRateHeli::get_EsDisturbanceZ() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli18get_EsDisturbanceZEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13d]">ESO_AngularRateHeli::get_EsDisturbanceLearn() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli22get_EsDisturbanceLearnEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13a]">ESO_AngularRateHeli::get_EsDisturbanceFilted() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli23get_EsDisturbanceFiltedEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13e]">ESO_AngularRateHeli::get_EsDisturbanceLearnF() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli23get_EsDisturbanceLearnFEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[13c]">ESO_AngularRateHeli::get_EsDisturbanceZFilted() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli24get_EsDisturbanceZFiltedEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[140]">ESO_AngularRateHeli::get_EsAngularAcceleration() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli25get_EsAngularAccelerationEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[130]">ESO_AngularRateHeli::get_T() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_TEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[131]">ESO_AngularRateHeli::get_b() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_bEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[132]">ESO_AngularRateHeli::get_u() const</a> from ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_uEv) referenced from ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
 <LI><a href="#[180]">std::__2::map&lang;SName, ReceiverSync, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ReceiverSync&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</a> from receiver.o(.text._ZNSt3__23mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2B8nn190000Ev) referenced 2 times from receiver.o(.text._GLOBAL__sub_I_Receiver.cpp)
 <LI><a href="#[a0]">std::__2::map&lang;SName, Param, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, Param&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</a> from parameters.o(.text._ZNSt3__23mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2B8nn190000Ev) referenced 2 times from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
 <LI><a href="#[9f]">std::__2::map&lang;SName, ParamGroup*, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ParamGroup*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</a> from parameters.o(.text._ZNSt3__23mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2B8nn190000Ev) referenced 2 times from parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
 <LI><a href="#[a1]">std::__2::map&lang;unsigned int, CanMailBox*, std::__2::less&lang;unsigned int&rang;, std::__2::allocator&lang;std::__2::pair&lang;unsigned int const, CanMailBox*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</a> from drv_can.o(.text._ZNSt3__23mapIjP10CanMailBoxNS_4lessIjEENS_9allocatorINS_4pairIKjS2_EEEEED2B8nn190000Ev) referenced 2 times from drv_can.o(.text._GLOBAL__sub_I_drv_Can.cpp)
 <LI><a href="#[142]">__cxa_pure_virtual</a> from cxa_virtual.cpp.o(.text.__cxa_pure_virtual) referenced from m10_rccalib.o(.rodata._ZTV9Mode_Base)
 <LI><a href="#[17c]">__cxx_global_array_dtor</a> from commulink.o(.text.__cxx_global_array_dtor) referenced 2 times from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
 <LI><a href="#[9e]">__cxx_global_array_dtor</a> from mavlinkrcprocess.o(.text.__cxx_global_array_dtor) referenced 2 times from mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp)
 <LI><a href="#[17d]">__cxx_global_array_dtor.2</a> from commulink.o(.text.__cxx_global_array_dtor.2) referenced 2 times from commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[98]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[16e]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[170]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[16f]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[97]">_snputc</a> from _snputc.o(.text) referenced from __2snprintf.o(.text)
 <LI><a href="#[16d]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[147]">cdcd_control_complete</a> from usb_composite.o(.text.cdcd_control_complete) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[146]">cdcd_control_request</a> from usb_composite.o(.text.cdcd_control_request) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[143]">cdcd_init</a> from usb_composite.o(.text.cdcd_init) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[145]">cdcd_open</a> from usb_composite.o(.text.cdcd_open) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[144]">cdcd_reset</a> from usb_composite.o(.text.cdcd_reset) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[148]">cdcd_xfer_cb</a> from usb_composite.o(.text.cdcd_xfer_cb) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[171]">isspace</a> from isspace.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[1c5]">lfs_alloc_lookahead</a> from lfs.o(.text.lfs_alloc_lookahead) referenced 2 times from lfs.o(.text.lfs_alloc)
 <LI><a href="#[fb]">lfs_dir_commit_commit</a> from lfs.o(.text.lfs_dir_commit_commit) referenced 2 times from lfs.o(.text.lfs_dir_commit)
 <LI><a href="#[fb]">lfs_dir_commit_commit</a> from lfs.o(.text.lfs_dir_commit_commit) referenced 2 times from lfs.o(.text.lfs_dir_compact)
 <LI><a href="#[fa]">lfs_dir_commit_size</a> from lfs.o(.text.lfs_dir_commit_size) referenced 2 times from lfs.o(.text.lfs_dir_compact)
 <LI><a href="#[fd]">lfs_dir_find_match</a> from lfs.o(.text.lfs_dir_find_match) referenced 2 times from lfs.o(.text.lfs_dir_find)
 <LI><a href="#[fd]">lfs_dir_find_match</a> from lfs.o(.text.lfs_dir_find_match) referenced 2 times from lfs.o(.text.lfs_mount)
 <LI><a href="#[1c6]">lfs_dir_traverse_filter</a> from lfs.o(.text.lfs_dir_traverse_filter) referenced 2 times from lfs.o(.text.lfs_dir_traverse)
 <LI><a href="#[fc]">lfs_fs_parent_match</a> from lfs.o(.text.lfs_fs_parent_match) referenced 2 times from lfs.o(.text.lfs_dir_compact)
 <LI><a href="#[fc]">lfs_fs_parent_match</a> from lfs.o(.text.lfs_fs_parent_match) referenced 2 times from lfs.o(.text.lfs_fs_forceconsistency)
 <LI><a href="#[14d]">mscd_control_complete</a> from usb_composite.o(.text.mscd_control_complete) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14c]">mscd_control_request</a> from usb_composite.o(.text.mscd_control_request) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[149]">mscd_init</a> from usb_composite.o(.text.mscd_init) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14b]">mscd_open</a> from usb_composite.o(.text.mscd_open) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14a]">mscd_reset</a> from usb_composite.o(.text.mscd_reset) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[14e]">mscd_xfer_cb</a> from usb_composite.o(.text.mscd_xfer_cb) referenced from usb_composite.o(.rodata._usbd_driver)
 <LI><a href="#[100]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[ff]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[101]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_crc.o(.text.DMA2_Stream5_IRQHandler)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_can.o(.text.HAL_FDCAN_TxBufferCompleteCallback)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_ER_IRQHandler)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_extiic.o(.text.I2C1_EV_IRQHandler)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_intiic.o(.text.I2C2_ER_IRQHandler)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_intiic.o(.text.I2C2_EV_IRQHandler)
 <LI><a href="#[99]">vEventGroupSetBitsCallback</a> from event_groups.o(.text.vEventGroupSetBitsCallback) referenced 2 times from drv_flash.o(.text.QUADSPI_IRQHandler)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5c5]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[5d9]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5c7]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[683]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[5c8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[5c9]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[5ca]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[5cb]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[5cd]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[5cf]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[684]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[5d0]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[5d1]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[5d2]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[685]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[26e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[5d4]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[686]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[5d6]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[687]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[401]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[244]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[245]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[260]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5cc]"></a>_printf_int_oct</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _printf_oct_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[688]"></a>_printf_longlong_oct</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_oct_int.o(.text), UNUSED)

<P><STRONG><a name="[5ce]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[689]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[5d7]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[5da]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
</UL>

<P><STRONG><a name="[2d8]"></a>__cxa_atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cxa_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Parameters.cpp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Can.cpp
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MavlinkRCProcess.cpp
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Commulink.cpp
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
</UL>

<P><STRONG><a name="[562]"></a>__aeabi_assert</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_open
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
</UL>

<P><STRONG><a name="[68a]"></a>__assert</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, assert.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[566]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[3f6]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[487]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEMA_Parse(NMEA_GPS_State_Machine*, unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[65b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[5dc]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy (via Veneer)
</UL>

<P><STRONG><a name="[68b]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[4c2]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[34d]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_read
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_reset
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_init
</UL>

<P><STRONG><a name="[2d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::init_ft()
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_learn()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_ft()
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::ESO_AngularRate__sub_object()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_InitControl(bool)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_InitControl(bool)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_InitControl(bool)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_PreArmControl(Receiver)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_Init()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Avoidance.cpp
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeOptSensorZ(double*, double)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double, bool)
</UL>

<P><STRONG><a name="[68c]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset (via Veneer)
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[5c4]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[242]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[5de]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[5d3]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[5df]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[5e2]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[5e3]"></a>_c32rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c32rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[248]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c32rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[531]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[5db]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>

<P><STRONG><a name="[68d]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[68e]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[5e6]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4 (via Veneer)
</UL>

<P><STRONG><a name="[5dd]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[68f]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[690]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[5e8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[691]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5e5]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[5e4]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>

<P><STRONG><a name="[171]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[25e]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16f]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[170]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[258]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[239]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[23b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[692]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[693]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5e7]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[5eb]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[231]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[5ed]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[694]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[5f1]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[5ea]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[695]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[270]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[5ec]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[5f6]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[5f5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[5f9]"></a>BSP_SD_GetCardInfo</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardInfo))
<BR><BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[3f3]"></a>BSP_SD_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bsp_driver_sd.o(.text.BSP_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = BSP_SD_Init &rArr; HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[3f2]"></a>BSP_SD_IsDetected</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, bsp_driver_sd.o(.text.BSP_SD_IsDetected))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BSP_SD_IsDetected
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[2cd]"></a>BSP_SD_WriteBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_WriteBlocks_DMA &rArr; HAL_SD_WriteBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[5fd]"></a>BSP_SD_WriteCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sd_diskio.o(.text.BSP_SD_WriteCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, drv_sensors.o(.text.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_uart1.o(.text.DMA1_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_uart5.o(.text.DMA2_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_uart8.o(.text.DMA2_Stream3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61e]"></a>FATFS_LinkDriver</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ff_gen_drv.o(.text.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_can.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>Flash_erase</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, flash_diskio.o(.text.Flash_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Flash_erase &rArr; FlashEraseSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[d2]"></a>Flash_read</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, flash_diskio.o(.text.Flash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Flash_read &rArr; FlashReadPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPages
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[d5]"></a>Flash_sync</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_diskio.o(.text.Flash_sync))
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[661]"></a>Get_SD_Init_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdstorage.o(.text.Get_SD_Init_Complete))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[355]"></a>HAL_EnableCompensationCell</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_EnableCompensationCell))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[288]"></a>HAL_FDCAN_ClockCalibrationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ClockCalibrationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[316]"></a>HAL_FDCAN_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FDCAN_DeInit &rArr; HAL_FDCAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Stop
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[28f]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[504]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 462 bytes, Stack size 28 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanRxTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[289]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[29a]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 384 bytes, Stack size 80 bytes, drv_can.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[295]"></a>HAL_FDCAN_RxBufferNewMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_RxBufferNewMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[28d]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[5fe]"></a>HAL_FDCAN_Stop</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_DeInit
</UL>

<P><STRONG><a name="[290]"></a>HAL_FDCAN_TT_ScheduleSyncCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_ScheduleSyncCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[298]"></a>HAL_FDCAN_TT_StopWatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_StopWatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[297]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[404]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[40c]"></a>HAL_FLASH_Program</STRONG> (Thumb, 538 bytes, Stack size 40 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[40b]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_flash.o(.text.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[27a]"></a>HAL_GetTick</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, timebase.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2e4]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_ConfigRegion))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2bf]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
</UL>

<P><STRONG><a name="[34e]"></a>HAL_PWREx_ConfigSupply</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_ConfigSupply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_ConfigSupply
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[34f]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[353]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 3148 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[352]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 568 bytes, Stack size 32 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCC_ClockConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[351]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1222 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[608]"></a>HAL_SDEx_Write_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[607]"></a>HAL_SDEx_Write_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Write_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[5ff]"></a>HAL_SD_DeInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SD_DeInit &rArr; HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
</UL>

<P><STRONG><a name="[5fa]"></a>HAL_SD_GetCardInfo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardInfo))
<BR><BR>[Called By]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>

<P><STRONG><a name="[272]"></a>HAL_SD_GetCardState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_SD_IRQHandler</STRONG> (Thumb, 726 bytes, Stack size 24 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_SD_IRQHandler &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf0CpltCallback
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Write_DMADoubleBuf1CpltCallback
<LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf0CpltCallback
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SDEx_Read_DMADoubleBuf1CpltCallback
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ErrorCallback
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_WriteFIFO
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC1_IRQHandler
</UL>

<P><STRONG><a name="[5fb]"></a>HAL_SD_Init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HAL_SD_Init &rArr; HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
</UL>

<P><STRONG><a name="[274]"></a>HAL_SD_ReadBlocks_DMA</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_ReadBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[604]"></a>HAL_SD_RxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.HAL_SD_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[602]"></a>HAL_SD_TxCpltCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_driver_sd.o(.text.HAL_SD_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_TxCpltCallback &rArr; BSP_SD_WriteCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[5fc]"></a>HAL_SD_WriteBlocks_DMA</STRONG> (Thumb, 268 bytes, Stack size 56 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_WriteBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SD_WriteBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_PullDownAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, drv_extiic.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C1_EV_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_intiic.o(.text.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C2_ER_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60c]"></a>LocalTime2Unix</STRONG> (Thumb, 58 bytes, Stack size 56 bytes, timebase.o(.text.LocalTime2Unix))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LocalTime2Unix &rArr; mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[48b]"></a>Lock_RTC</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, timebase.o(.text.Lock_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_RTC &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[2c9]"></a>Lock_SD</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_sdmmc.o(.text.Lock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a9]"></a>SDMMC_CmdBusWidth</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBusWidth))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[2b3]"></a>SDMMC_CmdGoIdleState</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdGoIdleState))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[609]"></a>SDMMC_CmdReadSingleBlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2bb]"></a>SDMMC_CmdSelDesel</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSelDesel))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[60e]"></a>SDMMC_CmdSendSCR</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendSCR))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2b9]"></a>SDMMC_CmdSetRelAdd</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSetRelAdd))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[60a]"></a>SDMMC_CmdWriteSingleBlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteSingleBlock))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2aa]"></a>SDMMC_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2b2]"></a>SDMMC_PowerState_ON</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_ON))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2af]"></a>SDMMC_ReadFIFO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ReadFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[1f9]"></a>SD_initialize</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, sd_diskio.o(.text.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_initialize &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[1fd]"></a>SD_ioctl</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SD_ioctl
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 226 bytes, Stack size 0 bytes, drv_sensors.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM16_IRQHandler &rArr; SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, drv_rcppm.o(.text.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TIM1_CC_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[176]"></a>TIM1_IRQHandlerTCB</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, drv_rcppm.o(.text.TIM1_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = TIM1_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcppm.o(.text.TIM1_CC_IRQHandler)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_rcppm.o(.text.TIM1_UP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, auxfuncs.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = TIM4_IRQHandler &rArr; xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, drv_uart5.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART5_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, drv_uart8.o(.text.UART8_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART8_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, drv_uart1.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART1_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 432 bytes, Stack size 56 bytes, drv_rcsbus.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USART2_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31f]"></a>USB_StopDevice</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, stm32h7xx_ll_usb.o(.text.USB_StopDevice))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[2cc]"></a>UnLock_SD</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_sdmmc.o(.text.UnLock_SD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnLock_SD &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[18c]"></a>Lock_Uart3(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart3.o(.text._Z10Lock_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_Uart3(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c2]"></a>Lock_Uart7(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart7.o(.text._Z10Lock_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_Uart7(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[b4]"></a>Read_Uart1(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_uart1.o(.text._Z10Read_Uart1Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Uart1(unsigned char*, unsigned short, double, double) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[bd]"></a>Read_Uart5(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_uart5.o(.text._Z10Read_Uart5Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Uart5(unsigned char*, unsigned short, double, double) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[196]"></a>Read_Uart8(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_uart8.o(.text._Z10Read_Uart8Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Uart8(unsigned char*, unsigned short, double, double) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[4e6]"></a>SetMsgRate(unsigned char, unsigned short, float, double)</STRONG> (Thumb, 560 bytes, Stack size 40 bytes, commulink.o(.text._Z10SetMsgRatehtfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SetMsgRate(unsigned char, unsigned short, float, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
</UL>

<P><STRONG><a name="[611]"></a>addMission(MissionInf, bool, double)</STRONG> (Thumb, 248 bytes, Stack size 112 bytes, missions.o(.text._Z10addMission10MissionInfbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = addMission(MissionInf, bool, double) &rArr; WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3b4]"></a>init_Debug()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, debug.o(.text._Z10init_Debugv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_Debug() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[3b6]"></a>init_MSafe()</STRONG> (Thumb, 276 bytes, Stack size 304 bytes, msafe.o(.text._Z10init_MSafev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584 + Unknown Stack Size
<LI>Call Chain = init_MSafe() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[3b5]"></a>init_Modes()</STRONG> (Thumb, 984 bytes, Stack size 1072 bytes, modes.o(.text._Z10init_Modesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5488 + Unknown Stack Size
<LI>Call Chain = init_Modes() &rArr; init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::M14_HorizonCalib()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[617]"></a>saveFences(double)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, fences.o(.text._Z10saveFencesd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = saveFences(double) &rArr; SaveVolatileParamGroup(SName, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3a7]"></a>Aux_PWM_Out(double, unsigned char)</STRONG> (Thumb, 440 bytes, Stack size 20 bytes, drv_pwmout.o(.text._Z11Aux_PWM_Outdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Aux_PWM_Out(double, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[618]"></a>UpdateParam(SName, unsigned long long, double)</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, parameters.o(.text._Z11UpdateParam5SNameyd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[18f]"></a>Write_Uart3(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, drv_uart3.o(.text._Z11Write_Uart3PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Write_Uart3(unsigned char const*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[be]"></a>Write_Uart5(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drv_uart5.o(.text._Z11Write_Uart5PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Write_Uart5(unsigned char const*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[197]"></a>Write_Uart8(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z11Write_Uart8PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Write_Uart8(unsigned char const*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[4ea]"></a>doMotorTest(unsigned int, double, double)</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z11doMotorTestjdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = doMotorTest(unsigned int, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4c1]"></a>GetDAOSensor(unsigned char, DAO_Sensor*, double)</STRONG> (Thumb, 360 bytes, Stack size 40 bytes, sensors.o(.text._Z12GetDAOSensorhP10DAO_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetDAOSensor(unsigned char, DAO_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[184]"></a>MS_Main_Gyro(void*)</STRONG> (Thumb, 296 bytes, Stack size 240 bytes, ms_main.o(.text._Z12MS_Main_GyroPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = MS_Main_Gyro(void*) &rArr; MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[508]"></a>ModeRegister(Mode_Base*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, modes.o(.text._Z12ModeRegisterP9Mode_Baseh))
<BR><BR>[Called By]<UL><LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::M14_HorizonCalib()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
</UL>

<P><STRONG><a name="[321]"></a>PortRegister(unsigned char, Port)</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, commulink.o(.text._Z12PortRegisterh4Port))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[18b]"></a>Unlock_Uart3()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart3.o(.text._Z12Unlock_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart3() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c1]"></a>Unlock_Uart7()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart7.o(.text._Z12Unlock_Uart7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart7() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[50f]"></a>check_NavCmd(unsigned short, double, unsigned char, double*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, navcmdprocess.o(.text._Z12check_NavCmdtdhPd))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[411]"></a>fast_sin_cos(double, double*, double*)</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, precland.o(.text._Z12fast_sin_cosdPdS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fast_sin_cos(double, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4c7]"></a>getCtrlBatId()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z12getCtrlBatIdv))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[619]"></a>get_AvTarget(unsigned char, AvoidanceTarget*, double)</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, avoidance.o(.text._Z12get_AvTargethP15AvoidanceTargetd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_AvTarget(unsigned char, AvoidanceTarget*, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
</UL>

<P><STRONG><a name="[3b3]"></a>init_MS_Main()</STRONG> (Thumb, 204 bytes, Stack size 112 bytes, ms_main.o(.text._Z12init_MS_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = init_MS_Main() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Position()
<LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[358]"></a>init_drv_ADC()</STRONG> (Thumb, 688 bytes, Stack size 56 bytes, drv_adc.o(.text._Z12init_drv_ADCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_drv_ADC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[373]"></a>init_drv_GPS()</STRONG> (Thumb, 100 bytes, Stack size 112 bytes, drv_gps.o(.text._Z12init_drv_GPSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = init_drv_GPS() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[357]"></a>init_drv_LED()</STRONG> (Thumb, 500 bytes, Stack size 8 bytes, drv_led.o(.text._Z12init_drv_LEDv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_drv_LED() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3e9]"></a>is_MSafeCtrl()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z12is_MSafeCtrlv))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4cb]"></a>update_ESO_2()</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z12update_ESO_2v))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = update_ESO_2()
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[b3]"></a>ResetRx_Uart1(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart1.o(.text._Z13ResetRx_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetRx_Uart1(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[18d]"></a>ResetRx_Uart3(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart3.o(.text._Z13ResetRx_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetRx_Uart3(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[bc]"></a>ResetRx_Uart5(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart5.o(.text._Z13ResetRx_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetRx_Uart5(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[c3]"></a>ResetRx_Uart7(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart7.o(.text._Z13ResetRx_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetRx_Uart7(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[195]"></a>ResetRx_Uart8(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart8.o(.text._Z13ResetRx_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ResetRx_Uart8(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[4c9]"></a>batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)</STRONG> (Thumb, 704 bytes, Stack size 96 bytes, ctrl_main.o(.text._Z13batteryUpdatehjbffffPKfffftjhS0_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_Server(void*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[338]"></a>getAttCtrlCfg()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z13getAttCtrlCfgv))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4a0]"></a>getHomeLatLon(vector2&lang;double&rang;*, double*, double)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z13getHomeLatLonP7vector2IdEPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getHomeLatLon(vector2&lang;double&rang;*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[4a2]"></a>getPosCtrlCfg()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z13getPosCtrlCfgv))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3ad]"></a>get_CommuPort(unsigned char)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, commulink.o(.text._Z13get_CommuPorth))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4bf]"></a>get_Vibration(vector3&lang;float&rang;*, double)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z13get_VibrationP7vector3IfEd))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[616]"></a>init_AuxFuncs()</STRONG> (Thumb, 2296 bytes, Stack size 3136 bytes, auxfuncs.o(.text._Z13init_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4416 + Unknown Stack Size
<LI>Call Chain = init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[a5]"></a>Lock_USBD_VCOM(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_usb.o(.text._Z14Lock_USBD_VCOMd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_USBD_VCOM(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[424]"></a>MS_WGA_Correct()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z14MS_WGA_Correctv))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[317]"></a>ReadParamGroup(SName, unsigned long long*, bool*, double)</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restoreWpInf(double)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAuxPWM(float, unsigned char)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_Init()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1bySpeed(float)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[2ee]"></a>ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, parameters.o(.text._Z14ReadParamGroup5SNamePyPbttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[2d1]"></a>ReceiverUpdate(SName, bool, float*, unsigned char, double)</STRONG> (Thumb, 1800 bytes, Stack size 184 bytes, receiver.o(.text._Z14ReceiverUpdate5SNamebPfhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg69_MANUAL_CONTROL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[61d]"></a>getBatteryInfo(unsigned char, BatteryInfo*, double)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, ctrl_main.o(.text._Z14getBatteryInfohP11BatteryInfod))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = getBatteryInfo(unsigned char, BatteryInfo*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[4b7]"></a>get_MSHealthXY()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z14get_MSHealthXYv))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[342]"></a>get_throttle_b(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z14get_throttle_bPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_throttle_b(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[362]"></a>init_SDStorage()</STRONG> (Thumb, 244 bytes, Stack size 312 bytes, sdstorage.o(.text._Z14init_SDStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = init_SDStorage() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[360]"></a>init_drv_RCPPM()</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, drv_rcppm.o(.text._Z14init_drv_RCPPMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = init_drv_RCPPM() &rArr; ReceiverRegister(SName, bool, RC_CONFIG const*) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[35d]"></a>init_drv_SDMMC()</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, drv_sdmmc.o(.text._Z14init_drv_SDMMCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = init_drv_SDMMC() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[364]"></a>init_drv_Uart3()</STRONG> (Thumb, 784 bytes, Stack size 88 bytes, drv_uart3.o(.text._Z14init_drv_Uart3v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_Uart3() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[367]"></a>init_drv_Uart8()</STRONG> (Thumb, 784 bytes, Stack size 88 bytes, drv_uart8.o(.text._Z14init_drv_Uart8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_Uart8() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3fa]"></a>set_BuzzerFreq(unsigned short)</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, drv_led.o(.text._Z14set_BuzzerFreqt))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRefresh(float)
</UL>

<P><STRONG><a name="[492]"></a>DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)</STRONG> (Thumb, 328 bytes, Stack size 80 bytes, sensors.o(.text._Z15DAOSensorUpdatehj7vector3IdEbdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[60b]"></a>PWM_PullDownAll()</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z15PWM_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[61f]"></a>SetPosSensorMsg(unsigned char, unsigned char, short, double)</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, commulink.o(.text._Z15SetPosSensorMsghhsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetPosSensorMsg(unsigned char, unsigned char, short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[a9]"></a>Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, drv_usb.o(.text._Z15Write_USBD_VCOMPKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Write_USBD_VCOM(unsigned char const*, unsigned short, double, double) &rArr; cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[621]"></a>batteryRegister(unsigned char, double)</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z15batteryRegisterhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = batteryRegister(unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_DriverRun()
</UL>

<P><STRONG><a name="[35c]"></a>init_Parameters()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, parameters.o(.text._Z15init_Parametersv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = init_Parameters() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[361]"></a>init_drv_PWMOut()</STRONG> (Thumb, 3478 bytes, Stack size 40 bytes, drv_pwmout.o(.text._Z15init_drv_PWMOutv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = init_drv_PWMOut() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[36a]"></a>init_drv_RCSbus()</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, drv_rcsbus.o(.text._Z15init_drv_RCSbusv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = init_drv_RCSbus() &rArr; ReceiverRegister(SName, bool, RC_CONFIG const*) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[382]"></a>init_drv_TFMini()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_tfmini.o(.text._Z15init_drv_TFMiniv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[63d]"></a>inject_RtkPorts(unsigned char const*, unsigned short)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, commulink.o(.text._Z15inject_RtkPortsPKht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = inject_RtkPorts(unsigned char const*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCMInput_Server(void*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg233_GPS_RTCM_DATA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3a4]"></a>setCurrentFence(short)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, fences.o(.text._Z15setCurrentFences))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
</UL>

<P><STRONG><a name="[4c0]"></a>GetAccelerometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, sensors.o(.text._Z16GetAccelerometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetAccelerometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3be]"></a>I2CFunc_Register(unsigned char, bool (*)(), bool (*)())</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, commulink.o(.text._Z16I2CFunc_RegisterhPFbvES0_))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICTFMiniAv()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICTFMini()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtBarometer()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICIRLock()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtLed_TCA62724FMG()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_InternalMag()
</UL>

<P><STRONG><a name="[4d1]"></a>IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, drv_intiic.o(.text._Z16IntIIC_SendAddr7hPKht8IICSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
</UL>

<P><STRONG><a name="[a6]"></a>Unlock_USBD_VCOM()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_usb.o(.text._Z16Unlock_USBD_VCOMv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_USBD_VCOM() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[63c]"></a>getSdTotalSizeGB()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text._Z16getSdTotalSizeGBv))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[50e]"></a>getTankRMPercent()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, auxfuncs.o(.text._Z16getTankRMPercentv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[441]"></a>get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z16get_TargetPosInfP20Position_ControlModeS0_P7vector3IdES3_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[61a]"></a>init_MS_Attitude()</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z16init_MS_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = init_MS_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[388]"></a>init_drv_YT_ZR10()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_yt_zr10.o(.text._Z16init_drv_YT_ZR10v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4fe]"></a>AuxGimbalSetAngle(double)</STRONG> (Thumb, 188 bytes, Stack size 928 bytes, auxfuncs.o(.text._Z17AuxGimbalSetAngled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AuxChannelCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd205_MAV_CMD_DO_MOUNT_CONTROL(unsigned short, double*)
</UL>

<P><STRONG><a name="[623]"></a>ClearPosSensorMsg(unsigned char, unsigned char, double)</STRONG> (Thumb, 440 bytes, Stack size 24 bytes, commulink.o(.text._Z17ClearPosSensorMsghhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ClearPosSensorMsg(unsigned char, unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[491]"></a>DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, sensors.o(.text._Z17DAOSensorRegisterh5SName7vector3IdEbdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[4d5]"></a>MainMotor_PWM_Out(double*)</STRONG> (Thumb, 408 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z17MainMotor_PWM_OutPd))
<BR><BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_MotorControl(double, double, double, double, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_PreArmControl(Receiver)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_MotorControl(double, double, double, double, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_InitControl(bool)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_PreArmControl(Receiver)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_MotorControl(double, double, double, double, bool)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_PreArmControl(Receiver)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotorX_MotorControl(double, double, double, double, bool)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_InitControl(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_PreArmControl(Receiver)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_InitControl(bool)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_PreArmControl(Receiver)
</UL>

<P><STRONG><a name="[31d]"></a>PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, commulink.o(.text._Z17PortFunc_RegisterhPFb4PortjE))
<BR><BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADM001()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_MR72_UartAv()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMiniAv()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_Viewlink()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_RYEOP()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_INYYO()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_ZR10()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_UWB_LinkTrack()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_US100()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_NRA24()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ISTRA24_2()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ISTRA24()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_GL9306()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_JL32xx()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC306()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC302()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTCMInput()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM982_movingTrack()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM982()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM482()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_MosaxicX6()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_MosaxicX5()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Move()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Base()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_Track()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS_nmea()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
</UL>

<P><STRONG><a name="[a8]"></a>ResetRx_USBD_VCOM(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_usb.o(.text._Z17ResetRx_USBD_VCOMd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ResetRx_USBD_VCOM(double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[18a]"></a>SetBaudRate_Uart3(unsigned int, double, double)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, drv_uart3.o(.text._Z17SetBaudRate_Uart3jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetBaudRate_Uart3(unsigned int, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c0]"></a>SetBaudRate_Uart7(unsigned int, double, double)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, drv_uart7.o(.text._Z17SetBaudRate_Uart7jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetBaudRate_Uart7(unsigned int, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[61c]"></a>TaskQueueRegister(unsigned short, unsigned short)</STRONG> (Thumb, 894 bytes, Stack size 88 bytes, mavlinkcmdprocess.o(.text._Z17TaskQueueRegistertt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TaskQueueRegister(unsigned short, unsigned short) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_DriverInit(Port, unsigned int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_DriverInit(Port, unsigned int)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
</UL>

<P><STRONG><a name="[34b]"></a>getCurrentFlyMode()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, modes.o(.text._Z17getCurrentFlyModev))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mav_modes(unsigned short&, unsigned short&, unsigned short&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[2f9]"></a>get_Attitude_quat(Quaternion*, double)</STRONG> (Thumb, 448 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z17get_Attitude_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[33a]"></a>get_EsAngularRate(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z17get_EsAngularRateP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_EsAngularRate(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[335]"></a>get_Position_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z17get_Position_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_Position_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[389]"></a>init_drv_YT_INYYO()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_yt_inyyo.o(.text._Z17init_drv_YT_INYYOv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[50c]"></a>read_restoreWpInf(double)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, modes.o(.text._Z17read_restoreWpInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = read_restoreWpInf(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[49f]"></a>setCurrentFlyMode(AFunc)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modes.o(.text._Z17setCurrentFlyMode5AFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setCurrentFlyMode(AFunc)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_MSafeCtrl()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3f9]"></a>set_LedBrightness(float, float, float)</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, drv_led.o(.text._Z17set_LedBrightnessfff))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRefresh(float)
</UL>

<P><STRONG><a name="[2f4]"></a>xLPDaemonTaskCall(void (*)(void*, unsigned int), void*, unsigned int, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, basic.o(.text._Z17xLPDaemonTaskCallPFvPvjES_jj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xLPDaemonTaskCall(void (*)(void*, unsigned int), void*, unsigned int, unsigned int) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[3d8]"></a>GetParametersCount(unsigned int*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, parameters.o(.text._Z18GetParametersCountPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetParametersCount(unsigned int*)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[624]"></a>clearGyroOffsetEst(unsigned char, double)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z18clearGyroOffsetEsthd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = clearGyroOffsetEst(unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3a0]"></a>getCurrentFenceInd()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fences.o(.text._Z18getCurrentFenceIndv))
<BR><BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
</UL>

<P><STRONG><a name="[2fd]"></a>get_AirframeY_quat(Quaternion*, double)</STRONG> (Thumb, 784 bytes, Stack size 176 bytes, ms_attitude.o(.text._Z18get_AirframeY_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3a9]"></a>get_CommulinkSysId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z18get_CommulinkSysIdv))
<BR><BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg11_SET_MODE(unsigned char, __mavlink_message const*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[348]"></a>get_OutputThrottle(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z18get_OutputThrottlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_OutputThrottle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[453]"></a>get_YawDeclination(double*, double)</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, ms_attitude.o(.text._Z18get_YawDeclinationPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_YawDeclination(double*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[33f]"></a>get_hover_throttle(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z18get_hover_throttlePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_hover_throttle(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[4ba]"></a>get_init_YawSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z18get_init_YawSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[49d]"></a>get_lastXYCtrlTime(TIME*, double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z18get_lastXYCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_lastXYCtrlTime(TIME*, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[4a7]"></a>get_precLandSensor(precLandSensor*, double)</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, precland.o(.text._Z18get_precLandSensorP14precLandSensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_precLandSensor(precLandSensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[3ec]"></a>init_Ctrl_Position()</STRONG> (Thumb, 1628 bytes, Stack size 1432 bytes, ctrl_position.o(.text._Z18init_Ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2712 + Unknown Stack Size
<LI>Call Chain = init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[371]"></a>init_drv_IICTFMini()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_iictfmini.o(.text._Z18init_drv_IICTFMiniv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[384]"></a>init_drv_ISTRA24_2()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_istra24_2.o(.text._Z18init_drv_ISTRA24_2v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[37d]"></a>init_drv_RTCMInput()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtcminput.o(.text._Z18init_drv_RTCMInputv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[375]"></a>init_drv_RTK_Track()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtk_track.o(.text._Z18init_drv_RTK_Trackv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[37b]"></a>init_drv_RTK_UM982()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_um982.o(.text._Z18init_drv_RTK_UM982v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4ac]"></a>ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, drv_extiic.o(.text._Z19ExtIIC_ReceiveAddr7hPht8IICSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
</UL>

<P><STRONG><a name="[519]"></a>AuxCamTakePhotoAsync(double)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, auxfuncs.o(.text._Z20AuxCamTakePhotoAsyncd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = AuxCamTakePhotoAsync(double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4ab]"></a>followSensorRegister(followDataType, double)</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, followtarget.o(.text._Z20followSensorRegister14followDataTyped))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = followSensorRegister(followDataType, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4e5]"></a>getCurrentMissionInd()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z20getCurrentMissionIndv))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3a2]"></a>get_OptimalGlobal_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 808 bytes, Stack size 56 bytes, ms_position.o(.text._Z20get_OptimalGlobal_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_OptimalGlobal_XY(PosSensorHealthInf2*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4a3]"></a>get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 472 bytes, Stack size 112 bytes, ms_position.o(.text._Z20get_VelocityFLU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double) &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[372]"></a>init_drv_IICTFMiniAv()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_iictfmini_av.o(.text._Z20init_drv_IICTFMiniAvv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[36c]"></a>init_drv_InternalMag()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_internalmag.o(.text._Z20init_drv_InternalMagv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[38d]"></a>init_drv_MR72_UartAv()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_mr72_uartav.o(.text._Z20init_drv_MR72_UartAvv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[38b]"></a>init_drv_YT_Viewlink()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_yt_viewlink.o(.text._Z20init_drv_YT_Viewlinkv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4ff]"></a>lock_InternalStorage(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, internalstorage.o(.text._Z20lock_InternalStoraged))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lock_InternalStorage(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[2eb]"></a>GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, sensors.o(.text._Z21GetPositionSensorDatahP20Position_Sensor_Datad))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetPositionSensorData(unsigned char, Position_Sensor_Data*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeOptSensorZ(double*, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[3ba]"></a>MainMotor_PullDownAll()</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z21MainMotor_PullDownAllv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_InitControl(bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_PreArmControl(Receiver)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_MotorControl(double, double, double, double, bool)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_InitControl(bool)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_PreArmControl(Receiver)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_InitControl(bool)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_PreArmControl(Receiver)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotorX_MotorControl(double, double, double, double, bool)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_InitControl(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_PreArmControl(Receiver)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_InitControl(bool)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_PreArmControl(Receiver)
</UL>

<P><STRONG><a name="[3b2]"></a>ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)</STRONG> (Thumb, 312 bytes, Stack size 8 bytes, mavlinkcmdprocess.o(.text._Z21ReceiveCmdMsgFromTaskP6CmdMsgtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[3e6]"></a>getCurrentBatteryInfo(BatteryInfo*, signed char*, double)</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, ctrl_main.o(.text._Z21getCurrentBatteryInfoP11BatteryInfoPad))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getCurrentBatteryInfo(BatteryInfo*, signed char*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_MotorControl(double, double, double, double, bool)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_MotorControl(double, double, double, double, bool)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_MotorControl(double, double, double, double, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotorX_MotorControl(double, double, double, double, bool)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[2f8]"></a>get_Attitude_MSStatus()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z21get_Attitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[443]"></a>get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)</STRONG> (Thumb, 664 bytes, Stack size 56 bytes, ms_position.o(.text._Z21get_OptimalGlobal_XYZP19PosSensorHealthInf3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
</UL>

<P><STRONG><a name="[337]"></a>get_Position_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Position_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[370]"></a>init_drv_ExtBarometer()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_extbarometer.o(.text._Z21init_drv_ExtBarometerv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3ce]"></a>PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 632 bytes, Stack size 144 bytes, sensors.o(.text._Z22PositionSensorRegisterh5SName20Position_Sensor_Type24Position_Sensor_DataType21Position_Sensor_framedddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TFMini_DriverRun()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_DriverRun()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_DriverInit(Port, unsigned int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DriverInit(Port, unsigned int)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_DriverInit(Port, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_GL9306_DriverInit(Port, unsigned int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC306_DriverInit(Port, unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC302_DriverInit(Port, unsigned int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_JL32xx_DriverInit(Port, unsigned int)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_DriverInit(Port, unsigned int)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[aa]"></a>USBD_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_usb.o(.text._Z22USBD_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBD_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[501]"></a>get_VelocityENU_Ctrl_y()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z22get_VelocityENU_Ctrl_yv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06TCB(void*, unsigned int)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
</UL>

<P><STRONG><a name="[38f]"></a>init_drv_CAN_BMS_TATTU()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_can_bms_tattu.o(.text._Z22init_drv_CAN_BMS_TATTUv))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[378]"></a>init_drv_RTK_MosaxicX5()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_mosaxicx5.o(.text._Z22init_drv_RTK_MosaxicX5v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[387]"></a>init_drv_UWB_LinkTrack()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uwb_linktrack.o(.text._Z22init_drv_UWB_LinkTrackv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[488]"></a>precLandSensorRegister(double)</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, precland.o(.text._Z22precLandSensorRegisterd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = precLandSensorRegister(double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
</UL>

<P><STRONG><a name="[4cf]"></a>IMUMagnetometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 808 bytes, Stack size 216 bytes, sensors.o(.text._Z23IMUMagnetometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
</UL>

<P><STRONG><a name="[4d0]"></a>IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, drv_intiic.o(.text._Z23IntIIC_SendReceiveAddr7hPKhtS0_t8IICSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
</UL>

<P><STRONG><a name="[189]"></a>Uart3_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart3.o(.text._Z23Uart3_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart3_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[bf]"></a>Uart7_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart7.o(.text._Z23Uart7_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart7_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[63f]"></a>getUploadingFencesCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fences.o(.text._Z23getUploadingFencesCountv))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3cb]"></a>IMUAccelerometerRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 808 bytes, Stack size 216 bytes, sensors.o(.text._Z24IMUAccelerometerRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = IMUAccelerometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[499]"></a>IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)</STRONG> (Thumb, 800 bytes, Stack size 240 bytes, sensors.o(.text._Z24IMUAccelerometerUpdateTChj7vector3IiEbdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator+(SName const&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20689TCB(void*, unsigned int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088AccelTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[3de]"></a>InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, internalstorage.o(.text._Z24InternalStorage_ReadFilePKcS0_PvPjjid))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160 + Unknown Stack Size
<LI>Call Chain = InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_size
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
</UL>

<P><STRONG><a name="[39c]"></a>InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)</STRONG> (Thumb, 280 bytes, Stack size 296 bytes, internalstorage.o(.text._Z24InternalStorage_SaveFilePKcS0_PKvjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
</UL>

<P><STRONG><a name="[3c2]"></a>LockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z24LockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>

<P><STRONG><a name="[49a]"></a>MS_Notify_IMUAceelUpdate(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ms_main.o(.text._Z24MS_Notify_IMUAceelUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_Notify_IMUAceelUpdate(unsigned char) &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20689TCB(void*, unsigned int)
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088AccelTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[326]"></a>get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z24get_AccelerationENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[4a1]"></a>get_Altitude_ControlMode(Position_ControlMode*, double)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z24get_Altitude_ControlModeP20Position_ControlModed))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_Altitude_ControlMode(Position_ControlMode*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[454]"></a>get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z24get_Position_ControlModeP20Position_ControlModePdP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
</UL>

<P><STRONG><a name="[51a]"></a>get_prestoreMissionState()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z24get_prestoreMissionStatev))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[391]"></a>init_drv_CAN_QOAR1271_Av()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_can_qoar1271_av.o(.text._Z24init_drv_CAN_QOAR1271_Avv))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[628]"></a>update_precLandSensorYaw(double, bool, double)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, precland.o(.text._Z24update_precLandSensorYawdbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = update_precLandSensorYaw(double, bool, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[29e]"></a>xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, basic.o(.text._Z24xLPDaemonTaskCallFromISRPFvPvjES_jPl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2f3]"></a>IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)</STRONG> (Thumb, 1296 bytes, Stack size 320 bytes, sensors.o(.text._Z25IMUGyroscopeAddBodyOffseth7vector3IdEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1944 + Unknown Stack Size
<LI>Call Chain = IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[4ce]"></a>IMUMagnetometerUnRegister(unsigned char, unsigned int, double)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sensors.o(.text._Z25IMUMagnetometerUnRegisterhjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = IMUMagnetometerUnRegister(unsigned char, unsigned int, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[421]"></a>InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)</STRONG> (Thumb, 296 bytes, Stack size 296 bytes, internalstorage.o(.text._Z25InternalStorage_WriteFilePKcS0_PKvjjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
</UL>

<P><STRONG><a name="[640]"></a>getUploadingMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z25getUploadingMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[522]"></a>get_AccelerationNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z25get_AccelerationNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_AccelerationNC_filted(vector3&lang;double&rang;*, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[431]"></a>get_history_AirframeQuatY(Quaternion*, double, double)</STRONG> (Thumb, 872 bytes, Stack size 184 bytes, ms_attitude.o(.text._Z25get_history_AirframeQuatYP10Quaterniondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = get_history_AirframeQuatY(Quaternion*, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
</UL>

<P><STRONG><a name="[4bd]"></a>Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)</STRONG> (Thumb, 584 bytes, Stack size 416 bytes, mavlinksendfuncs.o(.text._Z26Msg206_ACFlyPosSensor_INFOhP17__mavlink_messageh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[303]"></a>TruncateVolatileParamGroup(SName, unsigned short, double)</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, parameters.o(.text._Z26TruncateVolatileParamGroup5SNametd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = TruncateVolatileParamGroup(SName, unsigned short, double) &rArr; InternalStorage_TruncateFile(char const*, char const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
</UL>

<P><STRONG><a name="[30c]"></a>VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)</STRONG> (Thumb, 500 bytes, Stack size 120 bytes, parameters.o(.text._Z26VolatileParamGroupRegister5SNamettj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Fences()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
</UL>

<P><STRONG><a name="[306]"></a>getInitializationCompleted()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, basic.o(.text._Z26getInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::operator++()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::reset()
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned int*)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAuxPWM(float, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1bySpeed(float)
</UL>

<P><STRONG><a name="[37f]"></a>init_drv_OpticalFlow_LC306()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4ca]"></a>adcGet_MainBaterry2_Voltage()</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_adc.o(.text._Z27adcGet_MainBaterry2_Voltagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = adcGet_MainBaterry2_Voltage() &rArr; ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[380]"></a>init_drv_OpticalFlow_JL32xx()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[2f2]"></a>is_Attitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z27is_Attitude_Control_EnabledPbd))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltFilted(float*, signed char*, double)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mav_modes(unsigned short&, unsigned short&, unsigned short&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRaw(float*, signed char*, double)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[3e5]"></a>is_Position_Control_Enabled(bool*, double)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z27is_Position_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
</UL>

<P><STRONG><a name="[49e]"></a>Attitude_Control_set_YawLock(double)</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z28Attitude_Control_set_YawLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Attitude_Control_set_YawLock(double) &rArr; get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[629]"></a>InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)</STRONG> (Thumb, 272 bytes, Stack size 296 bytes, internalstorage.o(.text._Z28InternalStorage_TruncateFilePKcS0_jd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1536 + Unknown Stack Size
<LI>Call Chain = InternalStorage_TruncateFile(char const*, char const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
</UL>

<P><STRONG><a name="[2fe]"></a>PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)</STRONG> (Thumb, 608 bytes, Stack size 400 bytes, sensors.o(.text._Z28PositionSensorSetInavailablehjPKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_Server(void*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[4ae]"></a>PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 3280 bytes, Stack size 584 bytes, sensors.o(.text._Z28PositionSensorUpdatePositionhj7vector3IdEbdddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06TCB(void*, unsigned int)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_Server(void*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_Server(void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_Server(void*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[62b]"></a>SDLog_Msg_AttitudeQuaternion(double)</STRONG> (Thumb, 448 bytes, Stack size 192 bytes, sdstorage.o(.text._Z28SDLog_Msg_AttitudeQuaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + Unknown Stack Size
<LI>Call Chain = SDLog_Msg_AttitudeQuaternion(double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[4cd]"></a>get_current_use_IMUGyroscope()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z28get_current_use_IMUGyroscopev))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[3cd]"></a>set_IMU_Gyroscope_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ms_main.o(.text._Z28set_IMU_Gyroscope_UpdateFreqhd))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[4df]"></a>getCurrentBatteryTotalVoltRaw(float*, signed char*, double)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ctrl_main.o(.text._Z29getCurrentBatteryTotalVoltRawPfPad))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getCurrentBatteryTotalVoltRaw(float*, signed char*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
</UL>

<P><STRONG><a name="[516]"></a>Position_Control_Takeoff_Height(double, double)</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z31Position_Control_Takeoff_Heightdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Position_Control_Takeoff_Height(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4fd]"></a>Position_Control_get_ZAutoSpeed(double*, double*, double)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z31Position_Control_get_ZAutoSpeedPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_get_ZAutoSpeed(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
</UL>

<P><STRONG><a name="[514]"></a>Position_Control_set_XYLockFast(double, double)</STRONG> (Thumb, 386 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z31Position_Control_set_XYLockFastdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_XYLockFast(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[462]"></a>set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double)</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, avoidance.o(.text._Z31set_AvTarget3dPoint_RelativeEnuh7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double) &rArr; get_Position_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)
</UL>

<P><STRONG><a name="[4fb]"></a>Position_Control_set_XYAutoSpeed(double, double)</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z32Position_Control_set_XYAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_XYAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
</UL>

<P><STRONG><a name="[4b5]"></a>getCurrentBatteryTotalVoltFilted(float*, signed char*, double)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ctrl_main.o(.text._Z32getCurrentBatteryTotalVoltFiltedPfPad))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getCurrentBatteryTotalVoltFilted(float*, signed char*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[4cc]"></a>get_current_use_IMUAccelerometer()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z32get_current_use_IMUAccelerometerv))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[4fc]"></a>Position_Control_get_XYZAutoSpeed(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z33Position_Control_get_XYZAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Position_Control_get_XYZAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
</UL>

<P><STRONG><a name="[4d2]"></a>__PositionSensorIncreaseSlamAngle(unsigned char, double const&, double)</STRONG> (Thumb, 752 bytes, Stack size 72 bytes, sensors.o(.text._Z33__PositionSensorIncreaseSlamAnglehRKdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __PositionSensorIncreaseSlamAngle(unsigned char, double const&, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[4eb]"></a>PositionSlamSensorResetAngleOffset(unsigned char, unsigned int, double, double)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, sensors.o(.text._Z34PositionSlamSensorResetAngleOffsethjdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PositionSlamSensorResetAngleOffset(unsigned char, unsigned int, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4a8]"></a>Attitude_Control_get_TargetTrackYaw(double*, double)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z35Attitude_Control_get_TargetTrackYawPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude_Control_get_TargetTrackYaw(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[468]"></a>Position_Control_set_TargetPositionZ(double, double, double)</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetPositionZddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[347]"></a>Attitude_Control_get_Target_RollPitch(double*, double*, double)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_get_Target_RollPitchPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude_Control_get_Target_RollPitch(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[48f]"></a>PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 3600 bytes, Stack size 648 bytes, sensors.o(.text._Z37PositionSensorUpdatePositionGlobalVelhj7vector3IdES0_bdddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat(double*) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[474]"></a>Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 816 bytes, Stack size 80 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionXYZdddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[46a]"></a>set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double)</STRONG> (Thumb, 256 bytes, Stack size 80 bytes, avoidance.o(.text._Z38set_AvTargetXYStraightLine_RelativeEnuh7vector2IdEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_Position_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
</UL>

<P><STRONG><a name="[517]"></a>Attitude_Control_set_Target_Yaw_Offboard(double, double, double)</STRONG> (Thumb, 568 bytes, Stack size 128 bytes, ctrl_attitude.o(.text._Z40Attitude_Control_set_Target_Yaw_Offboardddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = Attitude_Control_set_Target_Yaw_Offboard(double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4ad]"></a>Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 244 bytes, Stack size 232 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetPositionXY_LatLonddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[481]"></a>Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 752 bytes, Stack size 80 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYRelativeddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector2&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[47a]"></a>Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z46Position_Control_set_TargetPosVelAccZ_OffBoarddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosZRAVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosGlobalVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4c4]"></a>Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 308 bytes, Stack size 248 bytes, ctrl_position.o(.text._Z47Position_Control_set_TargetPositionXYZRA_LatLondddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[512]"></a>Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double)</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z48Position_Control_set_TargetVelocityXY_AngleLimitdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4c3]"></a>Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 392 bytes, Stack size 136 bytes, ctrl_position.o(.text._Z57Position_Control_set_TargetPositionXYZRelativeBodyheadingdddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[4a4]"></a>Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)</STRONG> (Thumb, 616 bytes, Stack size 88 bytes, ctrl_position.o(.text._Z59Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimitddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double) &rArr; Attitude_Control_get_TargetTrackYaw(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[185]"></a>MS_Main(void*)</STRONG> (Thumb, 640 bytes, Stack size 264 bytes, ms_main.o(.text._Z7MS_MainPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3184 + Unknown Stack Size
<LI>Call Chain = MS_Main(void*) &rArr; MS_Attitude(unsigned char, IMU_Sensor) &rArr; IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_main.o(.text._Z12init_MS_Mainv)
</UL>
<P><STRONG><a name="[490]"></a>CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, drv_crc.o(.text._Z8CRC_Calc7CRC_CfgPKhtPjjbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double) &rArr; calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crcResult(CRC_Cfg const&, unsigned int*)
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc_calc_start(CRC_Cfg const&, unsigned int, bool)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
</UL>

<P><STRONG><a name="[30a]"></a>LockCtrl(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl_main.o(.text._Z8LockCtrld))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMotorTest(unsigned int, double, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EsAngularRate(vector3&lang;double&rang;*, double)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es_AccZ(double*, double)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OutputThrottle(double*, double)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeOptSensorZ(double*, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_PositionErr(vector3&lang;double&rang;*, double, double)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TurnRaius(double, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccZ_OffBoard(double, double, double)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLockFast(double, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackVel(double*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[407]"></a>ParseHex(char, _HexData*)</STRONG> (Thumb, 1210 bytes, Stack size 16 bytes, drv_bootloader.o(.text._Z8ParseHexcP8_HexData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ParseHex(char, _HexData*)
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[630]"></a>addFence(FenceInf, bool, double)</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, fences.o(.text._Z8addFence8FenceInfbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752 + Unknown Stack Size
<LI>Call Chain = addFence(FenceInf, bool, double) &rArr; WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4b3]"></a>getAvCfg()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ctrl_position.o(.text._Z8getAvCfgv))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_Server(void*)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3a1]"></a>ReadFence(unsigned short, FenceInf*, double)</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, fences.o(.text._Z9ReadFencetP8FenceInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ReadFence(unsigned short, FenceInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[2fb]"></a>ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, parameters.o(.text._Z9ReadParam5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry2_Voltage()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Voltage()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Current()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTrigTCB(void*, unsigned int)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[645]"></a>cleanupSD(short)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sdstorage.o(.text._Z9cleanupSDs))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4c8]"></a>getVoltKp()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z9getVoltKpv))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[631]"></a>setAuxPWM(float, unsigned char)</STRONG> (Thumb, 152 bytes, Stack size 928 bytes, auxfuncs.o(.text._Z9setAuxPWMfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = setAuxPWM(float, unsigned char) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd183_DO_SET_SERVO(unsigned short, double*)
</UL>

<P><STRONG><a name="[2f0]"></a>Quaternion::rotate_delta_angle(vector3&lang;double&rang;)</STRONG> (Thumb, 472 bytes, Stack size 80 bytes, m14_horizoncalib.o(.text._ZN10Quaternion18rotate_delta_angleE7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[612]"></a>M10_RCCalib::M10_RCCalib()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M10_RCCalib::M10_RCCalib() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[696]"></a>M10_RCCalib::M10_RCCalib__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m10_rccalib.o(.text._ZN11M10_RCCalibC2Ev), UNUSED)

<P><STRONG><a name="[212]"></a>M30_AttCtrl::main_func(void*, unsigned int)</STRONG> (Thumb, 480 bytes, Stack size 240 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = M30_AttCtrl::main_func(void*, unsigned int) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttCtrlCfg()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
</UL>
<P><STRONG><a name="[615]"></a>M32_PosCtrl::M32_PosCtrl()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M32_PosCtrl::M32_PosCtrl() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[697]"></a>M32_PosCtrl::M32_PosCtrl__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrlC2Ev), UNUSED)

<P><STRONG><a name="[12b]"></a>M12_AccCalib::main_func(void*, unsigned int)</STRONG> (Thumb, 6896 bytes, Stack size 1800 bytes, m12_acccalib.o(.text._ZN12M12_AccCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 3424 + Unknown Stack Size
<LI>Call Chain = M12_AccCalib::main_func(void*, unsigned int) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
</UL>
<P><STRONG><a name="[613]"></a>M12_AccCalib::M12_AccCalib()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M12_AccCalib::M12_AccCalib() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[698]"></a>M12_AccCalib::M12_AccCalib__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m12_acccalib.o(.text._ZN12M12_AccCalibC2Ev), UNUSED)

<P><STRONG><a name="[214]"></a>M11_TempCalib::main_func(void*, unsigned int)</STRONG> (Thumb, 4072 bytes, Stack size 1008 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632 + Unknown Stack Size
<LI>Call Chain = M11_TempCalib::main_func(void*, unsigned int) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGyroOffsetEst(unsigned char, double)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
</UL>
<P><STRONG><a name="[64a]"></a>ESO_AngularRate::init_learn()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate10init_learnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRate::init_learn()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>

<P><STRONG><a name="[21d]"></a>ESO_AngularRate::load_LearnKs(double*)</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate12load_LearnKsEPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESO_AngularRate::load_LearnKs(double*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[4b2]"></a>ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)</STRONG> (Thumb, 1556 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRate4initEbhddddhdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double) &rArr; Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_learn()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_ft()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_Init()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_Init()
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_Init()
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotor_Init()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_Init()
</UL>

<P><STRONG><a name="[42c]"></a>ESO_AngularRate::ESO_AngularRate__sub_object()</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._ZN15ESO_AngularRateC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRate::ESO_AngularRate__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[215]"></a>ESO_AngularRate::~ESO_AngularRate__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN15ESO_AngularRateD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ESO_AngularRate::~ESO_AngularRate__deallocating() &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[51f]"></a>Filter_Butter_LP::run(double)</STRONG> (Thumb, 1496 bytes, Stack size 40 bytes, ms_attitude.o(.text._ZN16Filter_Butter_LP3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Filter_Butter_LP::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::run(double, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double, bool)
</UL>

<P><STRONG><a name="[614]"></a>M14_HorizonCalib::M14_HorizonCalib()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m14_horizoncalib.o(.text._ZN16M14_HorizonCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M14_HorizonCalib::M14_HorizonCalib() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[699]"></a>M14_HorizonCalib::M14_HorizonCalib__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m14_horizoncalib.o(.text._ZN16M14_HorizonCalibC2Ev), UNUSED)

<P><STRONG><a name="[3d7]"></a>parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, parameters.o(.text._ZN18parametersIterator4readEP5SNamePjP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[3dc]"></a>parametersIterator::isEnd()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, parameters.o(.text._ZN18parametersIterator5isEndEv))
<BR><BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[52e]"></a>parametersIterator::~parametersIterator()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parameters.o(.text._ZN18parametersIteratorD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = parametersIterator::~parametersIterator() &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor
</UL>

<P><STRONG><a name="[69a]"></a>parametersIterator::~parametersIterator__sub_object()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, parameters.o(.text._ZN18parametersIteratorD2Ev), UNUSED)

<P><STRONG><a name="[134]"></a>ESO_AngularRateHeli::run(double, bool)</STRONG> (Thumb, 1344 bytes, Stack size 56 bytes, ms_attitude.o(.text._ZN19ESO_AngularRateHeli3runEdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ESO_AngularRateHeli::run(double, bool) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::run(double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[633]"></a>ESO_AngularRateHeli::init_ft()</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, ms_attitude.o(.text._ZN19ESO_AngularRateHeli7init_ftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRateHeli::init_ft() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_Init()
</UL>

<P><STRONG><a name="[12f]"></a>ESO_AngularRateHeli::~ESO_AngularRateHeli__deallocating()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN19ESO_AngularRateHeliD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ESO_AngularRateHeli::~ESO_AngularRateHeli__deallocating() &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[12e]"></a>ESO_AngularRate_Base::~ESO_AngularRate_Base__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN20ESO_AngularRate_BaseD2Ev))
<BR>[Address Reference Count : 2]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
<LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[62c]"></a>TIME::get_pass_time_st()</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, sensors.o(.text._ZN4TIME16get_pass_time_stEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIME::get_pass_time_st() &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
</UL>

<P><STRONG><a name="[518]"></a>TIME::get_System_Run_Time()</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, m32_posctrl.o(.text._ZN4TIME19get_System_Run_TimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[415]"></a>SName::operator+(SName const&)</STRONG> (Thumb, 538 bytes, Stack size 0 bytes, sensors.o(.text._ZN5SNameplERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
</UL>

<P><STRONG><a name="[33e]"></a>TD4_SL::track3(double, double, double, double, double)</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, ctrl_position.o(.text._ZN6TD4_SL6track3Eddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TD4_SL::track3(double, double, double, double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[32f]"></a>TD4_SL::track4(double, double)</STRONG> (Thumb, 510 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._ZN6TD4_SL6track4Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TD4_SL::track4(double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[12c]"></a>Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, m10_rccalib.o(.text._ZN9Mode_Base15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mode_Base::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)
</UL>
<BR>[Address Reference Count : 8]<UL><LI> m35_auto1.o(.rodata._ZTV9M35_Auto1)
<LI> m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
<LI> m10_rccalib.o(.rodata._ZTV9Mode_Base)
<LI> m11_tempcalib.o(.rodata._ZTV13M11_TempCalib)
<LI> m12_acccalib.o(.rodata._ZTV12M12_AccCalib)
<LI> m30_attctrl.o(.rodata._ZTV11M30_AttCtrl)
<LI> m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
<LI> m14_horizoncalib.o(.rodata._ZTV16M14_HorizonCalib)
</UL>
<P><STRONG><a name="[17f]"></a>RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI10QuaternionED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object() &rArr; operator delete[](void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
</UL>
<P><STRONG><a name="[9d]"></a>RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI7vector3IdEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object() &rArr; operator delete[](void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp)
<LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
<LI> ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp)
</UL>
<P><STRONG><a name="[432]"></a>Quaternion::get_RP_quat(double*) const</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, sensors.o(.text._ZNK10Quaternion11get_RP_quatEPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Quaternion::get_RP_quat(double*) const &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
</UL>

<P><STRONG><a name="[21c]"></a>ESO_AngularRate::get_LearnKs() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate11get_LearnKsEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[21f]"></a>ESO_AngularRate::get_EsDisturbance() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate17get_EsDisturbanceEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[221]"></a>ESO_AngularRate::get_EsDisturbanceZ() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate18get_EsDisturbanceZEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[224]"></a>ESO_AngularRate::get_EsDisturbanceLearnF() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate23get_EsDisturbanceLearnFEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[226]"></a>ESO_AngularRate::get_EsAngularAcceleration() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate25get_EsAngularAccelerationEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[216]"></a>ESO_AngularRate::get_T() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate5get_TEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[218]"></a>ESO_AngularRate::get_u() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate5get_uEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[136]"></a>ESO_AngularRateHeli::get_LearnKs() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli11get_LearnKsEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[135]"></a>ESO_AngularRateHeli::get_ftFreqs() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli11get_ftFreqsEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[141]"></a>ESO_AngularRateHeli::get_EsMainPower() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli15get_EsMainPowerEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[138]"></a>ESO_AngularRateHeli::get_EsAngularRate() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli17get_EsAngularRateEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13a]"></a>ESO_AngularRateHeli::get_EsDisturbanceFilted() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli23get_EsDisturbanceFiltedEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13e]"></a>ESO_AngularRateHeli::get_EsDisturbanceLearnF() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli23get_EsDisturbanceLearnFEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13c]"></a>ESO_AngularRateHeli::get_EsDisturbanceZFilted() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli24get_EsDisturbanceZFiltedEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[131]"></a>ESO_AngularRateHeli::get_b() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_bEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[510]"></a>TIME::get_pass_time() const</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, m32_posctrl.o(.text._ZNK4TIME13get_pass_timeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIME::get_pass_time() const &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3df]"></a>SName::operator!=(SName const&) const</STRONG> (Thumb, 200 bytes, Stack size 0 bytes, parameters.o(.text._ZNK5SNameneERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
</UL>

<P><STRONG><a name="[505]"></a>void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__227__tree_balance_after_insertB8nn190000IPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
</UL>

<P><STRONG><a name="[9f]"></a>std::__2::map&lang;SName, ParamGroup*, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ParamGroup*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__23mapI5SNameP10ParamGroupNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S3_EEEEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::map&lang;SName, ParamGroup*, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ParamGroup*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
</UL>
<P><STRONG><a name="[64b]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__26__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE7destroyEPNS_11__tree_nodeIS5_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::map&lang;SName, ParamGroup*, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ParamGroup*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[528]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_can.o(.text._ZNSt3__26__treeINS_12__value_typeIjP10CanMailBoxEENS_19__map_value_compareIjS4_NS_4lessIjEELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::map&lang;unsigned int, CanMailBox*, std::__2::less&lang;unsigned int&rang;, std::__2::allocator&lang;std::__2::pair&lang;unsigned int const, CanMailBox*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[64c]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, commulink.o(.text._ZNSt3__26__treeINS_12__value_typeIt8PosSDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor.2
</UL>

<P><STRONG><a name="[397]"></a>operator delete[](void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete[](void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;vector3&lang;double&rang;&rang;::~RingQueue__sub_object()
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;vector2&lang;double&rang;&rang;::~RingQueue__sub_object()
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RingQueue&lang;Quaternion&rang;::~RingQueue__sub_object()
</UL>

<P><STRONG><a name="[2d7]"></a>operator new[](unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._Znaj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new[](unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Position.cpp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
</UL>

<P><STRONG><a name="[26f]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[267]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(.text._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__assert_puts
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[620]"></a>cdc_write</STRONG> (Thumb, 350 bytes, Stack size 32 bytes, usb_composite.o(.text.cdc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[147]"></a>cdcd_control_complete</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_control_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cdcd_control_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[145]"></a>cdcd_open</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, usb_composite.o(.text.cdcd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = cdcd_open &rArr; _prep_out_transaction &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[148]"></a>cdcd_xfer_cb</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, usb_composite.o(.text.cdcd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = cdcd_xfer_cb &rArr; cdc_write &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[665]"></a>dcd_connect</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_composite.o(.text.dcd_connect))
<BR><BR>[Called By]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[64d]"></a>dcd_edpt_open</STRONG> (Thumb, 552 bytes, Stack size 20 bytes, usb_composite.o(.text.dcd_edpt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = dcd_edpt_open
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[65f]"></a>dcd_edpt_stall</STRONG> (Thumb, 332 bytes, Stack size 0 bytes, usb_composite.o(.text.dcd_edpt_stall))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[532]"></a>dcd_edpt_xfer</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, usb_composite.o(.text.dcd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_open
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_control_request
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
</UL>

<P><STRONG><a name="[53b]"></a>disk_read</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[549]"></a>disk_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[3fc]"></a>f_closedir</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, ff.o(.text.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = f_closedir &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3fb]"></a>f_findfirst</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ff.o(.text.f_findfirst))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = f_findfirst &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[642]"></a>f_getfree</STRONG> (Thumb, 760 bytes, Stack size 104 bytes, ff.o(.text.f_getfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = f_getfree &rArr; mount_volume &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
</UL>

<P><STRONG><a name="[636]"></a>f_gets</STRONG> (Thumb, 518 bytes, Stack size 64 bytes, ff.o(.text.f_gets))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = f_gets &rArr; f_read &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
</UL>

<P><STRONG><a name="[4ee]"></a>f_mkdir</STRONG> (Thumb, 570 bytes, Stack size 176 bytes, ff.o(.text.f_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3f4]"></a>f_mount</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = f_mount &rArr; mount_volume &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[3fe]"></a>f_open</STRONG> (Thumb, 992 bytes, Stack size 136 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[405]"></a>f_read</STRONG> (Thumb, 878 bytes, Stack size 64 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = f_read &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4f1]"></a>f_readdir</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = f_readdir &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4f2]"></a>f_rename</STRONG> (Thumb, 856 bytes, Stack size 288 bytes, ff.o(.text.f_rename))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3ff]"></a>f_unlink</STRONG> (Thumb, 432 bytes, Stack size 256 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[4ef]"></a>f_write</STRONG> (Thumb, 1002 bytes, Stack size 64 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_write &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
</UL>

<P><STRONG><a name="[654]"></a>ff_cre_syncobj</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_cre_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ff_cre_syncobj &rArr; osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[653]"></a>ff_del_syncobj</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_del_syncobj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ff_del_syncobj &rArr; osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[543]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memalloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[546]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ff_memfree &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
</UL>

<P><STRONG><a name="[547]"></a>ff_rel_grant</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ffsystem.o(.text.ff_rel_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ff_rel_grant &rArr; osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[3e7]"></a>getCPULoad</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cpu_load.o(.text.getCPULoad))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[416]"></a>getFlashSectorCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorCount))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[280]"></a>getFlashSectorSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashSectorSize))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[45a]"></a>lfs_dir_open</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, lfs.o(.text.lfs_dir_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = lfs_dir_open &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
</UL>

<P><STRONG><a name="[45b]"></a>lfs_dir_read</STRONG> (Thumb, 328 bytes, Stack size 64 bytes, lfs.o(.text.lfs_dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lfs_dir_read &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
</UL>

<P><STRONG><a name="[625]"></a>lfs_file_open</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, lfs.o(.text.lfs_file_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
</UL>

<P><STRONG><a name="[627]"></a>lfs_file_read</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lfs.o(.text.lfs_file_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = lfs_file_read &rArr; lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
</UL>

<P><STRONG><a name="[626]"></a>lfs_file_seek</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, lfs.o(.text.lfs_file_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lfs_file_seek &rArr; lfs_file_flush &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
</UL>

<P><STRONG><a name="[62a]"></a>lfs_file_truncate</STRONG> (Thumb, 648 bytes, Stack size 72 bytes, lfs.o(.text.lfs_file_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = lfs_file_truncate &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
</UL>

<P><STRONG><a name="[41a]"></a>lfs_mkdir</STRONG> (Thumb, 400 bytes, Stack size 216 bytes, lfs.o(.text.lfs_mkdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240 + Unknown Stack Size
<LI>Call Chain = lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
</UL>

<P><STRONG><a name="[417]"></a>lfs_mount</STRONG> (Thumb, 520 bytes, Stack size 128 bytes, lfs.o(.text.lfs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = lfs_mount &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[63e]"></a>mavlink_init_chan</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mavlink.o(.text.mavlink_init_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mavlink_init_chan &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
</UL>

<P><STRONG><a name="[3a8]"></a>mavlink_lock_chan</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mavlink.o(.text.mavlink_lock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = mavlink_lock_chan &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3af]"></a>mavlink_unlock_chan</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, mavlink.o(.text.mavlink_unlock_chan))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mavlink_unlock_chan &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[14d]"></a>mscd_control_complete</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_composite.o(.text.mscd_control_complete))
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14c]"></a>mscd_control_request</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, usb_composite.o(.text.mscd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mscd_control_request &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[149]"></a>mscd_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_composite.o(.text.mscd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mscd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14b]"></a>mscd_open</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, usb_composite.o(.text.mscd_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = mscd_open &rArr; dcd_edpt_open
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[14e]"></a>mscd_xfer_cb</STRONG> (Thumb, 1188 bytes, Stack size 56 bytes, usb_composite.o(.text.mscd_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = mscd_xfer_cb &rArr; proc_builtin_scsi &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscDiskWritten
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[2cb]"></a>osKernelSysTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(.text.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2ca]"></a>osMessageGet</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, cmsis_os.o(.text.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessageGet &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[276]"></a>osMessagePut</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadCpltCallback
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteCpltCallback
</UL>

<P><STRONG><a name="[656]"></a>osMutexDelete</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmsis_os.o(.text.osMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMutexDelete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[65e]"></a>proc_builtin_scsi</STRONG> (Thumb, 438 bytes, Stack size 72 bytes, usb_composite.o(.text.proc_builtin_scsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = proc_builtin_scsi &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Complete
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardInfo
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_start_stop_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[52c]"></a>pvPortMalloc</STRONG> (Thumb, 498 bytes, Stack size 16 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[66f]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[403]"></a>sha256_init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, sha256.o(.text.sha256_init))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[593]"></a>sha256_transform</STRONG> (Thumb, 598 bytes, Stack size 344 bytes, sha256.o(.text.sha256_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
</UL>

<P><STRONG><a name="[664]"></a>tud_init</STRONG> (Thumb, 462 bytes, Stack size 24 bytes, usb_composite.o(.text.tud_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = tud_init &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_connect
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
</UL>

<P><STRONG><a name="[662]"></a>tud_msc_is_writable_cb</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_msc_is_writable_cb))
<BR><BR>[Called By]<UL><LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_write10_cmd
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[663]"></a>tud_msc_start_stop_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usb_composite.o(.text.tud_msc_start_stop_cb))
<BR><BR>[Called By]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_builtin_scsi
</UL>

<P><STRONG><a name="[63a]"></a>tud_task</STRONG> (Thumb, 4032 bytes, Stack size 80 bytes, usb_composite.o(.text.tud_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tud_task &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_suspend_cb
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_task(void*)
</UL>

<P><STRONG><a name="[639]"></a>tusb_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usb_composite.o(.text.tusb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = tusb_init &rArr; tud_init &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_device_task(void*)
</UL>

<P><STRONG><a name="[2f5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[2c0]"></a>usb_handler</STRONG> (Thumb, 2352 bytes, Stack size 72 bytes, usb_composite.o(.text.usb_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = usb_handler &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[667]"></a>usbd_control_xfer_cb</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, usb_composite.o(.text.usbd_control_xfer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = usbd_control_xfer_cb &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
</UL>

<P><STRONG><a name="[530]"></a>usbd_edpt_xfer</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usb_composite.o(.text.usbd_edpt_xfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usbd_edpt_xfer &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
</UL>

<P><STRONG><a name="[58c]"></a>uxListRemove</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, list.o(.text.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>

<P><STRONG><a name="[59e]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, static_mem.o(.text.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[5ae]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, static_mem.o(.text.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[671]"></a>vApplicationTickHook</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, cpu_load.o(.text.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[99]"></a>vEventGroupSetBitsCallback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, event_groups.o(.text.vEventGroupSetBitsCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vEventGroupSetBitsCallback &rArr; xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 7]<UL><LI> drv_flash.o(.text.QUADSPI_IRQHandler)
<LI> drv_intiic.o(.text.I2C2_EV_IRQHandler)
<LI> drv_intiic.o(.text.I2C2_ER_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_EV_IRQHandler)
<LI> drv_extiic.o(.text.I2C1_ER_IRQHandler)
<LI> drv_crc.o(.text.DMA2_Stream5_IRQHandler)
<LI> drv_can.o(.text.HAL_FDCAN_TxBufferCompleteCallback)
</UL>
<P><STRONG><a name="[588]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[599]"></a>vListInsertEnd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>

<P><STRONG><a name="[3c4]"></a>vPortEnterCritical</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>

<P><STRONG><a name="[2b1]"></a>vTaskDelay</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IntIIC()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CRC()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtLed_Server(void*)
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBarometer_Server(void*)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[49c]"></a>vTaskDelayUntil</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[591]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[668]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[5ab]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[60d]"></a>vTaskSwitchContext</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnterIdleTask
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExitIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[27d]"></a>xEventGroupWaitBits</STRONG> (Thumb, 342 bytes, Stack size 32 bytes, event_groups.o(.text.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPages
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned int, double, double)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart8(double)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart7(double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned int, double, double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned int, double, double)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart5(double)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned int, double, double)
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart3(double)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitSent_Uart1(double)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned int, double, double)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[5a1]"></a>xPortStartScheduler</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[582]"></a>xQueueCreateMutexStatic</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutexStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[2e6]"></a>xQueueGenericCreate</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Modes.cpp
</UL>

<P><STRONG><a name="[580]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_init
</UL>

<P><STRONG><a name="[497]"></a>xQueueGenericReset</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[584]"></a>xQueueGiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[285]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, queue.o(.text.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_RTC
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(unsigned char const*, unsigned short, double, double)
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart8()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned int, double, double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(unsigned char const*, unsigned short, double, double)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart7()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned int, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(unsigned char const*, unsigned short, double, double)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart5()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned int, double, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(unsigned char const*, unsigned short, double, double)
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart3()
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned int, double, double)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(unsigned char const*, unsigned short, double, double)
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_Uart1()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned int, double, double)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Unlock_USBD_VCOM()
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvTarget(unsigned char, AvoidanceTarget*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhotoAsync(double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
</UL>

<P><STRONG><a name="[399]"></a>xQueueReceive</STRONG> (Thumb, 586 bytes, Stack size 48 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPDaemonTask(void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[2d9]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 666 bytes, Stack size 48 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInavailable_followSensor(unsigned int, double)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorYaw(double, bool, double)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_precLandSensor(precLandSensor*, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(char const*, unsigned short, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PositionSensorIncreaseSlamAngle(unsigned char, double const&, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorResetAngleOffset(unsigned char, unsigned int, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryRegister(unsigned char, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGyroOffsetEst(unsigned char, double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryInfo(unsigned char, BatteryInfo*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltFilted(float*, signed char*, double)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPosSensorMsg(unsigned char, unsigned char, double)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRaw(float*, signed char*, double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[320]"></a>xStreamBufferGenericCreate</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, stream_buffer.o(.text.xStreamBufferGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xStreamBufferGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[2cf]"></a>xStreamBufferSendFromISR</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stream_buffer.o(.text.xStreamBufferSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xStreamBufferSendFromISR &rArr; prvWriteMessageToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[434]"></a>xStreamBufferSpacesAvailable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stream_buffer.o(.text.xStreamBufferSpacesAvailable))
<BR><BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart8_TxSpacesAvailable()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart7_TxSpacesAvailable()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart5_TxSpacesAvailable()
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_TxSpacesAvailable()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_TxSpacesAvailable()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBD_TxSpacesAvailable()
</UL>

<P><STRONG><a name="[2e7]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TFMini_DriverRun()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRLock_DriverRun()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TFMiniAv_DriverRun()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtLed_TCA62724FMG_DriverRun()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtBarometer_DriverRun()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ExtMag_DriverRun()
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_InternalMag_DriverRun()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_DriverRun()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_DriverRun()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_DriverRun()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_DriverInit(Port, unsigned int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCMInput_DriverInit(Port, unsigned int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DriverInit(Port, unsigned int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_DriverInit(Port, unsigned int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_DriverInit(Port, unsigned int)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_DriverInit(Port, unsigned int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_DriverInit(Port, unsigned int)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UWB_LinkTrack_DriverInit(Port, unsigned int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_DriverInit(Port, unsigned int)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_DriverInit(Port, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_DriverInit(Port, unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_GL9306_DriverInit(Port, unsigned int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC306_DriverInit(Port, unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC302_DriverInit(Port, unsigned int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_JL32xx_DriverInit(Port, unsigned int)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_DriverInit(Port, unsigned int)
</UL>

<P><STRONG><a name="[42f]"></a>xTaskGenericNotify</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
</UL>

<P><STRONG><a name="[670]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, tasks.o(.text.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotifyFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[49b]"></a>xTaskGetTickCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[660]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskGetTickCountFromISR
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[60f]"></a>xTaskIncrementTick</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[5a9]"></a>xTaskNotifyWait</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, tasks.o(.text.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[590]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[58b]"></a>xTaskResumeAll</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[277]"></a>xTimerPendFunctionCallFromISR</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, timers.o(.text.xTimerPendFunctionCallFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QUADSPI_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART8_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[672]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[5af]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
</UL>

<P><STRONG><a name="[5b1]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[25a]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5f0]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[25d]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[676]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[3d0]"></a>__hardfp_asin</STRONG> (Thumb, 432 bytes, Stack size 72 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[674]"></a>__hardfp_atan</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[2ed]"></a>__hardfp_atan2</STRONG> (Thumb, 392 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat(double*) const
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector3&lang;double&rang;)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector2&lang;double&rang;)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[634]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[637]"></a>__hardfp_atof</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
</UL>

<P><STRONG><a name="[3a3]"></a>__hardfp_cos</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::run(double, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double, bool)
</UL>

<P><STRONG><a name="[414]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::init_ft()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_ft()
</UL>

<P><STRONG><a name="[4a5]"></a>__hardfp_nan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, nan.o(i.__hardfp_nan))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[413]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::init_ft()
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init_ft()
</UL>

<P><STRONG><a name="[2e9]"></a>__hardfp_sqrt</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double, bool)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[5c1]"></a>__kernel_cos</STRONG> (Thumb, 182 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __kernel_cos
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5b8]"></a>__kernel_poly</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5c2]"></a>__kernel_sin</STRONG> (Thumb, 144 bytes, Stack size 56 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __kernel_sin &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5c3]"></a>__kernel_tan</STRONG> (Thumb, 434 bytes, Stack size 96 bytes, tan_i.o(i.__kernel_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_tan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>

<P><STRONG><a name="[5bd]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>

<P><STRONG><a name="[5b6]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5ba]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[67b]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[677]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[5f4]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[679]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[5f8]"></a>__support_ldexp</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[5d8]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[675]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[5be]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[5b5]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[98]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[67c]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[287]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_precLandSensor(precLandSensor*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time_st()
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMotorTest(unsigned int, double, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_PreArmControl(Receiver)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_PreArmControl(Receiver)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_PreArmControl(Receiver)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[69b]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[67f]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
</UL>

<P><STRONG><a name="[610]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[69c]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[69d]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[69e]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[5ef]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[4b0]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[67e]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3ab]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMotorTest(unsigned int, double, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[680]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[5c6]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[67d]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[5bf]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[5e1]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[5f3]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[5f2]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[681]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22c]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[69f]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6a0]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[6a1]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[6a2]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[22d]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[6a3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[6a4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[23d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[22e]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[230]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6a5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[6a6]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[6a7]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[232]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[6a8]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[6a9]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[6aa]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[234]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[6ab]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6ac]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[235]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[6ad]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[6ae]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[6af]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6b0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[237]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[6b1]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[6b2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[6b3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[6b4]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[6b5]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[6b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[6b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[6b8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[6b9]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[5d5]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[238]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[6ba]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[6bb]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[6bc]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[6bd]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[6be]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[6bf]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[6c0]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[22b]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[6c1]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[23c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[6c2]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[23e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[6c3]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[54a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>

<P><STRONG><a name="[6c4]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>__2snprintf</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[249]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[24a]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[243]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[247]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[24b]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
</UL>

<P><STRONG><a name="[4ed]"></a>strncat</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[565]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
</UL>

<P><STRONG><a name="[45c]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[596]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>

<P><STRONG><a name="[3f5]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[282]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_Server(void*)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg233_GPS_RTCM_DATA(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_control_xfer_cb
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_control_request
<LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove (via Veneer)
</UL>

<P><STRONG><a name="[24d]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[6c5]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w (via Veneer)
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[307]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_DeInit()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[6c6]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[6c7]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__aeabi_memset4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[6c8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_memset4.o(.text), UNUSED)

<P><STRONG><a name="[4b1]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[6c9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[252]"></a>mktime</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mktime &rArr; _tm_carry
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime2Unix
</UL>

<P><STRONG><a name="[6ca]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6cb]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6cc]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[6cd]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[6ce]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[6cf]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[6d0]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[254]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __read_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[256]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[246]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[25c]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[16d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __2snprintf.o(.text)
</UL>
<P><STRONG><a name="[25f]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[261]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[262]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[263]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[266]"></a>__assert_puts</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, assert_puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __assert_puts
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[264]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c32rtomb
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[265]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[269]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[26d]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[6d1]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6d2]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[268]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[240]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26b]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[26a]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[5f7]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[6d3]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[682]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[271]"></a>BSP_SD_GetCardState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_GetCardState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_SD_GetCardState &rArr; HAL_SD_GetCardState
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_status
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[273]"></a>BSP_SD_ReadBlocks_DMA</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_driver_sd.o(.text.BSP_SD_ReadBlocks_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_SD_ReadBlocks_DMA &rArr; HAL_SD_ReadBlocks_DMA &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[275]"></a>BSP_SD_ReadCpltCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sd_diskio.o(.text.BSP_SD_ReadCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_RxCpltCallback
</UL>

<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, drv_uart3.o(.text.DMA2_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_uart7.o(.text.DMA2_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_crc.o(.text.DMA2_Stream5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DMA2_Stream5_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66a]"></a>EnterIdleTask</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, cpu_load.o(.text.EnterIdleTask))
<BR><BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[669]"></a>ExitIdleTask</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, cpu_load.o(.text.ExitIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ExitIdleTask
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[40e]"></a>FATFS_UnLinkDriver</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ff_gen_drv.o(.text.FATFS_UnLinkDriver))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_can.o(.text.FDCAN1_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FDCAN1_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[279]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, stm32h7xx_hal_flash.o(.text.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[27b]"></a>FlashEraseSectors</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, drv_flash.o(.text.FlashEraseSectors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FlashEraseSectors &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_erase
</UL>

<P><STRONG><a name="[27e]"></a>FlashProgramPages</STRONG> (Thumb, 512 bytes, Stack size 56 bytes, drv_flash.o(.text.FlashProgramPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FlashProgramPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
</UL>

<P><STRONG><a name="[27f]"></a>FlashReadPages</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, drv_flash.o(.text.FlashReadPages))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FlashReadPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
</UL>

<P><STRONG><a name="[d4]"></a>Flash_write</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, flash_diskio.o(.text.Flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Flash_write &rArr; FlashProgramPages &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> internalstorage.o(.text._Z20init_InternalStoragev)
</UL>
<P><STRONG><a name="[48d]"></a>GetTimeZone</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, timebase.o(.text.GetTimeZone))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[283]"></a>Get_RTC_Time</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, timebase.o(.text.Get_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Get_RTC_Time &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[4ec]"></a>Get_SD_Init_Success</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sdstorage.o(.text.Get_SD_Init_Success))
<BR><BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[286]"></a>HAL_Delay</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, timebase.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_Delay &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
</UL>

<P><STRONG><a name="[31a]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[319]"></a>HAL_FDCAN_ConfigFifoWatermark</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFifoWatermark))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[318]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[28e]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[278]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 896 bytes, Stack size 56 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_StopWatchCallback
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxBufferNewMessageCallback
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_GlobalTimeCallback
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_TimeMarkCallback
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_ScheduleSyncCallback
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ClockCalibrationCallback
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT1_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[299]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 1024 bytes, Stack size 48 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[29b]"></a>HAL_FDCAN_MspDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, drv_can.o(.text.HAL_FDCAN_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FDCAN_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_DeInit
</UL>

<P><STRONG><a name="[28c]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, drv_can.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*) &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*)
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[31b]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
</UL>

<P><STRONG><a name="[292]"></a>HAL_FDCAN_TT_GlobalTimeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_GlobalTimeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[291]"></a>HAL_FDCAN_TT_TimeMarkCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_TimeMarkCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[28a]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[294]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, drv_can.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FDCAN_TxBufferCompleteCallback &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[28b]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[293]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[29f]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, stm32h7xx_hal_flash_ex.o(.text.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[29c]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspDeInit
</UL>

<P><STRONG><a name="[2be]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[350]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[2a0]"></a>HAL_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_Init &rArr; HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[2a2]"></a>HAL_InitTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timebase.o(.text.HAL_InitTick))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[2e3]"></a>HAL_MPU_Disable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2e5]"></a>HAL_MPU_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[2a3]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[29d]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspDeInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspDeInit
</UL>

<P><STRONG><a name="[2a4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_MspInit
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[2e1]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[354]"></a>HAL_PWREx_EnableUSBVoltageDetector</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32h7xx_hal_pwr_ex.o(.text.HAL_PWREx_EnableUSBVoltageDetector))
<BR><BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
</UL>

<P><STRONG><a name="[2a1]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[606]"></a>HAL_SDEx_Read_DMADoubleBuf0CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf0CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[605]"></a>HAL_SDEx_Read_DMADoubleBuf1CpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SDEx_Read_DMADoubleBuf1CpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2a5]"></a>HAL_SD_ConfigWideBusOperation</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ConfigWideBusOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SD_ConfigWideBusOperation &rArr; SD_FindSCR &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[603]"></a>HAL_SD_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[2b7]"></a>HAL_SD_GetCardCSD</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SD_GetCardCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_SD_GetCardStatus</STRONG> (Thumb, 410 bytes, Stack size 112 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_GetCardStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SD_GetCardStatus &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2b0]"></a>HAL_SD_InitCard</STRONG> (Thumb, 512 bytes, Stack size 80 bytes, stm32h7xx_hal_sd.o(.text.HAL_SD_InitCard))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_SD_InitCard &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardCSD
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSetRelAdd
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCSD
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendCID
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppOperCommand
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdOperCond
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdGoIdleState
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetResponse
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetPowerState
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_PowerState_ON
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2bc]"></a>HAL_SD_MspDeInit</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_SD_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_SD_MspInit</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, stm32h7xx_hal_msp.o(.text.HAL_SD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_SD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, drv_extiic.o(.text.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C1_ER_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, drv_intiic.o(.text.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C2_EV_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_usb.o(.text.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = OTG_FS_IRQHandler &rArr; usb_handler &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, drv_flash.o(.text.QUADSPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = QUADSPI_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_sdmmc.o(.text.SDMMC1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SDMMC1_IRQHandler &rArr; HAL_SD_IRQHandler &rArr; HAL_SD_RxCpltCallback &rArr; BSP_SD_ReadCpltCallback &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a8]"></a>SDMMC_CmdAppCommand</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppCommand))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2b5]"></a>SDMMC_CmdAppOperCommand</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdAppOperCommand))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2ac]"></a>SDMMC_CmdBlockLength</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdBlockLength))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2b4]"></a>SDMMC_CmdOperCond</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdOperCond))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2c5]"></a>SDMMC_CmdReadMultiBlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdReadMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
</UL>

<P><STRONG><a name="[2b8]"></a>SDMMC_CmdSendCID</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCID))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2ba]"></a>SDMMC_CmdSendCSD</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendCSD))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2c6]"></a>SDMMC_CmdSendStatus</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdSendStatus))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[2ae]"></a>SDMMC_CmdStatusRegister</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStatusRegister))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
</UL>

<P><STRONG><a name="[2c7]"></a>SDMMC_CmdStopTransfer</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdStopTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_CmdStopTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[2c8]"></a>SDMMC_CmdWriteMultiBlock</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_CmdWriteMultiBlock))
<BR><BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_GetCmdResp1
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
</UL>

<P><STRONG><a name="[2ad]"></a>SDMMC_ConfigData</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SDMMC_ConfigData
</UL>
<BR>[Called By]<UL><LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_WriteBlocks_DMA
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ReadBlocks_DMA
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_FindSCR
</UL>

<P><STRONG><a name="[2b6]"></a>SDMMC_GetPowerState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetPowerState))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
</UL>

<P><STRONG><a name="[2a6]"></a>SDMMC_GetResponse</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardState
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_GetCardStatus
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_InitCard
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_Init
</UL>

<P><STRONG><a name="[600]"></a>SDMMC_PowerState_OFF</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_PowerState_OFF))
<BR><BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_DeInit
</UL>

<P><STRONG><a name="[601]"></a>SDMMC_WriteFIFO</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_WriteFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>SD_read</STRONG> (Thumb, 584 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_read &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_ReadBlocks_DMA
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[1fa]"></a>SD_status</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sd_diskio.o(.text.SD_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_status &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[1fc]"></a>SD_write</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, sd_diskio.o(.text.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_write &rArr; Lock_SD &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_GetCardState
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_WriteBlocks_DMA
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.rodata.SD_Driver)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2ce]"></a>Set_RTC_Time</STRONG> (Thumb, 424 bytes, Stack size 40 bytes, timebase.o(.text.Set_RTC_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Set_RTC_Time &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd12_MAV_CMD_SET_RTC(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timebase.o(.text.TIM5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, drv_uart7.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART7_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17b]"></a>USART2_IRQHandlerTCB</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, drv_rcsbus.o(.text.USART2_IRQHandlerTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandlerTCB &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rcsbus.o(.text.USART2_IRQHandler)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, drv_uart3.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART3_IRQHandler &rArr; xTimerPendFunctionCallFromISR &rArr; xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d2]"></a>USB_DevDisconnect</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32h7xx_ll_usb.o(.text.USB_DevDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USB_DevDisconnect &rArr; HAL_Delay &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
</UL>

<P><STRONG><a name="[48e]"></a>UTC2LocalTime</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, timebase.o(.text.UTC2LocalTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UTC2LocalTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[2d3]"></a>UnLock_RTC</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timebase.o(.text.UnLock_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnLock_RTC &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[b2]"></a>Lock_Uart1(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart1.o(.text._Z10Lock_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_Uart1(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[bb]"></a>Lock_Uart5(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart5.o(.text._Z10Lock_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_Uart5(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[194]"></a>Lock_Uart8(double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_uart8.o(.text._Z10Lock_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Lock_Uart8(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[423]"></a>MS_get_WGA(unsigned int*)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z10MS_get_WGAPj))
<BR><BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[18e]"></a>Read_Uart3(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_uart3.o(.text._Z10Read_Uart3Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Uart3(unsigned char*, unsigned short, double, double) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[c4]"></a>Read_Uart7(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, drv_uart7.o(.text._Z10Read_Uart7Phtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Read_Uart7(unsigned char*, unsigned short, double, double) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[2dc]"></a>SDLog_Txt1(char const*, unsigned short, double)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdstorage.o(.text._Z10SDLog_Txt1PKctd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDLog_Txt1(char const*, unsigned short, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[2df]"></a>UnlockCtrl()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ctrl_main.o(.text._Z10UnlockCtrlv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UnlockCtrl() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMotorTest(unsigned int, double, double)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EsAngularRate(vector3&lang;double&rang;*, double)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es_AccZ(double*, double)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OutputThrottle(double*, double)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeOptSensorZ(double*, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_PositionErr(vector3&lang;double&rang;*, double, double)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TurnRaius(double, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccZ_OffBoard(double, double, double)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLockFast(double, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackVel(double*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[2e0]"></a>init_Basic()</STRONG> (Thumb, 420 bytes, Stack size 72 bytes, basic.o(.text._Z10init_Basicv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40a]"></a>setLedMode(LEDMode)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z10setLedMode7LEDMode))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[2e8]"></a>MS_Attitude(unsigned char, IMU_Sensor)</STRONG> (Thumb, 22808 bytes, Stack size 976 bytes, ms_attitude.o(.text._Z11MS_Attitudeh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920 + Unknown Stack Size
<LI>Call Chain = MS_Attitude(unsigned char, IMU_Sensor) &rArr; IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLPDaemonTaskCall(void (*)(void*, unsigned int), void*, unsigned int, unsigned int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[2f7]"></a>MS_Position(unsigned char, IMU_Sensor)</STRONG> (Thumb, 25660 bytes, Stack size 688 bytes, ms_position.o(.text._Z11MS_Positionh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = MS_Position(unsigned char, IMU_Sensor) &rArr; PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[300]"></a>ReadMission(unsigned short, MissionInf*, double)</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, missions.o(.text._Z11ReadMissiontP10MissionInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = ReadMission(unsigned short, MissionInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[b5]"></a>Write_Uart1(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z11Write_Uart1PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Write_Uart1(unsigned char const*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[c5]"></a>Write_Uart7(unsigned char const*, unsigned short, double, double)</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, drv_uart7.o(.text._Z11Write_Uart7PKhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Write_Uart7(unsigned char const*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[302]"></a>clearFences(double)</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, fences.o(.text._Z11clearFencesd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648 + Unknown Stack Size
<LI>Call Chain = clearFences(double) &rArr; TruncateVolatileParamGroup(SName, unsigned short, double) &rArr; InternalStorage_TruncateFile(char const*, char const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[304]"></a>enter_MSafe(bool, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z11enter_MSafebd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = enter_MSafe(bool, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[305]"></a>getJoyStick(Receiver*, SName*, double)</STRONG> (Thumb, 1228 bytes, Stack size 72 bytes, receiver.o(.text._Z11getJoyStickP8ReceiverP5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = getJoyStick(Receiver*, SName*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
</UL>

<P><STRONG><a name="[308]"></a>getReceiver(Receiver*, SName*, double)</STRONG> (Thumb, 1160 bytes, Stack size 80 bytes, receiver.o(.text._Z11getReceiverP8ReceiverP5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = getReceiver(Receiver*, SName*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[309]"></a>get_es_AccZ(double*, double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z11get_es_AccZPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_es_AccZ(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[30b]"></a>init_Fences()</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, fences.o(.text._Z11init_Fencesv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344 + Unknown Stack Size
<LI>Call Chain = init_Fences() &rArr; VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[30e]"></a>smooth_kp_2(double, double, double, double, double)</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z11smooth_kp_2ddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = smooth_kp_2(double, double, double, double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[310]"></a>GetGyroscope(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, sensors.o(.text._Z12GetGyroscopehP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetGyroscope(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeSaveBodyOffset(unsigned char, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[b1]"></a>Unlock_Uart1()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart1.o(.text._Z12Unlock_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart1() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[ba]"></a>Unlock_Uart5()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart5.o(.text._Z12Unlock_Uart5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart5() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[193]"></a>Unlock_Uart8()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_uart8.o(.text._Z12Unlock_Uart8v))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Unlock_Uart8() &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[311]"></a>getHomePoint(vector2&lang;double&rang;*, double*, double)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z12getHomePointP7vector2IdEPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getHomePoint(vector2&lang;double&rang;*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[312]"></a>init_Sensors()</STRONG> (Thumb, 1200 bytes, Stack size 1568 bytes, sensors.o(.text._Z12init_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2848 + Unknown Stack Size
<LI>Call Chain = init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[314]"></a>init_drv_CRC()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, drv_crc.o(.text._Z12init_drv_CRCv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = init_drv_CRC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[315]"></a>init_drv_Can()</STRONG> (Thumb, 1480 bytes, Stack size 136 bytes, drv_can.o(.text._Z12init_drv_Canv))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = init_drv_Can() &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFifoWatermark
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_DeInit
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[31c]"></a>init_drv_RTK()</STRONG> (Thumb, 100 bytes, Stack size 112 bytes, drv_rtk.o(.text._Z12init_drv_RTKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392 + Unknown Stack Size
<LI>Call Chain = init_drv_RTK() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[31e]"></a>init_drv_USB()</STRONG> (Thumb, 344 bytes, Stack size 80 bytes, drv_usb.o(.text._Z12init_drv_USBv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = init_drv_USB() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DevDisconnect
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopDevice
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[323]"></a>saveMissions(double)</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, missions.o(.text._Z12saveMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = saveMissions(double) &rArr; SaveVolatileParamGroup(SName, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[325]"></a>update_ESO_1()</STRONG> (Thumb, 134 bytes, Stack size 64 bytes, ctrl_attitude.o(.text._Z12update_ESO_1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = update_ESO_1() &rArr; get_AngularRate_Ctrl(vector3&lang;double&rang;*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[328]"></a>SendMsgToMode(ModeMsg, double)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, modes.o(.text._Z13SendMsgToMode7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg86_SET_POSITION_TARGET_GLOBAL_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg84_SET_POSITION_TARGET_LOCAL_NED(unsigned char, __mavlink_message const*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg11_SET_MODE(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[329]"></a>clearMissions(double)</STRONG> (Thumb, 216 bytes, Stack size 152 bytes, missions.o(.text._Z13clearMissionsd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = clearMissions(double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[32b]"></a>ctrl_Attitude()</STRONG> (Thumb, 7488 bytes, Stack size 904 bytes, ctrl_attitude.o(.text._Z13ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = ctrl_Attitude() &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char, unsigned char, float)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[334]"></a>ctrl_Position()</STRONG> (Thumb, 14336 bytes, Stack size 576 bytes, ctrl_position.o(.text._Z13ctrl_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = ctrl_Position() &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_EsAngularRate(vector3&lang;double&rang;*, double)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ESO_height_T(double*, double)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_b(double*, double)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_es_AccZ(double*, double)
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_throttle_force(double*, double)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OutputThrottle(double*, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackVel(double*, double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttCtrlCfg()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double, double, double, double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[33d]"></a>getHomeLocalZ(double*, double*, double)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z13getHomeLocalZPdS_d))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getHomeLocalZ(double*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosZRAVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[349]"></a>get_Health_XY(PosSensorHealthInf2*, double)</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, ms_position.o(.text._Z13get_Health_XYP19PosSensorHealthInf2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_Health_XY(PosSensorHealthInf2*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
</UL>

<P><STRONG><a name="[34a]"></a>get_mav_modes(unsigned short&, unsigned short&, unsigned short&)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, commulink.o(.text._Z13get_mav_modesRtS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_mav_modes(unsigned short&, unsigned short&, unsigned short&)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFlyMode()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[34c]"></a>init_Missions()</STRONG> (Thumb, 228 bytes, Stack size 328 bytes, missions.o(.text._Z13init_Missionsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = init_Missions() &rArr; VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[2e2]"></a>init_TimeBase()</STRONG> (Thumb, 814 bytes, Stack size 336 bytes, timebase.o(.text._Z13init_TimeBasev))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EnableCompensationCell
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableUSBVoltageDetector
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_ConfigSupply
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>

<P><STRONG><a name="[356]"></a>init_drv_Main()</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, drv_main.o(.text._Z13init_drv_Mainv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2864 + Unknown Stack Size
<LI>Call Chain = init_drv_Main() &rArr; init_Sensors() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_VDDA_Voltage()
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_MR72_BackAv()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_MR72_Av()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_QOAR1271_Av()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Radar_TR60_AH()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_BMS_TATTU()
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADM001()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_MR72_UartAv()
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMiniAv()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_Viewlink()
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_RYEOP()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_INYYO()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_YT_ZR10()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_UWB_LinkTrack()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_US100()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_NRA24()
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ISTRA24_2()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ISTRA24()
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_TFMini()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_GL9306()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_JL32xx()
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC306()
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_OpticalFlow_LC302()
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTCMInput()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM982_movingTrack()
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM982()
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_UM482()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_MosaxicX6()
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_MosaxicX5()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Move()
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Base()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_Track()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS_nmea()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICTFMiniAv()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICTFMini()
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtBarometer()
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IICIRLock()
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtLed_TCA62724FMG()
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtMag()
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_InternalMag()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ExtIIC()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_IntIIC()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_PWMOut()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CRC()
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_ADC()
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_LED()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[498]"></a>sendLedSignal(LEDSignal)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, commulink.o(.text._Z13sendLedSignal9LEDSignal))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTrigTCB(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[394]"></a>set_mav_state(MAV_STATE)</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, commulink.o(.text._Z13set_mav_state9MAV_STATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = set_mav_state(MAV_STATE)
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[396]"></a>Matrix_Inverse(double*, unsigned char)</STRONG> (Thumb, 2500 bytes, Stack size 112 bytes, m12_acccalib.o(.text._Z14Matrix_InversePdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Matrix_Inverse(double*, unsigned char) &rArr; operator delete[](void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[398]"></a>ModeReceiveMsg(ModeMsg*, double)</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, modes.o(.text._Z14ModeReceiveMsgP7ModeMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ModeReceiveMsg(ModeMsg*, double) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4a6]"></a>Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, navcmdprocess.o(.text._Z14Process_NavCmdtdhPdP9NavCmdInf))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[a7]"></a>Read_USBD_VCOM(unsigned char*, unsigned short, double, double)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, drv_usb.o(.text._Z14Read_USBD_VCOMPhtdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Read_USBD_VCOM(unsigned char*, unsigned short, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[48a]"></a>RtkPort_setEna(unsigned char, bool)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, commulink.o(.text._Z14RtkPort_setEnahb))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[39a]"></a>SaveParamGroup(SName, double)</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, parameters.o(.text._Z14SaveParamGroup5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = SaveParamGroup(SName, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeSaveBodyOffset(unsigned char, double)
</UL>

<P><STRONG><a name="[b6]"></a>WaitSent_Uart1(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart1.o(.text._Z14WaitSent_Uart1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitSent_Uart1(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[188]"></a>WaitSent_Uart3(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart3.o(.text._Z14WaitSent_Uart3d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitSent_Uart3(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text._Z14init_drv_Uart3v)
</UL>
<P><STRONG><a name="[b7]"></a>WaitSent_Uart5(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart5.o(.text._Z14WaitSent_Uart5d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitSent_Uart5(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[c6]"></a>WaitSent_Uart7(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart7.o(.text._Z14WaitSent_Uart7d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitSent_Uart7(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text._Z14init_drv_Uart7v)
</UL>
<P><STRONG><a name="[190]"></a>WaitSent_Uart8(double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, drv_uart8.o(.text._Z14WaitSent_Uart8d))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = WaitSent_Uart8(double) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[4e8]"></a>getFencesCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fences.o(.text._Z14getFencesCountv))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[35f]"></a>init_Commulink()</STRONG> (Thumb, 1120 bytes, Stack size 1240 bytes, commulink.o(.text._Z14init_Commulinkv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2840 + Unknown Stack Size
<LI>Call Chain = init_Commulink() &rArr; ReceiverRegister(SName, bool, RC_CONFIG const*) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[35a]"></a>init_drv_Flash()</STRONG> (Thumb, 1670 bytes, Stack size 36 bytes, drv_flash.o(.text._Z14init_drv_Flashv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = init_drv_Flash() &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[385]"></a>init_drv_NRA24()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_nra24.o(.text._Z14init_drv_NRA24v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[386]"></a>init_drv_US100()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_us100.o(.text._Z14init_drv_US100v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[363]"></a>init_drv_Uart1()</STRONG> (Thumb, 784 bytes, Stack size 88 bytes, drv_uart1.o(.text._Z14init_drv_Uart1v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_Uart1() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[365]"></a>init_drv_Uart5()</STRONG> (Thumb, 784 bytes, Stack size 88 bytes, drv_uart5.o(.text._Z14init_drv_Uart5v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_Uart5() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[366]"></a>init_drv_Uart7()</STRONG> (Thumb, 744 bytes, Stack size 88 bytes, drv_uart7.o(.text._Z14init_drv_Uart7v))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = init_drv_Uart7() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortRegister(unsigned char, Port)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[39f]"></a>is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)</STRONG> (Thumb, 6488 bytes, Stack size 656 bytes, avoidance.o(.text._Z14is_insideFenceRK7vector3IdES2_PdP3FRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 2344 + Unknown Stack Size
<LI>Call Chain = is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*) &rArr; ReadFence(unsigned short, FenceInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFence(unsigned short, FenceInf*, double)
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFenceInd()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFence(short)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3a5]"></a>AuxCamTakePhoto()</STRONG> (Thumb, 2776 bytes, Stack size 1544 bytes, auxfuncs.o(.text._Z15AuxCamTakePhotov))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112 + Unknown Stack Size
<LI>Call Chain = AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToSingleCamera(CmdMsg, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_InflightCmd(unsigned short, double*)
</UL>

<P><STRONG><a name="[3d1]"></a>Aux_ChannelRead(double, bool*)</STRONG> (Thumb, 434 bytes, Stack size 28 bytes, drv_pwmout.o(.text._Z15Aux_ChannelReaddPb))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Aux_ChannelRead(double, bool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
</UL>

<P><STRONG><a name="[fe]"></a>DriverInit_task(void*)</STRONG> (Thumb, 536 bytes, Stack size 224 bytes, main.o(.text._Z15DriverInit_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5712 + Unknown Stack Size
<LI>Call Chain = DriverInit_task(void*) &rArr; init_Modes() &rArr; init_AuxFuncs() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Fences()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullUpAll()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char, unsigned char, float)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInitializationCompleted()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Debug()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[3bc]"></a>GetMagnetometer(unsigned char, IMU_Sensor*, double)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, sensors.o(.text._Z15GetMagnetometerhP10IMU_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetMagnetometer(unsigned char, IMU_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[489]"></a>RtkPortRegister(RtkPort)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, commulink.o(.text._Z15RtkPortRegister7RtkPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RtkPortRegister(RtkPort)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[4c5]"></a>getSdFreeSizeGB()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text._Z15getSdFreeSizeGBv))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[3bd]"></a>get_VelocityENU(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ms_position.o(.text._Z15get_VelocityENUP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_VelocityENU(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[2f1]"></a>get_is_inFlight(bool*, double)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z15get_is_inFlightPbd))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[38e]"></a>init_drv_ADM001()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_adm001.o(.text._Z15init_drv_ADM001v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[36b]"></a>init_drv_ExtIIC()</STRONG> (Thumb, 524 bytes, Stack size 16 bytes, drv_extiic.o(.text._Z15init_drv_ExtIICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_drv_ExtIIC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[36d]"></a>init_drv_ExtMag()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_extmag.o(.text._Z15init_drv_ExtMagv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[369]"></a>init_drv_IntIIC()</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, drv_intiic.o(.text._Z15init_drv_IntIICv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = init_drv_IntIIC() &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3bf]"></a>setPump1bySpeed(float)</STRONG> (Thumb, 636 bytes, Stack size 928 bytes, auxfuncs.o(.text._Z15setPump1bySpeedf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = setPump1bySpeed(float) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3c0]"></a>set_BuzzerOnOff(bool)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, drv_led.o(.text._Z15set_BuzzerOnOffb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_BuzzerOnOff(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRefresh(float)
</UL>

<P><STRONG><a name="[41b]"></a>CanFunc_Register(unsigned char, bool (*)(), bool (*)())</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, commulink.o(.text._Z16CanFunc_RegisterhPFbvES0_))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_MR72_BackAv()
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_MR72_Av()
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_QOAR1271_Av()
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Radar_TR60_AH()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_CAN_BMS_TATTU()
</UL>

<P><STRONG><a name="[3c1]"></a>ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, drv_extiic.o(.text._Z16ExtIIC_SendAddr7hPKht8IICSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtLed_Server(void*)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
</UL>

<P><STRONG><a name="[39d]"></a>ReceiverRegister(SName, bool, RC_CONFIG const*)</STRONG> (Thumb, 1440 bytes, Stack size 320 bytes, receiver.o(.text._Z16ReceiverRegister5SNamebPK9RC_CONFIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600 + Unknown Stack Size
<LI>Call Chain = ReceiverRegister(SName, bool, RC_CONFIG const*) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)
</UL>
<BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
</UL>

<P><STRONG><a name="[3c7]"></a>SendCmdMsgToTask(CmdMsg, unsigned short, double)</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text._Z16SendCmdMsgToTask6CmdMsgtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendCmdMsgToTask(CmdMsg, unsigned short, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[32a]"></a>UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)</STRONG> (Thumb, 832 bytes, Stack size 88 bytes, parameters.o(.text._Z16UpdateParamGroup5SNamePKyttbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624 + Unknown Stack Size
<LI>Call Chain = UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeRAM_restoreWpInf(double)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd11_MAV_CMD_WRITE_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_DeInit()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_Init()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4e9]"></a>getMissionsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, missions.o(.text._Z16getMissionsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[50d]"></a>get_CrashedState()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._Z16get_CrashedStatev))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[341]"></a>get_ESO_height_T(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z16get_ESO_height_TPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_ESO_height_T(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[511]"></a>get_RcButtonZone(double, unsigned char)</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, m32_posctrl.o(.text._Z16get_RcButtonZonedh))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4b9]"></a>get_YawHealthEst()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z16get_YawHealthEstv))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[3c8]"></a>get_followSensor(followSensor*, double)</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, followtarget.o(.text._Z16get_followSensorP12followSensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_followSensor(followSensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[61b]"></a>init_MS_Position()</STRONG> (Thumb, 132 bytes, Stack size 20 bytes, ms_position.o(.text._Z16init_MS_Positionv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = init_MS_Position()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
</UL>

<P><STRONG><a name="[383]"></a>init_drv_ISTRA24()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_istra24.o(.text._Z16init_drv_ISTRA24v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[368]"></a>init_drv_Sensors()</STRONG> (Thumb, 8512 bytes, Stack size 120 bytes, drv_sensors.o(.text._Z16init_drv_Sensorsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = init_drv_Sensors() &rArr; IMUGyroscopeRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Gyroscope_UpdateFreq(unsigned char, double)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_IMU_Accelerometer_UpdateFreq(unsigned char, double)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[4bb]"></a>isDAOSensorFixed()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_attitude.o(.text._Z16isDAOSensorFixedv))
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[3cf]"></a>process_AuxFuncs(Receiver const*, double)</STRONG> (Thumb, 8024 bytes, Stack size 1520 bytes, auxfuncs.o(.text._Z16process_AuxFuncsPK8Receiverd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4632 + Unknown Stack Size
<LI>Call Chain = process_AuxFuncs(Receiver const*, double) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_ChannelRead(double, bool*)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_PWM_Out(double, unsigned char)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToSingleCamera(CmdMsg, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4a9]"></a>setLedManualCtrl(float, float, float, bool, unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, commulink.o(.text._Z16setLedManualCtrlfffbt))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[3d2]"></a>GetPositionSensor(unsigned char, Position_Sensor*, double)</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, sensors.o(.text._Z17GetPositionSensorhP15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = GetPositionSensor(unsigned char, Position_Sensor*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[b0]"></a>SetBaudRate_Uart1(unsigned int, double, double)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, drv_uart1.o(.text._Z17SetBaudRate_Uart1jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetBaudRate_Uart1(unsigned int, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[b9]"></a>SetBaudRate_Uart5(unsigned int, double, double)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, drv_uart5.o(.text._Z17SetBaudRate_Uart5jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetBaudRate_Uart5(unsigned int, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[192]"></a>SetBaudRate_Uart8(unsigned int, double, double)</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, drv_uart8.o(.text._Z17SetBaudRate_Uart8jdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SetBaudRate_Uart8(unsigned int, double, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[509]"></a>getAvTargetsCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, avoidance.o(.text._Z17getAvTargetsCountv))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3d3]"></a>getHomeOptSensorZ(double*, double)</STRONG> (Thumb, 268 bytes, Stack size 280 bytes, ctrl_attitude.o(.text._Z17getHomeOptSensorZPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = getHomeOptSensorZ(double*, double) &rArr; GetPositionSensorData(unsigned char, Position_Sensor_Data*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[32c]"></a>get_Airframe_quat(Quaternion*, double)</STRONG> (Thumb, 624 bytes, Stack size 160 bytes, ms_attitude.o(.text._Z17get_Airframe_quatP10Quaterniond))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_Server(void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Server(void*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_Server(void*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[3d4]"></a>get_lastZCtrlTime(TIME*, double)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z17get_lastZCtrlTimeP4TIMEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_lastZCtrlTime(TIME*, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[374]"></a>init_drv_GPS_nmea()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_gps_nmea.o(.text._Z17init_drv_GPS_nmeav))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[38c]"></a>init_drv_TFMiniAv()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_tfminiav.o(.text._Z17init_drv_TFMiniAvv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[38a]"></a>init_drv_YT_RYEOP()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_yt_ryeop.o(.text._Z17init_drv_YT_RYEOPv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3d5]"></a>paramProtocolTask(bool)</STRONG> (Thumb, 392 bytes, Stack size 432 bytes, mavlinkrcprocess.o(.text._Z17paramProtocolTaskb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = paramProtocolTask(bool) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::isEnd()
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::operator++()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::setInAvailable()
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned int*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[4e4]"></a>setCurrentMission(unsigned short)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, missions.o(.text._Z17setCurrentMissiont))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[313]"></a>ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)</STRONG> (Thumb, 1366 bytes, Stack size 120 bytes, parameters.o(.text._Z18ParamGroupRegister5SNametjPK14MAV_PARAM_TYPEPKS_PKy))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280 + Unknown Stack Size
<LI>Call Chain = ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator!=(SName const&) const
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLockInitializationStatus()
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockInitializationStatus()
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Base()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>

<P><STRONG><a name="[3e2]"></a>ReadCurrentMission(MissionInf*, unsigned short*, double)</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, missions.o(.text._Z18ReadCurrentMissionP10MissionInfPtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696 + Unknown Stack Size
<LI>Call Chain = ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3e3]"></a>SDLog_Msg_SysState(double)</STRONG> (Thumb, 1272 bytes, Stack size 344 bytes, sdstorage.o(.text._Z18SDLog_Msg_SysStated))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = SDLog_Msg_SysState(double) &rArr; getReceiver(Receiver*, SName*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFlyMode()
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_MSafeCtrl()
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_CPUTemperature()
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPULoad
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[3a6]"></a>get_MainMotorCount()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z18get_MainMotorCountv))
<BR><BR>[Called By]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1bySpeed(float)
</UL>

<P><STRONG><a name="[3ea]"></a>get_OptimalRange_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, ms_position.o(.text._Z18get_OptimalRange_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_OptimalRange_Z(PosSensorHealthInf1*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[340]"></a>get_throttle_force(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z18get_throttle_forcePdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_throttle_force(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[3b7]"></a>init_ControlSystem()</STRONG> (Thumb, 992 bytes, Stack size 688 bytes, ctrl_main.o(.text._Z18init_ControlSystemv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3400 + Unknown Stack Size
<LI>Call Chain = init_ControlSystem() &rArr; init_Ctrl_Position() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[3eb]"></a>init_Ctrl_Attitude()</STRONG> (Thumb, 2440 bytes, Stack size 36 bytes, ctrl_attitude.o(.text._Z18init_Ctrl_Attitudev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1316 + Unknown Stack Size
<LI>Call Chain = init_Ctrl_Attitude() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
</UL>

<P><STRONG><a name="[36f]"></a>init_drv_IICIRLock()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_iic_irlock.o(.text._Z18init_drv_IICIRLockv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[37a]"></a>init_drv_RTK_UM482()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_um482.o(.text._Z18init_drv_RTK_UM482v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3ed]"></a>registere_AvTarget(double)</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, avoidance.o(.text._Z18registere_AvTargetd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = registere_AvTarget(double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_DriverInit(Port, unsigned int)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_Server(void*)
</UL>

<P><STRONG><a name="[332]"></a>set_MainMotorCount(unsigned char, unsigned char, float)</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, drv_pwmout.o(.text._Z18set_MainMotorCounthhf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_MainMotorCount(unsigned char, unsigned char, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[3ee]"></a>DAOSensorUnRegister(unsigned char, unsigned int, double)</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sensors.o(.text._Z19DAOSensorUnRegisterhjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DAOSensorUnRegister(unsigned char, unsigned int, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[3b9]"></a>MainMotor_PullUpAll()</STRONG> (Thumb, 154 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z19MainMotor_PullUpAllv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[3ef]"></a>Process_InflightCmd(unsigned short, double*)</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, inflightcmdprocess.o(.text._Z19Process_InflightCmdtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 3112 + Unknown Stack Size
<LI>Call Chain = Process_InflightCmd(unsigned short, double*) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[331]"></a>SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, sdstorage.o(.text._Z19SDLog_Msg_DebugVectPKcPdhd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SDLog_Msg_DebugVect(char const*, double*, unsigned char, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[3f0]"></a>SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)</STRONG> (Thumb, 2252 bytes, Stack size 360 bytes, sdstorage.o(.text._Z19SDLog_Msg_PosSensorh15Position_Sensord))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
</UL>

<P><STRONG><a name="[359]"></a>adcGet_VDDA_Voltage()</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, drv_adc.o(.text._Z19adcGet_VDDA_Voltagev))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[622]"></a>get_AuxChannelCount()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, drv_pwmout.o(.text._Z19get_AuxChannelCountv))
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>

<P><STRONG><a name="[3aa]"></a>get_CommulinkCompId()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, commulink.o(.text._Z19get_CommulinkCompIdv))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Debug_task(void*)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[449]"></a>get_Current_ZSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z19get_Current_ZSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[3f1]"></a>get_OptimalGlobal_Z(PosSensorHealthInf1*, double)</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, ms_position.o(.text._Z19get_OptimalGlobal_ZP19PosSensorHealthInf1d))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_OptimalGlobal_Z(PosSensorHealthInf1*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosGlobalVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[346]"></a>get_WindDisturbance(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._Z19get_WindDisturbanceP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_WindDisturbance(vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[35e]"></a>init_drv_BootLoader()</STRONG> (Thumb, 3640 bytes, Stack size 36 bytes, drv_bootloader.o(.text._Z19init_drv_BootLoaderv))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = init_drv_BootLoader() &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_final
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_update
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_init
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerFreq(unsigned short)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseHex(char, _HexData*)
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[410]"></a>update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)</STRONG> (Thumb, 1000 bytes, Stack size 296 bytes, followtarget.o(.text._Z19update_followSensorj7vector3IdES0_dbdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3cc]"></a>IMUGyroscopeRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 808 bytes, Stack size 216 bytes, sensors.o(.text._Z20IMUGyroscopeRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = IMUGyroscopeRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[412]"></a>IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)</STRONG> (Thumb, 1068 bytes, Stack size 296 bytes, sensors.o(.text._Z20IMUGyroscopeUpdateTChj7vector3IiEbdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator+(SName const&)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20689TCB(void*, unsigned int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088GyroTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[2fc]"></a>get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 456 bytes, Stack size 112 bytes, ms_attitude.o(.text._Z20get_AngularRate_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = get_AngularRate_Ctrl(vector3&lang;double&rang;*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[448]"></a>get_Current_XYSensor()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z20get_Current_XYSensorv))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
</UL>

<P><STRONG><a name="[336]"></a>get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ms_position.o(.text._Z20get_VelocityENU_CtrlP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[35b]"></a>init_InternalStorage()</STRONG> (Thumb, 396 bytes, Stack size 352 bytes, internalstorage.o(.text._Z20init_InternalStoragev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = init_InternalStorage() &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorCount
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashSectorSize
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFlashPageSize
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_VDDA_Voltage()
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[392]"></a>init_drv_CAN_MR72_Av()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_can_mr72_av.o(.text._Z20init_drv_CAN_MR72_Avv))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[513]"></a>is_insideCircleFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double, double, double, double*)</STRONG> (Thumb, 272 bytes, Stack size 8 bytes, avoidance.o(.text._Z20is_insideCircleFenceRK7vector3IdES2_dddPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_insideCircleFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double, double, double, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[41c]"></a>IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)</STRONG> (Thumb, 776 bytes, Stack size 232 bytes, sensors.o(.text._Z21IMUMagnetometerUpdatehj7vector3IiEbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator+(SName const&)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalMag_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3e8]"></a>adcGet_CPUTemperature()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, drv_adc.o(.text._Z21adcGet_CPUTemperaturev))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
</UL>

<P><STRONG><a name="[428]"></a>get_Altitude_MSStatus()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21get_Altitude_MSStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[41d]"></a>get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)</STRONG> (Thumb, 3358 bytes, Stack size 736 bytes, avoidance.o(.text._Z21get_AvLineDistanceEnuPd7vector3IdEdPKS1_hd))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[41e]"></a>get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)</STRONG> (Thumb, 816 bytes, Stack size 152 bytes, avoidance.o(.text._Z21get_AvLineDistanceFluPd7vector3IdEdPKS1_hd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[376]"></a>init_drv_RTK_DAO_Base()</STRONG> (Thumb, 156 bytes, Stack size 192 bytes, drv_rtk_dao_base.o(.text._Z21init_drv_RTK_DAO_Basev))
<BR><BR>[Stack]<UL><LI>Max Depth = 1472 + Unknown Stack Size
<LI>Call Chain = init_drv_RTK_DAO_Base() &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[377]"></a>init_drv_RTK_DAO_Move()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_rtk_dao_move.o(.text._Z21init_drv_RTK_DAO_Movev))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[41f]"></a>init_process_AuxFuncs()</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, auxfuncs.o(.text._Z21init_process_AuxFuncsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = init_process_AuxFuncs()
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4b8]"></a>isGlobalXYSensorExist()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ms_position.o(.text._Z21isGlobalXYSensorExistv))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[420]"></a>storeRAM_restoreWpInf(double)</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, modes.o(.text._Z21storeRAM_restoreWpInfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = storeRAM_restoreWpInf(double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[301]"></a>ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)</STRONG> (Thumb, 768 bytes, Stack size 96 bytes, parameters.o(.text._Z22ReadVolatileParamGroup5SNamePvttd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632 + Unknown Stack Size
<LI>Call Chain = ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFence(unsigned short, FenceInf*, double)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
</UL>

<P><STRONG><a name="[324]"></a>SaveVolatileParamGroup(SName, double)</STRONG> (Thumb, 424 bytes, Stack size 72 bytes, parameters.o(.text._Z22SaveVolatileParamGroup5SNamed))
<BR><BR>[Stack]<UL><LI>Max Depth = 1608 + Unknown Stack Size
<LI>Call Chain = SaveVolatileParamGroup(SName, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
</UL>

<P><STRONG><a name="[500]"></a>get_VelocityENU_Ctrl_x()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_position.o(.text._Z22get_VelocityENU_Ctrl_xv))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06TCB(void*, unsigned int)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
</UL>

<P><STRONG><a name="[379]"></a>init_drv_RTK_MosaxicX6()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_mosaxicx6.o(.text._Z22init_drv_RTK_MosaxicX6v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[390]"></a>init_drv_Radar_TR60_AH()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_can_radar_tr60_ah.o(.text._Z22init_drv_Radar_TR60_AHv))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[422]"></a>send_AutoPilot_Version(unsigned char)</STRONG> (Thumb, 336 bytes, Stack size 392 bytes, mavlinkcmdprocess.o(.text._Z22send_AutoPilot_Versionh))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = send_AutoPilot_Version(unsigned char) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WGA_Correct()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_get_WGA(unsigned int*)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[427]"></a>Altitude_Control_Enable(double)</STRONG> (Thumb, 592 bytes, Stack size 104 bytes, ctrl_position.o(.text._Z23Altitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[429]"></a>Attitude_Control_Enable(double)</STRONG> (Thumb, 1568 bytes, Stack size 224 bytes, ctrl_attitude.o(.text._Z23Attitude_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char, unsigned char, float)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::ESO_AngularRate__sub_object()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::init(double, double, double, double, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[42d]"></a>ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)</STRONG> (Thumb, 680 bytes, Stack size 40 bytes, drv_extiic.o(.text._Z23ExtIIC_SendReceiveAddr7hPKhtPht8IICSpeedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBarometer_Server(void*)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMag_Server(void*)
</UL>

<P><STRONG><a name="[42e]"></a>MS_Notify_IMUGyroUpdate(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ms_main.o(.text._Z23MS_Notify_IMUGyroUpdateh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MS_Notify_IMUGyroUpdate(unsigned char) &rArr; xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;icm20689TCB(void*, unsigned int)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi088GyroTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[430]"></a>PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 3640 bytes, Stack size 680 bytes, sensors.o(.text._Z23PositionSensorUpdateVelhj7vector3IdEbdddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat(double*) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[433]"></a>Position_Control_Enable(double)</STRONG> (Thumb, 504 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z23Position_Control_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[af]"></a>Uart1_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart1.o(.text._Z23Uart1_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart1_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text._Z14init_drv_Uart1v)
</UL>
<P><STRONG><a name="[b8]"></a>Uart5_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart5.o(.text._Z23Uart5_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart5_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text._Z14init_drv_Uart5v)
</UL>
<P><STRONG><a name="[191]"></a>Uart8_TxSpacesAvailable()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, drv_uart8.o(.text._Z23Uart8_TxSpacesAvailablev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Uart8_TxSpacesAvailable()
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSpacesAvailable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text._Z14init_drv_Uart8v)
</UL>
<P><STRONG><a name="[435]"></a>WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)</STRONG> (Thumb, 792 bytes, Stack size 104 bytes, parameters.o(.text._Z23WriteVolatileParamGroup5SNamePKvttbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
</UL>

<P><STRONG><a name="[436]"></a>get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)</STRONG> (Thumb, 472 bytes, Stack size 48 bytes, ms_position.o(.text._Z23get_PosSensorHealth_XYZP19PosSensorHealthInf3hd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[437]"></a>get_history_PositionErr(vector3&lang;double&rang;*, double, double)</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z23get_history_PositionErrP7vector3IdEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = get_history_PositionErr(vector3&lang;double&rang;*, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[438]"></a>set_AvTargetInavailable(unsigned char, double)</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, avoidance.o(.text._Z23set_AvTargetInavailablehd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_AvTargetInavailable(unsigned char, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_Server(void*)
</UL>

<P><STRONG><a name="[439]"></a>Altitude_Control_Disable(double)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z24Altitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Altitude_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
</UL>

<P><STRONG><a name="[43a]"></a>Attitude_Control_Disable(double)</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z24Attitude_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Attitude_Control_Disable(double) &rArr; Altitude_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[43c]"></a>MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)</STRONG> (Thumb, 1802 bytes, Stack size 88 bytes, ms_attitude.o(.text._Z24MS_Attitude_GyroIntegralh10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main_Gyro(void*)
</UL>

<P><STRONG><a name="[43d]"></a>PositionSensorUnRegister(unsigned char, unsigned int, double)</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, sensors.o(.text._Z24PositionSensorUnRegisterhjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PositionSensorUnRegister(unsigned char, unsigned int, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[43b]"></a>Position_Control_Disable(double)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z24Position_Control_Disabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_Disable(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[3b1]"></a>SendCmdMsgToSingleCamera(CmdMsg, double)</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, mavlinkcmdprocess.o(.text._Z24SendCmdMsgToSingleCamera6CmdMsgd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SendCmdMsgToSingleCamera(CmdMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[43e]"></a>get_AngularRateNC_filted(vector3&lang;double&rang;*, double)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ctrl_main.o(.text._Z24get_AngularRateNC_filtedP7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = get_AngularRateNC_filted(vector3&lang;double&rang;*, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[2ff]"></a>get_history_AttitudeQuat(Quaternion*, double, double)</STRONG> (Thumb, 536 bytes, Stack size 96 bytes, ms_attitude.o(.text._Z24get_history_AttitudeQuatP10Quaterniondd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_history_AttitudeQuat(Quaternion*, double, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[393]"></a>init_drv_CAN_MR72_BackAv()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_can_mr72_backav.o(.text._Z24init_drv_CAN_MR72_BackAvv))
<BR><BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[43f]"></a>update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)</STRONG> (Thumb, 672 bytes, Stack size 224 bytes, precland.o(.text._Z24update_precLandSensorENUj7vector3IdEbbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + Unknown Stack Size
<LI>Call Chain = update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double) &rArr; get_history_AirframeQuatY(Quaternion*, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
</UL>

<P><STRONG><a name="[440]"></a>NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)</STRONG> (Thumb, 3328 bytes, Stack size 584 bytes, navcmdprocess.o(.text._Z25NavCmd16_WAYPOINT_GetInfohPdP7vector3IdES2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*) &rArr; get_Attitude_quat(Quaternion*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[444]"></a>IMUGyroscopeSaveBodyOffset(unsigned char, double)</STRONG> (Thumb, 594 bytes, Stack size 160 bytes, sensors.o(.text._Z26IMUGyroscopeSaveBodyOffsethd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = IMUGyroscopeSaveBodyOffset(unsigned char, double) &rArr; SaveParamGroup(SName, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyroOffsetSaveTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[445]"></a>PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 656 bytes, Stack size 144 bytes, sensors.o(.text._Z26PositionSlamSensorRegisterh5SName20Position_Sensor_Type24Position_Sensor_DataType21Position_Sensor_frameddddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[446]"></a>Position_Control_set_ZLock(double)</STRONG> (Thumb, 340 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z26Position_Control_set_ZLockd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[447]"></a>SDLog_Msg_LocalPositionNed(double)</STRONG> (Thumb, 552 bytes, Stack size 240 bytes, sdstorage.o(.text._Z26SDLog_Msg_LocalPositionNedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = SDLog_Msg_LocalPositionNed(double) &rArr; get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_ZSensor()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Current_XYSensor()
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Main(void*)
</UL>

<P><STRONG><a name="[3c3]"></a>UnLockInitializationStatus()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, basic.o(.text._Z26UnLockInitializationStatusv))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>

<P><STRONG><a name="[37e]"></a>init_drv_OpticalFlow_LC302()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3b8]"></a>setInitializationCompleted()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, basic.o(.text._Z26setInitializationCompletedv))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[515]"></a>set_RestoreWpInf_needStore()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modes.o(.text._Z26set_RestoreWpInf_needStorev))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[44a]"></a>IMUMagnetometerSlamRegister(unsigned char, SName, double, double)</STRONG> (Thumb, 808 bytes, Stack size 216 bytes, sensors.o(.text._Z27IMUMagnetometerSlamRegisterh5SNamedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = IMUMagnetometerSlamRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3dd]"></a>InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)</STRONG> (Thumb, 192 bytes, Stack size 296 bytes, internalstorage.o(.text._Z27InternalStorage_GetFileSizePKcS0_Pjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double) &rArr; lfs_stat &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
</UL>

<P><STRONG><a name="[44b]"></a>Position_Control_set_XYLock(double, double)</STRONG> (Thumb, 354 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z27Position_Control_set_XYLockdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_XYLock(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[44c]"></a>adcGet_MainBaterry1_Current()</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_adc.o(.text._Z27adcGet_MainBaterry1_Currentv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = adcGet_MainBaterry1_Current() &rArr; ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[44d]"></a>adcGet_MainBaterry1_Voltage()</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_adc.o(.text._Z27adcGet_MainBaterry1_Voltagev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = adcGet_MainBaterry1_Voltage() &rArr; ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
</UL>

<P><STRONG><a name="[36e]"></a>init_drv_ExtLed_TCA62724FMG()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, drv_extled_tca62724fmg.o(.text._Z27init_drv_ExtLed_TCA62724FMGv))
<BR><BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2CFunc_Register(unsigned char, bool (*)(), bool (*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[381]"></a>init_drv_OpticalFlow_GL9306()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[3e4]"></a>is_Altitude_Control_Enabled(bool*, double)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z27is_Altitude_Control_EnabledPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
</UL>

<P><STRONG><a name="[44e]"></a>setInavailable_followSensor(unsigned int, double)</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, followtarget.o(.text._Z27setInavailable_followSensorjd))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = setInavailable_followSensor(unsigned int, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRLock_Server(void*)
</UL>

<P><STRONG><a name="[44f]"></a>PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, sensors.o(.text._Z28PositionSensorChangeDataTypehj24Position_Sensor_DataTyped))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[343]"></a>Attitude_Control_set_Throttle(double, double)</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._Z29Attitude_Control_set_Throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Attitude_Control_set_Throttle(double, double) &rArr; is_Altitude_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Altitude_Control_Enabled(bool*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[450]"></a>Attitude_Control_get_TargetYaw(double*, double)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z30Attitude_Control_get_TargetYawPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude_Control_get_TargetYaw(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
</UL>

<P><STRONG><a name="[451]"></a>Position_Control_set_TurnRaius(double, double)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z30Position_Control_set_TurnRaiusdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_TurnRaius(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[37c]"></a>init_drv_RTK_UM982_movingTrack()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, drv_um982_movingtrack.o(.text._Z30init_drv_RTK_UM982_movingTrackv))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortFunc_Register(unsigned char, bool (*)(Port, unsigned int))
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Main()
</UL>

<P><STRONG><a name="[452]"></a>Attitude_Control_set_Target_Yaw(double, double)</STRONG> (Thumb, 480 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._Z31Attitude_Control_set_Target_Yawdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = Attitude_Control_set_Target_Yaw(double, double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[30d]"></a>GetVolatileParamGroupParamCount(SName, unsigned short*, double)</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, parameters.o(.text._Z31GetVolatileParamGroupParamCount5SNamePtd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = GetVolatileParamGroupParamCount(SName, unsigned short*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Fences()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
</UL>

<P><STRONG><a name="[455]"></a>PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)</STRONG> (Thumb, 4032 bytes, Stack size 680 bytes, sensors.o(.text._Z31PositionSensorUpdatePositionVelhj7vector3IdES0_bdddPKdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::get_RP_quat(double*) const
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate(vector3&lang;double&rang;) const
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[42a]"></a>Position_Control_set_ZAutoSpeed(double, double, double)</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z31Position_Control_set_ZAutoSpeedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Position_Control_set_ZAutoSpeed(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[456]"></a>Attitude_Control_get_YawTrackErr(double*, double)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z32Attitude_Control_get_YawTrackErrPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude_Control_get_YawTrackErr(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[339]"></a>Attitude_Control_get_YawTrackVel(double*, double)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ctrl_attitude.o(.text._Z32Attitude_Control_get_YawTrackVelPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Attitude_Control_get_YawTrackVel(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[457]"></a>Position_Control_get_XYAutoSpeed(double*, double)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ctrl_position.o(.text._Z32Position_Control_get_XYAutoSpeedPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Position_Control_get_XYAutoSpeed(double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
</UL>

<P><STRONG><a name="[3ca]"></a>set_IMU_Accelerometer_UpdateFreq(unsigned char, double)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ms_main.o(.text._Z32set_IMU_Accelerometer_UpdateFreqhd))
<BR><BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[458]"></a>Position_Control_set_XYZAutoSpeed(double, double)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z33Position_Control_set_XYZAutoSpeeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_XYZAutoSpeed(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)
</UL>

<P><STRONG><a name="[459]"></a>InternalStorage_ResetCfg_ExceptWGA(double)</STRONG> (Thumb, 312 bytes, Stack size 352 bytes, internalstorage.o(.text._Z34InternalStorage_ResetCfg_ExceptWGAd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1504 + Unknown Stack Size
<LI>Call Chain = InternalStorage_ResetCfg_ExceptWGA(double) &rArr; lfs_remove &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_close
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_read
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_open
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[345]"></a>Attitude_Control_set_Target_YawRate(double, double)</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._Z35Attitude_Control_set_Target_YawRatedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Attitude_Control_set_Target_YawRate(double, double) &rArr; get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[45f]"></a>getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, ctrl_main.o(.text._Z35getCurrentBatteryTotalVoltRawFiltedPfPad))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_MotorControl(double, double, double, double, bool)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
</UL>

<P><STRONG><a name="[460]"></a>Position_Control_set_TargetVelocityZ(double, double)</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, ctrl_position.o(.text._Z36Position_Control_set_TargetVelocityZdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Position_Control_set_TargetVelocityZ(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[461]"></a>set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)</STRONG> (Thumb, 384 bytes, Stack size 120 bytes, avoidance.o(.text._Z36set_AvTargetPoint3dPoint_RelativeFluh7vector3IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_Server(void*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
</UL>

<P><STRONG><a name="[33b]"></a>Attitude_Control_set_Target_RollPitch(double, double, double)</STRONG> (Thumb, 480 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._Z37Attitude_Control_set_Target_RollPitchddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Attitude_Control_set_Target_RollPitch(double, double, double) &rArr; is_Position_Control_Enabled(bool*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[463]"></a>Position_Control_Takeoff_HeightGlobal(double, double)</STRONG> (Thumb, 82 bytes, Stack size 112 bytes, ctrl_position.o(.text._Z37Position_Control_Takeoff_HeightGlobaldd))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Position_Control_Takeoff_HeightGlobal(double, double) &rArr; Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[465]"></a>Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 744 bytes, Stack size 72 bytes, ctrl_position.o(.text._Z37Position_Control_set_TargetPositionXYddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector2&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[467]"></a>Position_Control_set_TargetPositionZRA(double, double, double)</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z38Position_Control_set_TargetPositionZRAddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Position_Control_set_TargetPositionZRA(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[469]"></a>set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)</STRONG> (Thumb, 504 bytes, Stack size 144 bytes, avoidance.o(.text._Z38set_AvTargetXYStraightLine_RelativeFluh7vector2IdEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_Server(void*)
</UL>

<P><STRONG><a name="[46b]"></a>Attitude_Control_set_Target_YawRelative(double, double)</STRONG> (Thumb, 346 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._Z39Attitude_Control_set_Target_YawRelativedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = Attitude_Control_set_Target_YawRelative(double, double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[464]"></a>Position_Control_Takeoff_HeightRelative(double, double)</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, ctrl_position.o(.text._Z39Position_Control_Takeoff_HeightRelativedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Position_Control_Takeoff_HeightRelative(double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[46c]"></a>Position_Control_do_ManualCircleRelative(double, double, double, double)</STRONG> (Thumb, 936 bytes, Stack size 144 bytes, ctrl_position.o(.text._Z40Position_Control_do_ManualCircleRelativedddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = Position_Control_do_ManualCircleRelative(double, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[46d]"></a>Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z41Position_Control_get_LineFlightABDistanceP7vector3IdEPdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[46e]"></a>Position_Control_set_TargetPositionZGlobal(double, double, double)</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, ctrl_position.o(.text._Z42Position_Control_set_TargetPositionZGlobalddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Position_Control_set_TargetPositionZGlobal(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[46f]"></a>Position_Control_set_TargetVelAccZ_OffBoard(double, double, double)</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, ctrl_position.o(.text._Z43Position_Control_set_TargetVelAccZ_OffBoardddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Position_Control_set_TargetVelAccZ_OffBoard(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[470]"></a>Position_Control_set_TargetPositionZRelative(double, double, double)</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetPositionZRelativeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Position_Control_set_TargetPositionZRelative(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[471]"></a>Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double)</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, ctrl_position.o(.text._Z44Position_Control_set_TargetVelAccXY_OffBoardddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[472]"></a>Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 280 bytes, Stack size 288 bytes, ctrl_position.o(.text._Z45Position_Control_set_TargetPositionXYZ_LatLondddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[475]"></a>Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 832 bytes, Stack size 88 bytes, ctrl_position.o(.text._Z46Position_Control_set_TargetPositionXYZRelativedddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[477]"></a>Position_Control_set_RouteLineAvoidanceRelative(double, double, double)</STRONG> (Thumb, 374 bytes, Stack size 72 bytes, ctrl_position.o(.text._Z47Position_Control_set_RouteLineAvoidanceRelativeddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Position_Control_set_RouteLineAvoidanceRelative(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[478]"></a>Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)</STRONG> (Thumb, 538 bytes, Stack size 64 bytes, ctrl_position.o(.text._Z47Position_Control_set_TargetPosVelAccXY_OffBoardddddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[479]"></a>Position_Control_set_TargetPosZRAVelAccZ_OffBoard(double, double, double, double)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, ctrl_position.o(.text._Z49Position_Control_set_TargetPosZRAVelAccZ_OffBoarddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = Position_Control_set_TargetPosZRAVelAccZ_OffBoard(double, double, double, double) &rArr; Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[47b]"></a>Position_Control_set_TargetPosGlobalVelAccZ_OffBoard(double, double, double, double)</STRONG> (Thumb, 196 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z52Position_Control_set_TargetPosGlobalVelAccZ_OffBoarddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = Position_Control_set_TargetPosGlobalVelAccZ_OffBoard(double, double, double, double) &rArr; Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[47c]"></a>Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)</STRONG> (Thumb, 338 bytes, Stack size 296 bytes, ctrl_position.o(.text._Z53Position_Control_set_TargetGlobalPosVelAccXY_OffBoardddddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double) &rArr; map_projection_project(Map_Projection const*, double, double, double*, double*) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[47d]"></a>Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 380 bytes, Stack size 264 bytes, ctrl_position.o(.text._Z53Position_Control_set_TargetPositionXYZRelative_LatLondddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[47e]"></a>Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, ctrl_position.o(.text._Z54Position_Control_set_TargetPosRelativeVelAccZ_OffBoarddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double) &rArr; Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[47f]"></a>Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)</STRONG> (Thumb, 350 bytes, Stack size 88 bytes, ctrl_position.o(.text._Z55Position_Control_set_TargetPosRelativeVelAccXY_OffBoardddddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double) &rArr; Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnlockCtrl()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[480]"></a>Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)</STRONG> (Thumb, 392 bytes, Stack size 128 bytes, ctrl_position.o(.text._Z56Position_Control_set_TargetPositionXYRelativeBodyheadingddd19MissionPrestoreModePbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
</UL>

<P><STRONG><a name="[482]"></a>setPump1(float)</STRONG> (Thumb, 610 bytes, Stack size 928 bytes, auxfuncs.o(.text._Z8setPump1f))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = setPump1(float) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MainMotorCount()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSafe_Server(void*)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[483]"></a>ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, parameters.o(.text._Z9ReadParamjP5SNameP14MAV_PARAM_TYPEPyPbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[484]"></a>SDLog_Ubx(char const*, unsigned short, double)</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdstorage.o(.text._Z9SDLog_UbxPKctd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDLog_Ubx(char const*, unsigned short, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[4c6]"></a>CanMailBox::receiveMail(CanPacket*, double)</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, drv_can.o(.text._ZN10CanMailBox11receiveMailEP9CanPacketd))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = CanMailBox::receiveMail(CanPacket*, double) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_Server(void*)
</UL>

<P><STRONG><a name="[9a]"></a>CanMailBox::CanRxTCB(void*, unsigned int)</STRONG> (Thumb, 266 bytes, Stack size 152 bytes, drv_can.o(.text._ZN10CanMailBox8CanRxTCBEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = CanMailBox::CanRxTCB(void*, unsigned int) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.text.HAL_FDCAN_RxFifo0Callback)
</UL>
<P><STRONG><a name="[4d6]"></a>CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, drv_can.o(.text._ZN10CanMailBoxC2EtP5CanIdt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_DriverRun()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_DriverRun()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_DriverRun()
</UL>

<P><STRONG><a name="[6d4]"></a>CanMailBox::CanMailBox__sub_object(unsigned short, CanId*, unsigned short)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, drv_can.o(.text._ZN10CanMailBoxC2EtP5CanIdt), UNUSED)

<P><STRONG><a name="[211]"></a>M10_RCCalib::main_func(void*, unsigned int)</STRONG> (Thumb, 7700 bytes, Stack size 1184 bytes, m10_rccalib.o(.text._ZN11M10_RCCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2808 + Unknown Stack Size
<LI>Call Chain = M10_RCCalib::main_func(void*, unsigned int) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV11M10_RCCalib)
</UL>
<P><STRONG><a name="[507]"></a>M30_AttCtrl::M30_AttCtrl()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M30_AttCtrl::M30_AttCtrl() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[6d5]"></a>M30_AttCtrl::M30_AttCtrl__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m30_attctrl.o(.text._ZN11M30_AttCtrlC2Ev), UNUSED)

<P><STRONG><a name="[12a]"></a>M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)</STRONG> (Thumb, 1176 bytes, Stack size 48 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrl15get_MavlinkModeE11ModeFuncCfg8ReceiverPhP5AFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = M32_PosCtrl::get_MavlinkMode(ModeFuncCfg, Receiver, unsigned char*, AFunc*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
</UL>
<P><STRONG><a name="[129]"></a>M32_PosCtrl::main_func(void*, unsigned int)</STRONG> (Thumb, 36336 bytes, Stack size 2904 bytes, m32_posctrl.o(.text._ZN11M32_PosCtrl9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 7536 + Unknown Stack Size
<LI>Call Chain = M32_PosCtrl::main_func(void*, unsigned int) &rArr; process_AuxFuncs(Receiver const*, double) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_MSafeCtrl()
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeRAM_restoreWpInf(double)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restoreWpInf(double)
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_RestoreWpInf_needStore()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prestoreMissionState()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TurnRaius(double, double)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1bySpeed(float)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhotoAsync(double)
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_System_Run_Time()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosZRAVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosGlobalVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosRelativeVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccZ_OffBoard(double, double, double)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLockFast(double, double)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideCircleFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double, double, double, double*)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackVel(double*, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIME::get_pass_time() const
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_InflightCmd(unsigned short, double*)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_NavCmd(unsigned short, double, unsigned char, double*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTankRMPercent()
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CrashedState()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvTargetsCount()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttCtrlCfg()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m32_posctrl.o(.rodata._ZTV11M32_PosCtrl)
</UL>
<P><STRONG><a name="[213]"></a>M13_MagCalib::main_func(void*, unsigned int)</STRONG> (Thumb, 7408 bytes, Stack size 1912 bytes, m13_magcalib.o(.text._ZN12M13_MagCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536 + Unknown Stack Size
<LI>Call Chain = M13_MagCalib::main_func(void*, unsigned int) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Matrix_Inverse(double*, unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m13_magcalib.o(.rodata._ZTV12M13_MagCalib)
</UL>
<P><STRONG><a name="[51d]"></a>M13_MagCalib::M13_MagCalib()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M13_MagCalib::M13_MagCalib() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[6d6]"></a>M13_MagCalib::M13_MagCalib__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m13_magcalib.o(.text._ZN12M13_MagCalibC2Ev), UNUSED)

<P><STRONG><a name="[51e]"></a>M11_TempCalib::M11_TempCalib()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M11_TempCalib::M11_TempCalib() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[6d7]"></a>M11_TempCalib::M11_TempCalib__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m11_tempcalib.o(.text._ZN13M11_TempCalibC2Ev), UNUSED)

<P><STRONG><a name="[21a]"></a>ESO_AngularRate::run(double, bool)</STRONG> (Thumb, 7544 bytes, Stack size 800 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate3runEdb))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRate::run(double, bool) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::run(double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[520]"></a>ESO_AngularRate::init_ft()</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate7init_ftEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = ESO_AngularRate::init_ft() &rArr; __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>

<P><STRONG><a name="[219]"></a>ESO_AngularRate::update_u(double)</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN15ESO_AngularRate8update_uEd))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[521]"></a>Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double)</STRONG> (Thumb, 1136 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._ZN16Filter_Butter_LP20set_cutoff_frequencyEhdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_Init()
</UL>

<P><STRONG><a name="[12d]"></a>M14_HorizonCalib::main_func(void*, unsigned int)</STRONG> (Thumb, 4976 bytes, Stack size 1080 bytes, m14_horizoncalib.o(.text._ZN16M14_HorizonCalib9main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 2704 + Unknown Stack Size
<LI>Call Chain = M14_HorizonCalib::main_func(void*, unsigned int) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m14_horizoncalib.o(.rodata._ZTV16M14_HorizonCalib)
</UL>
<P><STRONG><a name="[3d6]"></a>parametersIterator::setInAvailable()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, parameters.o(.text._ZN18parametersIterator14setInAvailableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = parametersIterator::setInAvailable() &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[524]"></a>parametersIterator::reset()</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, parameters.o(.text._ZN18parametersIterator5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = parametersIterator::reset() &rArr; operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3db]"></a>parametersIterator::operator++()</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, parameters.o(.text._ZN18parametersIteratorppEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = parametersIterator::operator++()
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[137]"></a>ESO_AngularRateHeli::load_LearnKs(double*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN19ESO_AngularRateHeli12load_LearnKsEPd))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[133]"></a>ESO_AngularRateHeli::update_u(double)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZN19ESO_AngularRateHeli8update_uEd))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[327]"></a>ESO_h::run(double)</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, ms_attitude.o(.text._ZN5ESO_h3runEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ESO_h::run(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
</UL>

<P><STRONG><a name="[42b]"></a>ESO_h::init(double, double, double, double, double)</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, ctrl_attitude.o(.text._ZN5ESO_h4initEddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = ESO_h::init(double, double, double, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[2d0]"></a>SName::SName__sub_object(char const*)</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, main.o(.text._ZN5SNameC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFence(unsigned short, FenceInf*, double)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Fences()
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Missions()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MSafe()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry2_Voltage()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Voltage()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Current()
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_IRQHandlerTCB
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandlerTCB
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK_DAO_Base()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RTK()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_GPS()
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCSbus()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_RCPPM()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeSaveBodyOffset(unsigned char, double)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeAddBodyOffset(unsigned char, vector3&lang;double&rang;, bool, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TFMini_DriverRun()
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtMag.cpp
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_InternalMag.cpp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_DriverRun()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_DriverInit(Port, unsigned int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DriverInit(Port, unsigned int)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_DriverInit(Port, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_GL9306_DriverInit(Port, unsigned int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC306_DriverInit(Port, unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC302_DriverInit(Port, unsigned int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_JL32xx_DriverInit(Port, unsigned int)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_DriverInit(Port, unsigned int)
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_AuxFuncs()
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::M35_Auto1()
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::M32_PosCtrl()
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M30_AttCtrl::M30_AttCtrl()
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::M14_HorizonCalib()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::M13_MagCalib()
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::M12_AccCalib()
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::M11_TempCalib()
<LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::M10_RCCalib()
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;storeRAM_restoreWpInf(double)
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_restoreWpInf(double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg69_MANUAL_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAuxPWM(float, unsigned char)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd11_MAV_CMD_WRITE_WGA(unsigned char, __mavlink_message const*)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_DeInit()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_Init()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Position()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Ctrl_Attitude()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTrigTCB(void*, unsigned int)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1bySpeed(float)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[33c]"></a>TD4_SL::track3(double, double)</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, ctrl_position.o(.text._ZN6TD4_SL6track3Edd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TD4_SL::track3(double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[330]"></a>TD4_SL::track4(double, double, double, double, double, double)</STRONG> (Thumb, 562 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._ZN6TD4_SL6track4Edddddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TD4_SL::track4(double, double, double, double, double, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[32d]"></a>TD3_2DSL::track3(vector2&lang;double&rang;, double)</STRONG> (Thumb, 1016 bytes, Stack size 152 bytes, ctrl_attitude.o(.text._ZN8TD3_2DSL6track3E7vector2IdEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TD3_2DSL::track3(vector2&lang;double&rang;, double) &rArr; __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[228]"></a>M35_Auto1::main_func(void*, unsigned int)</STRONG> (Thumb, 4008 bytes, Stack size 856 bytes, m35_auto1.o(.text._ZN9M35_Auto19main_funcEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552 + Unknown Stack Size
<LI>Call Chain = M35_Auto1::main_func(void*, unsigned int) &rArr; Position_Control_Enable(double) &rArr; Altitude_Control_Enable(double) &rArr; Attitude_Control_Enable(double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeReceiveMsg(ModeMsg*, double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CrashedState()
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RcButtonZone(double, unsigned char)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttCtrlCfg()
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m35_auto1.o(.rodata._ZTV9M35_Auto1)
</UL>
<P><STRONG><a name="[525]"></a>M35_Auto1::M35_Auto1()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = M35_Auto1::M35_Auto1() &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ModeRegister(Mode_Base*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
</UL>

<P><STRONG><a name="[6d8]"></a>M35_Auto1::M35_Auto1__sub_object()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, m35_auto1.o(.text._ZN9M35_Auto1C2Ev), UNUSED)

<P><STRONG><a name="[17e]"></a>RingQueue&lang;vector2&lang;double&rang;&rang;::~RingQueue__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ms_attitude.o(.text._ZN9RingQueueI7vector2IdEED2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RingQueue&lang;vector2&lang;double&rang;&rang;::~RingQueue__sub_object() &rArr; operator delete[](void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp)
</UL>
<P><STRONG><a name="[344]"></a>Quaternion::rotate(vector3&lang;double&rang;) const</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, sensors.o(.text._ZNK10Quaternion6rotateE7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Quaternion::rotate(vector3&lang;double&rang;) const
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
</UL>

<P><STRONG><a name="[21b]"></a>ESO_AngularRate::get_ftFreqs() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate11get_ftFreqsEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[227]"></a>ESO_AngularRate::get_EsMainPower() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate15get_EsMainPowerEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[21e]"></a>ESO_AngularRate::get_EsAngularRate() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate17get_EsAngularRateEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[225]"></a>ESO_AngularRate::get_EsDisturbanceD() const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate18get_EsDisturbanceDEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[223]"></a>ESO_AngularRate::get_EsDisturbanceLearn() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate22get_EsDisturbanceLearnEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[220]"></a>ESO_AngularRate::get_EsDisturbanceFilted() const</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate23get_EsDisturbanceFiltedEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[222]"></a>ESO_AngularRate::get_EsDisturbanceZFilted() const</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate24get_EsDisturbanceZFiltedEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[217]"></a>ESO_AngularRate::get_b() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK15ESO_AngularRate5get_bEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV15ESO_AngularRate)
</UL>
<P><STRONG><a name="[139]"></a>ESO_AngularRateHeli::get_EsDisturbance() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli17get_EsDisturbanceEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13f]"></a>ESO_AngularRateHeli::get_EsDisturbanceD() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli18get_EsDisturbanceDEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13b]"></a>ESO_AngularRateHeli::get_EsDisturbanceZ() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli18get_EsDisturbanceZEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[13d]"></a>ESO_AngularRateHeli::get_EsDisturbanceLearn() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli22get_EsDisturbanceLearnEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[140]"></a>ESO_AngularRateHeli::get_EsAngularAcceleration() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli25get_EsAngularAccelerationEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[130]"></a>ESO_AngularRateHeli::get_T() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_TEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[132]"></a>ESO_AngularRateHeli::get_u() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZNK19ESO_AngularRateHeli5get_uEv))
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.rodata._ZTV19ESO_AngularRateHeli)
</UL>
<P><STRONG><a name="[39b]"></a>SName::operator&lang;(SName const&) const</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, parameters.o(.text._ZNK5SNameltERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SName::operator&lang;(SName const&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)
</UL>

<P><STRONG><a name="[4bc]"></a>void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 674 bytes, Stack size 20 bytes, commulink.o(.text._ZNSt3__213__tree_removeB8nn190000IPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPosSensorMsg(unsigned char, unsigned char, double)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[180]"></a>std::__2::map&lang;SName, ReceiverSync, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ReceiverSync&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, receiver.o(.text._ZNSt3__23mapI5SName12ReceiverSyncNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::map&lang;SName, ReceiverSync, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ReceiverSync&rang;&rang;&rang;::~map__sub_object[abi:nn190000]() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.text._GLOBAL__sub_I_Receiver.cpp)
</UL>
<P><STRONG><a name="[a0]"></a>std::__2::map&lang;SName, Param, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, Param&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, parameters.o(.text._ZNSt3__23mapI5SName5ParamNS_4lessIS1_EENS_9allocatorINS_4pairIKS1_S2_EEEEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::map&lang;SName, Param, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, Param&rang;&rang;&rang;::~map__sub_object[abi:nn190000]() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.text._GLOBAL__sub_I_Parameters.cpp)
</UL>
<P><STRONG><a name="[a1]"></a>std::__2::map&lang;unsigned int, CanMailBox*, std::__2::less&lang;unsigned int&rang;, std::__2::allocator&lang;std::__2::pair&lang;unsigned int const, CanMailBox*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, drv_can.o(.text._ZNSt3__23mapIjP10CanMailBoxNS_4lessIjEENS_9allocatorINS_4pairIKjS2_EEEEED2B8nn190000Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::__2::map&lang;unsigned int, CanMailBox*, std::__2::less&lang;unsigned int&rang;, std::__2::allocator&lang;std::__2::pair&lang;unsigned int const, CanMailBox*&rang;&rang;&rang;::~map__sub_object[abi:nn190000]() &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.text._GLOBAL__sub_I_drv_Can.cpp)
</UL>
<P><STRONG><a name="[3c5]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, receiver.o(.text._ZNSt3__26__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&) &rArr; operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>

<P><STRONG><a name="[526]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, receiver.o(.text._ZNSt3__26__treeINS_12__value_typeI5SName12ReceiverSyncEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::map&lang;SName, ReceiverSync, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, ReceiverSync&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[3e1]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__26__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S3_EEEEENSD_INS_15__tree_iteratorIS4_PNS_11__tree_nodeIS4_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&) &rArr; operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
</UL>

<P><STRONG><a name="[527]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, parameters.o(.text._ZNSt3__26__treeINS_12__value_typeI5SName5ParamEENS_19__map_value_compareIS2_S4_NS_4lessIS2_EELb1EEENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::map&lang;SName, Param, std::__2::less&lang;SName&rang;, std::__2::allocator&lang;std::__2::pair&lang;SName const, Param&rang;&rang;&rang;::~map__sub_object[abi:nn190000]()
</UL>

<P><STRONG><a name="[529]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__26__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_P18VolatileParamGroupEEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&) &rArr; operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
</UL>

<P><STRONG><a name="[3e0]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, parameters.o(.text._ZNSt3__26__treeINS_12__value_typeI5SNameP10ParamGroupEENS_19__map_value_compareIS2_S5_NS_4lessIS2_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS2_JNS_4pairIS2_S4_EEEEENSE_INS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEEiEEbEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&) &rArr; operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::operator&lang;(SName const&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
</UL>

<P><STRONG><a name="[52a]"></a>std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, commulink.o(.text._ZNSt3__26__treeINS_12__value_typeIt5SDMsgEENS_19__map_value_compareItS3_NS_4lessItEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_array_dtor
</UL>

<P><STRONG><a name="[2ea]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::~parametersIterator()
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::setInAvailable()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*)
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_Server(void*)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_Server(void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_Server(void*)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_Server(void*)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_Server(void*)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCMInput_Server(void*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_Server(void*)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_Server(void*)
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_Server(void*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_Server(void*)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_Server(void*)
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_Server(void*)
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_Server(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_Server(void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_Server(void*)
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::__map_value_compare&lang;unsigned int, std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, std::__2::less&lang;unsigned int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned int, CanMailBox*&rang;, void*&rang;*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPosSensorMsg(unsigned char, unsigned char, double)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::~ESO_AngularRateHeli__deallocating()
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::~ESO_AngularRate__deallocating()
</UL>

<P><STRONG><a name="[2ec]"></a>operator new(unsigned int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, basic.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator new(unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::reset()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, Param&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, Param&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, Param&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, Param&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, Param&rang;&rang;(SName const&, std::__2::pair&lang;SName, Param&rang;&&)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, ParamGroup*&rang;&&)
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ParamGroup*&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ParamGroup*&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&rang;(SName const&, std::__2::pair&lang;SName, VolatileParamGroup*&rang;&&)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::__map_value_compare&lang;SName, std::__2::__value_type&lang;SName, ReceiverSync&rang;, std::__2::less&lang;SName&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;SName, ReceiverSync&rang;&rang;&rang;::__emplace_unique_key_args&lang;SName, std::__2::pair&lang;SName, ReceiverSync&rang;&rang;(SName const&, std::__2::pair&lang;SName, ReceiverSync&rang;&&)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_TFMini_DriverRun()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_BMS_TATTU_DriverRun()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_MR72_Av_DriverRun()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_QOAR1271_Av_DriverRun()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Radar_TR60_AH_DriverRun()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADM001_DriverInit(Port, unsigned int)
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCMInput_DriverInit(Port, unsigned int)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;US100_DriverInit(Port, unsigned int)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_Viewlink_DriverInit(Port, unsigned int)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_DriverInit(Port, unsigned int)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_INYYO_DriverInit(Port, unsigned int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMiniAv_DriverInit(Port, unsigned int)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UWB_LinkTrack_DriverInit(Port, unsigned int)
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_ZR10_DriverInit(Port, unsigned int)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRA24_DriverInit(Port, unsigned int)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISTRA24_DriverInit(Port, unsigned int)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MR72_DriverInit(Port, unsigned int)
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_GL9306_DriverInit(Port, unsigned int)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC306_DriverInit(Port, unsigned int)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_LC302_DriverInit(Port, unsigned int)
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OpticalFlow_JL32xx_DriverInit(Port, unsigned int)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_DriverInit(Port, unsigned int)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_DriverInit(Port, unsigned int)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFMini_DriverInit(Port, unsigned int)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[142]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_virtual.cpp.o(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 1]<UL><LI> m10_rccalib.o(.rodata._ZTV9Mode_Base)
</UL>
<P><STRONG><a name="[52d]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[146]"></a>cdcd_control_request</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_control_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cdcd_control_request &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[143]"></a>cdcd_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usb_composite.o(.text.cdcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cdcd_init
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[144]"></a>cdcd_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, usb_composite.o(.text.cdcd_reset))
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[533]"></a>dcd_event_handler</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, usb_composite.o(.text.dcd_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_handler
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_read10_cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[577]"></a>disk_initialize</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, diskio.o(.text.disk_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[578]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diskio.o(.text.disk_ioctl))
<BR><BR>[Called By]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[53a]"></a>disk_write</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, diskio.o(.text.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[3fd]"></a>f_chmod</STRONG> (Thumb, 202 bytes, Stack size 120 bytes, ff.o(.text.f_chmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = f_chmod &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[40d]"></a>f_close</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_close &rArr; f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[409]"></a>f_lseek</STRONG> (Thumb, 824 bytes, Stack size 48 bytes, ff.o(.text.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = f_lseek &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[3f8]"></a>f_opendir</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_alloc_info
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[402]"></a>f_puts</STRONG> (Thumb, 92 bytes, Stack size 112 bytes, ff.o(.text.f_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = f_puts &rArr; putc_bfd &rArr; f_write &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc_bfd
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[3f7]"></a>f_stat</STRONG> (Thumb, 140 bytes, Stack size 112 bytes, ff.o(.text.f_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[400]"></a>f_sync</STRONG> (Thumb, 734 bytes, Stack size 120 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = f_sync &rArr; load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[4f0]"></a>f_truncate</STRONG> (Thumb, 372 bytes, Stack size 24 bytes, ff.o(.text.f_truncate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_truncate &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[659]"></a>ff_oem2uni</STRONG> (Thumb, 412 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_oem2uni))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_oem2uni
</UL>
<BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[548]"></a>ff_req_grant</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ffsystem.o(.text.ff_req_grant))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[657]"></a>ff_uni2oem</STRONG> (Thumb, 438 bytes, Stack size 8 bytes, ffunicode.o(.text.ff_uni2oem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_uni2oem
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[541]"></a>ff_wtoupper</STRONG> (Thumb, 196 bytes, Stack size 0 bytes, ffunicode.o(.text.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[281]"></a>getFlashPageSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, drv_flash.o(.text.getFlashPageSize))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_write
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_read
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[48c]"></a>get_RTC_Updated</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timebase.o(.text.get_RTC_Updated))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[551]"></a>get_fattime</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, fatfs.o(.text.get_fattime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = get_fattime &rArr; Get_RTC_Time &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[2dd]"></a>get_is_usb_connected</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, usb_composite.o(.text.get_is_usb_connected))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(char const*, unsigned short, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[55b]"></a>lfs_crc</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lfs_util.o(.text.lfs_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lfs_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>

<P><STRONG><a name="[45e]"></a>lfs_dir_close</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lfs.o(.text.lfs_dir_close))
<BR><BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
</UL>

<P><STRONG><a name="[568]"></a>lfs_file_close</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, lfs.o(.text.lfs_file_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = lfs_file_close &rArr; lfs_file_rawsync &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
</UL>

<P><STRONG><a name="[571]"></a>lfs_file_size</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, lfs.o(.text.lfs_file_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lfs_file_size &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
</UL>

<P><STRONG><a name="[572]"></a>lfs_file_write</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lfs.o(.text.lfs_file_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 792 + Unknown Stack Size
<LI>Call Chain = lfs_file_write &rArr; lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
</UL>

<P><STRONG><a name="[418]"></a>lfs_format</STRONG> (Thumb, 274 bytes, Stack size 120 bytes, lfs.o(.text.lfs_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = lfs_format &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
</UL>

<P><STRONG><a name="[45d]"></a>lfs_remove</STRONG> (Thumb, 320 bytes, Stack size 128 bytes, lfs.o(.text.lfs_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lfs_remove &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
</UL>

<P><STRONG><a name="[419]"></a>lfs_stat</STRONG> (Thumb, 174 bytes, Stack size 80 bytes, lfs.o(.text.lfs_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = lfs_stat &rArr; lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
</UL>

<P><STRONG><a name="[23f]"></a>main</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = main &rArr; init_Basic() &rArr; init_TimeBase() &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Basic()
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[65a]"></a>mscDiskWritten</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sdstorage.o(.text.mscDiskWritten))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[14a]"></a>mscd_reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usb_composite.o(.text.mscd_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = mscd_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_composite.o(.rodata._usbd_driver)
</UL>
<P><STRONG><a name="[57d]"></a>osKernelRunning</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(.text.osKernelRunning))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelRunning
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[57f]"></a>osMessageCreate</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[581]"></a>osMutexCreate</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(.text.osMutexCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMutexCreate &rArr; xQueueCreateMutexStatic &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[583]"></a>osMutexRelease</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexRelease &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>

<P><STRONG><a name="[553]"></a>osMutexWait</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, cmsis_os.o(.text.osMutexWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>

<P><STRONG><a name="[589]"></a>pxPortInitialiseStack</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[408]"></a>sha256_final</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, sha256.o(.text.sha256_final))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sha256_final &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[406]"></a>sha256_update</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sha256.o(.text.sha256_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = sha256_update &rArr; sha256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sha256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[594]"></a>tud_cdc_rx_cb</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_cdc_rx_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tud_cdc_rx_cb &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
</UL>

<P><STRONG><a name="[666]"></a>tud_suspend_cb</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, drv_usb.o(.text.tud_suspend_cb))
<BR><BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
</UL>

<P><STRONG><a name="[2f6]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[66b]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[595]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vApplicationStackOverflowHook &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[5a2]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(.text.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>

<P><STRONG><a name="[58d]"></a>vListInsert</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[3c6]"></a>vPortExitCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
</UL>

<P><STRONG><a name="[52b]"></a>vPortFree</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_init
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
</UL>

<P><STRONG><a name="[66c]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[5a6]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Called By]<UL><LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[5ad]"></a>vQueueAddToRegistry</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[597]"></a>vQueueDelete</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[58e]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3bb]"></a>vTaskDelete</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DriverInit_task(void*)
</UL>

<P><STRONG><a name="[5a3]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[59a]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[598]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[59c]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[59d]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tasks.o(.text.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[576]"></a>vTaskStartScheduler</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58a]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>

<P><STRONG><a name="[27c]"></a>xEventGroupClearBits</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupClearBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xEventGroupClearBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashReadPages
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashProgramPages
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlashEraseSectors
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(unsigned char const*, unsigned short, double, double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(unsigned char const*, unsigned short, double, double)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(unsigned char const*, unsigned short, double, double)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(unsigned char const*, unsigned short, double, double)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(unsigned char const*, unsigned short, double, double)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
</UL>

<P><STRONG><a name="[2d4]"></a>xEventGroupCreate</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, event_groups.o(.text.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_IntIIC.cpp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart8.cpp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart7.cpp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart5.cpp
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart3.cpp
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Uart1.cpp
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Flash()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_Can.cpp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_CRC.cpp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_AuxFuncs.cpp
</UL>

<P><STRONG><a name="[39e]"></a>xEventGroupSetBits</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, event_groups.o(.text.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupSetBitsCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTrigTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[2d5]"></a>xQueueCreateMutex</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_followTarget.cpp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_precLand.cpp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Fences.cpp
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Missions.cpp
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Parameters()
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_InternalStorage()
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_TimeBase()
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_ExtIIC.cpp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_IntIIC.cpp
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart8()
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart7()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart5()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart3()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Uart1()
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_SDMMC()
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverRegister(SName, bool, RC_CONFIG const*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Receiver.cpp
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Sensors()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Sensors.cpp
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexCreate
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_drv_CRC.cpp
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Modes.cpp
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MavlinkCMDProcess.cpp
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ctrl_Main.cpp
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_Avoidance.cpp
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_AuxFuncs.cpp
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Position.cpp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MS_Attitude.cpp
</UL>

<P><STRONG><a name="[2db]"></a>xQueueGenericSend</STRONG> (Thumb, 724 bytes, Stack size 48 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInavailable_followSensor(unsigned int, double)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorYaw(double, bool, double)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AirframeQuatY(Quaternion*, double, double)
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_precLandSensor(precLandSensor*, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveParamGroup(SName, double)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TruncateVolatileParamGroup(SName, unsigned short, double)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveVolatileParamGroup(SName, double)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetVolatileParamGroupParamCount(SName, unsigned short*, double)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, unsigned short, unsigned short, double)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::read(SName*, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VolatileParamGroupRegister(SName, unsigned short, unsigned short, unsigned int)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(char const*, unsigned short, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLPDaemonTaskCall(void (*)(void*, unsigned int), void*, unsigned int, unsigned int)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutexStatic
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getJoyStick(Receiver*, SName*, double)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PositionSensorIncreaseSlamAngle(unsigned char, double const&, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorResetAngleOffset(unsigned char, unsigned int, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeRegister(unsigned char, SName, double, double)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerRegister(unsigned char, SName, double, double)
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryRegister(unsigned char, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToTask(CmdMsg, unsigned short, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanRxTCB(void*, unsigned int)
<LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearGyroOffsetEst(unsigned char, double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryInfo(unsigned char, BatteryInfo*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToSingleCamera(CmdMsg, double)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltFilted(float*, signed char*, double)
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPosSensorMsg(unsigned char, unsigned char, double)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRaw(float*, signed char*, double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_prep_out_transaction
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_AttitudeQuat(Quaternion*, double, double)
</UL>

<P><STRONG><a name="[534]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 344 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xLPDaemonTaskCallFromISR(void (*)(void*, unsigned int), void*, unsigned int, long*)
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerPendFunctionCallFromISR
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
</UL>

<P><STRONG><a name="[585]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, queue.o(.text.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexWait
</UL>

<P><STRONG><a name="[284]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(.text.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_GetFileSize(char const*, char const*, unsigned int*, double)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double)
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_TruncateFile(char const*, char const*, unsigned int, double)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_InternalStorage(double)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_RTC
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(unsigned char const*, unsigned short, double, double)
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart8(double)
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart8(unsigned int, double, double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(unsigned char const*, unsigned short, double, double)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart7(double)
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart7(unsigned int, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(unsigned char const*, unsigned short, double, double)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart5(double)
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart5(unsigned int, double, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(unsigned char const*, unsigned short, double, double)
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart3(double)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart3(unsigned int, double, double)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(unsigned char const*, unsigned short, double, double)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_Uart1(double)
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBaudRate_Uart1(unsigned int, double, double)
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_USBD_VCOM(double)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvTarget(unsigned char, AvoidanceTarget*, double)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRateNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationNC_filted(vector3&lang;double&rang;*, double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LockCtrl(double)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ControlSystem_Task(void*)
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeEnu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTarget3dPoint_RelativeEnu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhotoAsync(double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enter_MSafe(bool, double)
</UL>

<P><STRONG><a name="[5a7]"></a>xStreamBufferGenericCreateStatic</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stream_buffer.o(.text.xStreamBufferGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xStreamBufferGenericCreateStatic &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_SDStorage.cpp
</UL>

<P><STRONG><a name="[2da]"></a>xStreamBufferReceive</STRONG> (Thumb, 494 bytes, Stack size 48 bytes, stream_buffer.o(.text.xStreamBufferReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(unsigned char const*, unsigned short, double, double)
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart8(unsigned char*, unsigned short, double, double)
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(unsigned char const*, unsigned short, double, double)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart7(unsigned char*, unsigned short, double, double)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(unsigned char const*, unsigned short, double, double)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart5(unsigned char*, unsigned short, double, double)
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(unsigned char const*, unsigned short, double, double)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart3(unsigned char*, unsigned short, double, double)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(unsigned char const*, unsigned short, double, double)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Uart1(unsigned char*, unsigned short, double, double)
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxTCB(void*, unsigned int)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_USBD_VCOM(unsigned char*, unsigned short, double, double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdc_write
</UL>

<P><STRONG><a name="[5aa]"></a>xStreamBufferReset</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, stream_buffer.o(.text.xStreamBufferReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = xStreamBufferReset &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart8(double)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart7(double)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart5(double)
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart3(double)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_Uart1(double)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetRx_USBD_VCOM(double)
</UL>

<P><STRONG><a name="[2de]"></a>xStreamBufferSend</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, stream_buffer.o(.text.xStreamBufferSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteMessageToBuffer
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(char const*, unsigned short, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_LocalPositionNed(double)
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_AttitudeQuaternion(double)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart8(unsigned char const*, unsigned short, double, double)
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart7(unsigned char const*, unsigned short, double, double)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart5(unsigned char const*, unsigned short, double, double)
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart3(unsigned char const*, unsigned short, double, double)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Uart1(unsigned char const*, unsigned short, double, double)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_cdc_rx_cb
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_USBD_VCOM(unsigned char const*, unsigned short, double, double)
</UL>

<P><STRONG><a name="[5a4]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[322]"></a>xTaskCreateStatic</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_SDStorage()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_ControlSystem()
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Modes()
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_MS_Main()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_USB()
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_Commulink()
</UL>

<P><STRONG><a name="[395]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Disable(double)
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccXY_OffBoard(double, double, double, double, double)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw_Offboard(double, double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelAccZ_OffBoard(double, double, double)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLockFast(double, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityXY_AngleLimit(double, double, double, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_do_ManualCircleRelative(double, double, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Throttle(double, double)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Enable(double)
</UL>

<P><STRONG><a name="[57e]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelRunning
</UL>

<P><STRONG><a name="[5a8]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tasks.o(.text.xTaskNotifyStateClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskNotifyStateClear
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
</UL>

<P><STRONG><a name="[5a5]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[5ac]"></a>xTaskPriorityInherit</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[5a0]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[259]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[673]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[5b0]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[25b]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5b3]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[5b2]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[5b4]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[32e]"></a>__hardfp_acos</STRONG> (Thumb, 422 bytes, Stack size 72 bytes, acos.o(i.__hardfp_acos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_acos &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[30f]"></a>__hardfp_exp</STRONG> (Thumb, 486 bytes, Stack size 56 bytes, exp.o(i.__hardfp_exp))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __hardfp_exp &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double, double, double, double, double)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track4(double, double)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD3_2DSL::track3(vector2&lang;double&rang;, double)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double, double, double, double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TD4_SL::track3(double, double)
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smooth_kp_2(double, double, double, double, double)
</UL>

<P><STRONG><a name="[502]"></a>__hardfp_pow</STRONG> (Thumb, 2108 bytes, Stack size 192 bytes, pow.o(i.__hardfp_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPL06TCB(void*, unsigned int)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
</UL>

<P><STRONG><a name="[493]"></a>__hardfp_sin</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTK_Server(void*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M35_Auto1::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[2fa]"></a>__hardfp_tan</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tan.o(i.__hardfp_tan))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Position(unsigned char, IMU_Sensor)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude_GyroIntegral(unsigned char, IMU_Sensor)
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double)
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_h::init(double, double, double, double, double)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::run(double, bool)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::run(double, bool)
</UL>

<P><STRONG><a name="[5c0]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 646 bytes, Stack size 144 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[5bc]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[5b7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[5bb]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_tan
<LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_exp
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[678]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[67a]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[5b9]"></a>sqrt</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acos
</UL>

<P><STRONG><a name="[236]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[632]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[6d9]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[22f]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[6da]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[6db]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a2]"></a>LPDaemonTask(void*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, basic.o(.text._ZL12LPDaemonTaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LPDaemonTask(void*) &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> basic.o(.text._Z10init_Basicv)
</UL>
<P><STRONG><a name="[187]"></a>SDS_Task(void*)</STRONG> (Thumb, 4464 bytes, Stack size 20 bytes, sdstorage.o(.text._ZL8SDS_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1924 + Unknown Stack Size
<LI>Call Chain = SDS_Task(void*) &rArr; runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*) &rArr; UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReset
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_Init
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_SD
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_SD
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupOutdatedLogs(short)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.text._Z14init_SDStoragev)
</UL>
<P><STRONG><a name="[641]"></a>cleanupOutdatedLogs(short)</STRONG> (Thumb, 1152 bytes, Stack size 36 bytes, sdstorage.o(.text._ZL19cleanupOutdatedLogss))
<BR><BR>[Stack]<UL><LI>Max Depth = 652 + Unknown Stack Size
<LI>Call Chain = cleanupOutdatedLogs(short) &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
</UL>

<P><STRONG><a name="[635]"></a>runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*)</STRONG> (Thumb, 1592 bytes, Stack size 296 bytes, sdstorage.o(.text._ZL13runParamCheckR3FILbRbS0_PcPt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = runParamCheck(FIL&, bool, bool&, FIL&, char*, unsigned short*) &rArr; UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_gets
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDS_Task(void*)
</UL>

<P><STRONG><a name="[14f]"></a>_GLOBAL__sub_I_SDStorage.cpp</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, sdstorage.o(.text._GLOBAL__sub_I_SDStorage.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _GLOBAL__sub_I_SDStorage.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferGenericCreateStatic
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdstorage.o(.init_array)
</UL>
<P><STRONG><a name="[150]"></a>_GLOBAL__sub_I_Parameters.cpp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, parameters.o(.text._GLOBAL__sub_I_Parameters.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_Parameters.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> parameters.o(.init_array)
</UL>
<P><STRONG><a name="[151]"></a>_GLOBAL__sub_I_Missions.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, missions.o(.text._GLOBAL__sub_I_Missions.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Missions.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> missions.o(.init_array)
</UL>
<P><STRONG><a name="[152]"></a>_GLOBAL__sub_I_Fences.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fences.o(.text._GLOBAL__sub_I_Fences.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Fences.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> fences.o(.init_array)
</UL>
<P><STRONG><a name="[153]"></a>_GLOBAL__sub_I_precLand.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, precland.o(.text._GLOBAL__sub_I_precLand.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_precLand.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> precland.o(.init_array)
</UL>
<P><STRONG><a name="[154]"></a>_GLOBAL__sub_I_followTarget.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, followtarget.o(.text._GLOBAL__sub_I_followTarget.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_followTarget.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> followtarget.o(.init_array)
</UL>
<P><STRONG><a name="[2c1]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[2c2]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[2c4]"></a>SDMMC_GetCmdResp1</STRONG> (Thumb, 406 bytes, Stack size 0 bytes, stm32h7xx_ll_sdmmc.o(.text.SDMMC_GetCmdResp1))
<BR><BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStatusRegister
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendStatus
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBusWidth
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSelDesel
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdStopTransfer
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteMultiBlock
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdWriteSingleBlock
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadMultiBlock
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdReadSingleBlock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
</UL>

<P><STRONG><a name="[2a7]"></a>SD_FindSCR</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, stm32h7xx_hal_sd.o(.text.SD_FindSCR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SD_FindSCR &rArr; SDMMC_ConfigData
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdSendSCR
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdAppCommand
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_CmdBlockLength
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ConfigData
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDMMC_ReadFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SD_ConfigWideBusOperation
</UL>

<P><STRONG><a name="[58f]"></a>prvUnlockQueue</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[592]"></a>prvWriteMessageToBuffer</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, stream_buffer.o(.text.prvWriteMessageToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvWriteMessageToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSend
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferSendFromISR
</UL>

<P><STRONG><a name="[587]"></a>prvInitialiseNewTask</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvInitialiseNewTask &rArr; __aeabi_memset4 &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[59f]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[59b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[100]"></a>prvIdleTask</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[101]"></a>prvTimerTask</STRONG> (Thumb, 862 bytes, Stack size 32 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvTimerTask &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[ff]"></a>prvTaskExitError</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[66d]"></a>vPortEnableVFP</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[66e]"></a>prvPortStartFirstTask</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4dd]"></a>map_projection_project(Map_Projection const*, double, double, double*, double*)</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, sensors.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = map_projection_project(Map_Projection const*, double, double, double*, double*) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
</UL>

<P><STRONG><a name="[155]"></a>_GLOBAL__sub_I_Sensors.cpp</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sensors.o(.text._GLOBAL__sub_I_Sensors.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Sensors.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sensors.o(.init_array)
</UL>
<P><STRONG><a name="[156]"></a>_GLOBAL__sub_I_Receiver.cpp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, receiver.o(.text._GLOBAL__sub_I_Receiver.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _GLOBAL__sub_I_Receiver.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> receiver.o(.init_array)
</UL>
<P><STRONG><a name="[3c9]"></a>SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, drv_sensors.o(.text._ZL26SPI1_TransmitReceive_StartPKhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI1_TransmitReceive_Start(unsigned char const*, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Sensors()
</UL>

<P><STRONG><a name="[172]"></a>bmi088GyroTCB(void*, unsigned int)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, drv_sensors.o(.text._ZL13bmi088GyroTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = bmi088GyroTCB(void*, unsigned int) &rArr; IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[173]"></a>SPL06TCB(void*, unsigned int)</STRONG> (Thumb, 424 bytes, Stack size 24 bytes, drv_sensors.o(.text._ZL8SPL06TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = SPL06TCB(void*, unsigned int) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_y()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_x()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[174]"></a>bmi088AccelTCB(void*, unsigned int)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, drv_sensors.o(.text._ZL14bmi088AccelTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = bmi088AccelTCB(void*, unsigned int) &rArr; IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[175]"></a>icm20689TCB(void*, unsigned int)</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, drv_sensors.o(.text._ZL11icm20689TCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = icm20689TCB(void*, unsigned int) &rArr; IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUAceelUpdate(unsigned char)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Notify_IMUGyroUpdate(unsigned char)
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUAccelerometerUpdateTC(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_sensors.o(.text.DMA1_Stream1_IRQHandler)
</UL>
<P><STRONG><a name="[ab]"></a>usb_device_task(void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, drv_usb.o(.text._ZL15usb_device_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = usb_device_task(void*) &rArr; tud_task &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_task
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tusb_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_usb.o(.text._Z12init_drv_USBv)
</UL>
<P><STRONG><a name="[17a]"></a>TxTCB(void*, unsigned int)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_uart1.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TxTCB(void*, unsigned int) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.text.USART1_IRQHandler)
</UL>
<P><STRONG><a name="[157]"></a>_GLOBAL__sub_I_drv_Uart1.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart1.o(.text._GLOBAL__sub_I_drv_Uart1.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Uart1.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart1.o(.init_array)
</UL>
<P><STRONG><a name="[9c]"></a>TxTCB(void*, unsigned int)</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, drv_uart3.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TxTCB(void*, unsigned int) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.text.USART3_IRQHandler)
</UL>
<P><STRONG><a name="[158]"></a>_GLOBAL__sub_I_drv_Uart3.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart3.o(.text._GLOBAL__sub_I_drv_Uart3.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Uart3.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart3.o(.init_array)
</UL>
<P><STRONG><a name="[178]"></a>TxTCB(void*, unsigned int)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, drv_uart5.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TxTCB(void*, unsigned int) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.text.UART5_IRQHandler)
</UL>
<P><STRONG><a name="[159]"></a>_GLOBAL__sub_I_drv_Uart5.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart5.o(.text._GLOBAL__sub_I_drv_Uart5.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Uart5.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart5.o(.init_array)
</UL>
<P><STRONG><a name="[9b]"></a>TxTCB(void*, unsigned int)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, drv_uart7.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TxTCB(void*, unsigned int) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.text.UART7_IRQHandler)
</UL>
<P><STRONG><a name="[15a]"></a>_GLOBAL__sub_I_drv_Uart7.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart7.o(.text._GLOBAL__sub_I_drv_Uart7.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Uart7.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart7.o(.init_array)
</UL>
<P><STRONG><a name="[179]"></a>TxTCB(void*, unsigned int)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, drv_uart8.o(.text._ZL5TxTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TxTCB(void*, unsigned int) &rArr; xStreamBufferReceive &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xStreamBufferReceive
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.text.UART8_IRQHandler)
</UL>
<P><STRONG><a name="[15b]"></a>_GLOBAL__sub_I_drv_Uart8.cpp</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, drv_uart8.o(.text._GLOBAL__sub_I_drv_Uart8.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Uart8.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uart8.o(.init_array)
</UL>
<P><STRONG><a name="[15c]"></a>_GLOBAL__sub_I_drv_IntIIC.cpp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_intiic.o(.text._GLOBAL__sub_I_drv_IntIIC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_drv_IntIIC.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_intiic.o(.init_array)
</UL>
<P><STRONG><a name="[15d]"></a>_GLOBAL__sub_I_drv_ExtIIC.cpp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_extiic.o(.text._GLOBAL__sub_I_drv_ExtIIC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_drv_ExtIIC.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extiic.o(.init_array)
</UL>
<P><STRONG><a name="[15e]"></a>_GLOBAL__sub_I_drv_ADC.cpp</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, drv_adc.o(.text._GLOBAL__sub_I_drv_ADC.cpp))
<BR>[Address Reference Count : 1]<UL><LI> drv_adc.o(.init_array)
</UL>
<P><STRONG><a name="[62d]"></a>crc_calc_start(CRC_Cfg const&, unsigned int, bool)</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, drv_crc.o(.text._ZL14crc_calc_startRK7CRC_Cfgjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc_calc_start(CRC_Cfg const&, unsigned int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
</UL>

<P><STRONG><a name="[62e]"></a>calc_crcResult(CRC_Cfg const&, unsigned int*)</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, drv_crc.o(.text._ZL14calc_crcResultRK7CRC_CfgPj))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
</UL>

<P><STRONG><a name="[62f]"></a>calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool)</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, drv_crc.o(.text._ZL8calc_crcRK7CRC_CfgPKhtPjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = calc_crc(CRC_Cfg const&, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool) &rArr; xEventGroupWaitBits &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupClearBits
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
</UL>

<P><STRONG><a name="[15f]"></a>_GLOBAL__sub_I_drv_CRC.cpp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, drv_crc.o(.text._GLOBAL__sub_I_drv_CRC.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_drv_CRC.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_crc.o(.init_array)
</UL>
<P><STRONG><a name="[160]"></a>_GLOBAL__sub_I_drv_Can.cpp</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, drv_can.o(.text._GLOBAL__sub_I_drv_Can.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _GLOBAL__sub_I_drv_Can.cpp &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can.o(.init_array)
</UL>
<P><STRONG><a name="[198]"></a>TFMini_DriverInit(Port, unsigned int)</STRONG> (Thumb, 192 bytes, Stack size 72 bytes, drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = TFMini_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfmini.o(.text._Z15init_drv_TFMiniv)
</UL>
<P><STRONG><a name="[1b7]"></a>TFMini_Server(void*)</STRONG> (Thumb, 320 bytes, Stack size 48 bytes, drv_tfmini.o(.text._ZL13TFMini_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = TFMini_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfmini.o(.text._ZL17TFMini_DriverInit4Portj)
</UL>
<P><STRONG><a name="[186]"></a>GPS_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_gps.o(.text._ZL14GPS_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GPS_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text._Z12init_drv_GPSv)
</UL>
<P><STRONG><a name="[e4]"></a>GPS_Server(void*)</STRONG> (Thumb, 5144 bytes, Stack size 2416 bytes, drv_gps.o(.text._ZL10GPS_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3536 + Unknown Stack Size
<LI>Call Chain = GPS_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_RTC
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_RTC
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RTC_Updated
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps.o(.text._ZL14GPS_DriverInit4Portj)
</UL>
<P><STRONG><a name="[cb]"></a>GPS_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_gps_nmea.o(.text._ZL14GPS_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GPS_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps_nmea.o(.text._Z17init_drv_GPS_nmeav)
</UL>
<P><STRONG><a name="[1b1]"></a>GPS_Server(void*)</STRONG> (Thumb, 6168 bytes, Stack size 1544 bytes, drv_gps_nmea.o(.text._ZL10GPS_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664 + Unknown Stack Size
<LI>Call Chain = GPS_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NEMA_Parse(NMEA_GPS_State_Machine*, unsigned char*, unsigned char)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_gps_nmea.o(.text._ZL14GPS_DriverInit4Portj)
</UL>
<P><STRONG><a name="[486]"></a>NEMA_Parse(NMEA_GPS_State_Machine*, unsigned char*, unsigned char)</STRONG> (Thumb, 468 bytes, Stack size 16 bytes, drv_gps_nmea.o(.text._ZL10NEMA_ParseP22NMEA_GPS_State_MachinePhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NEMA_Parse(NMEA_GPS_State_Machine*, unsigned char*, unsigned char) &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Server(void*)
</UL>

<P><STRONG><a name="[a4]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_rtk.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk.o(.text._Z12init_drv_RTKv)
</UL>
<P><STRONG><a name="[e6]"></a>RTK_Server(void*)</STRONG> (Thumb, 4128 bytes, Stack size 2424 bytes, drv_rtk.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_RTC
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_RTC
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RTC_Updated
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[19f]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_rtk_track.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_track.o(.text._Z18init_drv_RTK_Trackv)
</UL>
<P><STRONG><a name="[1b2]"></a>RTK_Server(void*)</STRONG> (Thumb, 4552 bytes, Stack size 2440 bytes, drv_rtk_track.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3560 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_RTC
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_RTC
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RTC_Updated
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_track.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[d8]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_rtk_dao_base.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_dao_base.o(.text._Z21init_drv_RTK_DAO_Basev)
</UL>
<P><STRONG><a name="[1b3]"></a>RTK_Server(void*)</STRONG> (Thumb, 4400 bytes, Stack size 2448 bytes, drv_rtk_dao_base.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3568 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2LocalTime
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTimeZone
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnLock_RTC
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lock_RTC
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_RTC_Updated
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_dao_base.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[d9]"></a>GPS_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_rtk_dao_move.o(.text._ZL14GPS_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = GPS_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_dao_move.o(.text._Z21init_drv_RTK_DAO_Movev)
</UL>
<P><STRONG><a name="[e5]"></a>GPS_Server(void*)</STRONG> (Thumb, 4016 bytes, Stack size 2424 bytes, drv_rtk_dao_move.o(.text._ZL10GPS_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 3544 + Unknown Stack Size
<LI>Call Chain = GPS_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtk_dao_move.o(.text._ZL14GPS_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1ab]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_mosaxicx5.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mosaxicx5.o(.text._Z22init_drv_RTK_MosaxicX5v)
</UL>
<P><STRONG><a name="[e7]"></a>RTK_Server(void*)</STRONG> (Thumb, 2888 bytes, Stack size 20 bytes, drv_mosaxicx5.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mosaxicx5.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[da]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_mosaxicx6.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mosaxicx6.o(.text._Z22init_drv_RTK_MosaxicX6v)
</UL>
<P><STRONG><a name="[1b4]"></a>RTK_Server(void*)</STRONG> (Thumb, 3288 bytes, Stack size 20 bytes, drv_mosaxicx6.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1140 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mosaxicx6.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1b0]"></a>OpticalFlow_JL32xx_DriverInit(Port, unsigned int)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_JL32xx_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_jl32xx.o(.text._Z27init_drv_OpticalFlow_JL32xxv)
</UL>
<P><STRONG><a name="[f8]"></a>OpticalFlow_Server(void*)</STRONG> (Thumb, 688 bytes, Stack size 176 bytes, drv_opticalflow_jl32xx.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_Server(void*) &rArr; PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_jl32xx.o(.text._ZL29OpticalFlow_JL32xx_DriverInit4Portj)
</UL>
<P><STRONG><a name="[df]"></a>OpticalFlow_LC302_DriverInit(Port, unsigned int)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_LC302_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc302.o(.text._Z26init_drv_OpticalFlow_LC302v)
</UL>
<P><STRONG><a name="[1c2]"></a>OpticalFlow_Server(void*)</STRONG> (Thumb, 688 bytes, Stack size 152 bytes, drv_opticalflow_lc302.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_Server(void*) &rArr; PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc302.o(.text._ZL28OpticalFlow_LC302_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1af]"></a>OpticalFlow_LC306_DriverInit(Port, unsigned int)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_LC306_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc306.o(.text._Z26init_drv_OpticalFlow_LC306v)
</UL>
<P><STRONG><a name="[f7]"></a>OpticalFlow_Server(void*)</STRONG> (Thumb, 880 bytes, Stack size 200 bytes, drv_opticalflow_lc306.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_Server(void*) &rArr; PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_lc306.o(.text._ZL28OpticalFlow_LC306_DriverInit4Portj)
</UL>
<P><STRONG><a name="[e2]"></a>OpticalFlow_GL9306_DriverInit(Port, unsigned int)</STRONG> (Thumb, 184 bytes, Stack size 72 bytes, drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_GL9306_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_gl9306.o(.text._Z27init_drv_OpticalFlow_GL9306v)
</UL>
<P><STRONG><a name="[1c4]"></a>OpticalFlow_Server(void*)</STRONG> (Thumb, 856 bytes, Stack size 440 bytes, drv_opticalflow_gl9306.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_Server(void*) &rArr; PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_opticalflow_gl9306.o(.text._ZL29OpticalFlow_GL9306_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1a5]"></a>MR72_DriverInit(Port, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_mr72_uartav.o(.text._ZL15MR72_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MR72_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mr72_uartav.o(.text._Z20init_drv_MR72_UartAvv)
</UL>
<P><STRONG><a name="[1b6]"></a>MR72_Server(void*)</STRONG> (Thumb, 472 bytes, Stack size 20 bytes, drv_mr72_uartav.o(.text._ZL11MR72_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 492 + Unknown Stack Size
<LI>Call Chain = MR72_Server(void*) &rArr; set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_mr72_uartav.o(.text._ZL15MR72_DriverInit4Portj)
</UL>
<P><STRONG><a name="[ca]"></a>ISTRA24_DriverInit(Port, unsigned int)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, drv_istra24.o(.text._ZL18ISTRA24_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ISTRA24_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_istra24.o(.text._Z16init_drv_ISTRA24v)
</UL>
<P><STRONG><a name="[ed]"></a>ISTRA24_Server(void*)</STRONG> (Thumb, 368 bytes, Stack size 64 bytes, drv_istra24.o(.text._ZL14ISTRA24_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ISTRA24_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_istra24.o(.text._ZL18ISTRA24_DriverInit4Portj)
</UL>
<P><STRONG><a name="[19d]"></a>ISTRA24_DriverInit(Port, unsigned int)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, drv_istra24_2.o(.text._ZL18ISTRA24_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ISTRA24_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_istra24_2.o(.text._Z18init_drv_ISTRA24_2v)
</UL>
<P><STRONG><a name="[1b8]"></a>ISTRA24_Server(void*)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, drv_istra24_2.o(.text._ZL14ISTRA24_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120 + Unknown Stack Size
<LI>Call Chain = ISTRA24_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_istra24_2.o(.text._ZL18ISTRA24_DriverInit4Portj)
</UL>
<P><STRONG><a name="[ad]"></a>NRA24_DriverInit(Port, unsigned int)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, drv_nra24.o(.text._ZL16NRA24_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = NRA24_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nra24.o(.text._Z14init_drv_NRA24v)
</UL>
<P><STRONG><a name="[ea]"></a>NRA24_Server(void*)</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, drv_nra24.o(.text._ZL12NRA24_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128 + Unknown Stack Size
<LI>Call Chain = NRA24_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_nra24.o(.text._ZL16NRA24_DriverInit4Portj)
</UL>
<P><STRONG><a name="[199]"></a>YT_ZR10_DriverInit(Port, unsigned int)</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, drv_yt_zr10.o(.text._ZL18YT_ZR10_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = YT_ZR10_DriverInit(Port, unsigned int) &rArr; TaskQueueRegister(unsigned short, unsigned short) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_zr10.o(.text._Z16init_drv_YT_ZR10v)
</UL>
<P><STRONG><a name="[1b9]"></a>YT_ZR10_Server(void*)</STRONG> (Thumb, 1024 bytes, Stack size 16 bytes, drv_yt_zr10.o(.text._ZL14YT_ZR10_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = YT_ZR10_Server(void*) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToTask(CmdMsg, unsigned short, double)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_zr10.o(.text._ZL18YT_ZR10_DriverInit4Portj)
</UL>
<P><STRONG><a name="[d1]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_um482.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um482.o(.text._Z18init_drv_RTK_UM482v)
</UL>
<P><STRONG><a name="[e8]"></a>RTK_Server(void*)</STRONG> (Thumb, 7264 bytes, Stack size 3024 bytes, drv_um482.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4144 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um482.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1a0]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_um982.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um982.o(.text._Z18init_drv_RTK_UM982v)
</UL>
<P><STRONG><a name="[1b5]"></a>RTK_Server(void*)</STRONG> (Thumb, 7432 bytes, Stack size 2944 bytes, drv_um982.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4064 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um982.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[e3]"></a>RTK_DriverInit(Port, unsigned int)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, drv_um982_movingtrack.o(.text._ZL14RTK_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTK_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um982_movingtrack.o(.text._Z30init_drv_RTK_UM982_movingTrackv)
</UL>
<P><STRONG><a name="[e9]"></a>RTK_Server(void*)</STRONG> (Thumb, 8440 bytes, Stack size 3008 bytes, drv_um982_movingtrack.o(.text._ZL10RTK_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4128 + Unknown Stack Size
<LI>Call Chain = RTK_Server(void*) &rArr; PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorENU(unsigned int, vector3&lang;double&rang;, bool, bool, double)
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;precLandSensorRegister(double)
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Ubx(char const*, unsigned short, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionGlobalVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUpdate(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAOSensorRegister(unsigned char, SName, vector3&lang;double&rang;, bool, double, double)
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPort_setEna(unsigned char, bool)
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtkPortRegister(RtkPort)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Calc(CRC_Cfg, unsigned char const*, unsigned short, unsigned int*, unsigned int, bool, double)
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_um982_movingtrack.o(.text._ZL14RTK_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1ac]"></a>UWB_LinkTrack_DriverInit(Port, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_uwb_linktrack.o(.text._ZL24UWB_LinkTrack_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = UWB_LinkTrack_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uwb_linktrack.o(.text._Z22init_drv_UWB_LinkTrackv)
</UL>
<P><STRONG><a name="[f5]"></a>OpticalFlow_Server(void*)</STRONG> (Thumb, 704 bytes, Stack size 216 bytes, drv_uwb_linktrack.o(.text._ZL18OpticalFlow_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272 + Unknown Stack Size
<LI>Call Chain = OpticalFlow_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_uwb_linktrack.o(.text._ZL24UWB_LinkTrack_DriverInit4Portj)
</UL>
<P><STRONG><a name="[cc]"></a>TFMiniAv_DriverInit(Port, unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, drv_tfminiav.o(.text._ZL19TFMiniAv_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TFMiniAv_DriverInit(Port, unsigned int) &rArr; registere_AvTarget(double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfminiav.o(.text._Z17init_drv_TFMiniAvv)
</UL>
<P><STRONG><a name="[1ba]"></a>TFMini_Server(void*)</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, drv_tfminiav.o(.text._ZL13TFMini_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = TFMini_Server(void*) &rArr; set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_tfminiav.o(.text._ZL19TFMiniAv_DriverInit4Portj)
</UL>
<P><STRONG><a name="[19a]"></a>YT_INYYO_DriverInit(Port, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_yt_inyyo.o(.text._ZL19YT_INYYO_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = YT_INYYO_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_inyyo.o(.text._Z17init_drv_YT_INYYOv)
</UL>
<P><STRONG><a name="[1bb]"></a>YT_INYYO_Server(void*)</STRONG> (Thumb, 816 bytes, Stack size 416 bytes, drv_yt_inyyo.o(.text._ZL15YT_INYYO_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = YT_INYYO_Server(void*) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_inyyo.o(.text._ZL19YT_INYYO_DriverInit4Portj)
</UL>
<P><STRONG><a name="[cd]"></a>YT_RYEOP_DriverInit(Port, unsigned int)</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = YT_RYEOP_DriverInit(Port, unsigned int) &rArr; TaskQueueRegister(unsigned short, unsigned short) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TaskQueueRegister(unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_ryeop.o(.text._Z17init_drv_YT_RYEOPv)
</UL>
<P><STRONG><a name="[1bc]"></a>YT_RYEOP_Server(void*)</STRONG> (Thumb, 3520 bytes, Stack size 1600 bytes, drv_yt_ryeop.o(.text._ZL15YT_RYEOP_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2560 + Unknown Stack Size
<LI>Call Chain = YT_RYEOP_Server(void*) &rArr; send_camera_information() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveCmdMsgFromTask(CmdMsg*, unsigned short, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj)
</UL>
<P><STRONG><a name="[1bd]"></a>YT_RYEOP_Read(void*)</STRONG> (Thumb, 2448 bytes, Stack size 464 bytes, drv_yt_ryeop.o(.text._ZL13YT_RYEOP_ReadPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = YT_RYEOP_Read(void*) &rArr; send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_ryeop.o(.text._ZL19YT_RYEOP_DriverInit4Portj)
</UL>
<P><STRONG><a name="[4e1]"></a>send_camera_information()</STRONG> (Thumb, 1152 bytes, Stack size 376 bytes, drv_yt_ryeop.o(.text._ZL23send_camera_informationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = send_camera_information() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
</UL>

<P><STRONG><a name="[503]"></a>send_ack(unsigned int, bool)</STRONG> (Thumb, 520 bytes, Stack size 328 bytes, drv_yt_ryeop.o(.text._ZL8send_ackjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = send_ack(unsigned int, bool) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
</UL>

<P><STRONG><a name="[4e2]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, drv_yt_ryeop.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Server(void*)
</UL>

<P><STRONG><a name="[4e7]"></a>send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)</STRONG> (Thumb, 272 bytes, Stack size 360 bytes, drv_yt_ryeop.o(.text._ZL25send_camera_gimbal_statusP32__mavlink_camera_gimbal_status_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YT_RYEOP_Read(void*)
</UL>

<P><STRONG><a name="[4e3]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 336 bytes, Stack size 64 bytes, drv_yt_ryeop.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_gimbal_status(__mavlink_camera_gimbal_status_t*)
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_ack(unsigned int, bool)
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_information()
</UL>

<P><STRONG><a name="[4f3]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, drv_yt_ryeop.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[1a6]"></a>YT_Viewlink_DriverInit(Port, unsigned int)</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_yt_viewlink.o(.text._ZL22YT_Viewlink_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = YT_Viewlink_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_viewlink.o(.text._Z20init_drv_YT_Viewlinkv)
</UL>
<P><STRONG><a name="[f4]"></a>YT_Viewlink_Server(void*)</STRONG> (Thumb, 1024 bytes, Stack size 496 bytes, drv_yt_viewlink.o(.text._ZL18YT_Viewlink_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = YT_Viewlink_Server(void*) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_yt_viewlink.o(.text._ZL22YT_Viewlink_DriverInit4Portj)
</UL>
<P><STRONG><a name="[ae]"></a>US100_DriverInit(Port, unsigned int)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, drv_us100.o(.text._ZL16US100_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = US100_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_us100.o(.text._Z14init_drv_US100v)
</UL>
<P><STRONG><a name="[eb]"></a>US100_Server(void*)</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, drv_us100.o(.text._ZL12US100_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = US100_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_us100.o(.text._ZL16US100_DriverInit4Portj)
</UL>
<P><STRONG><a name="[19e]"></a>RTCMInput_DriverInit(Port, unsigned int)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, drv_rtcminput.o(.text._ZL20RTCMInput_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = RTCMInput_DriverInit(Port, unsigned int) &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtcminput.o(.text._Z18init_drv_RTCMInputv)
</UL>
<P><STRONG><a name="[f0]"></a>RTCMInput_Server(void*)</STRONG> (Thumb, 170 bytes, Stack size 1032 bytes, drv_rtcminput.o(.text._ZL16RTCMInput_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104<LI>Call Chain = RTCMInput_Server(void*) &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inject_RtkPorts(unsigned char const*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_rtcminput.o(.text._ZL20RTCMInput_DriverInit4Portj)
</UL>
<P><STRONG><a name="[c7]"></a>ADM001_DriverInit(Port, unsigned int)</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, drv_adm001.o(.text._ZL17ADM001_DriverInit4Portj))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = ADM001_DriverInit(Port, unsigned int) &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adm001.o(.text._Z15init_drv_ADM001v)
</UL>
<P><STRONG><a name="[ec]"></a>ADM001_Server(void*)</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, drv_adm001.o(.text._ZL13ADM001_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = ADM001_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_adm001.o(.text._ZL17ADM001_DriverInit4Portj)
</UL>
<P><STRONG><a name="[db]"></a>CAN_Radar_TR60_AH_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_can_radar_tr60_ah.o(.text._ZL28CAN_Radar_TR60_AH_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_radar_tr60_ah.o(.text._Z22init_drv_Radar_TR60_AHv)
</UL>
<P><STRONG><a name="[dc]"></a>CAN_Radar_TR60_AH_DriverRun()</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, drv_can_radar_tr60_ah.o(.text._ZL27CAN_Radar_TR60_AH_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = CAN_Radar_TR60_AH_DriverRun() &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_radar_tr60_ah.o(.text._Z22init_drv_Radar_TR60_AHv)
</UL>
<P><STRONG><a name="[f6]"></a>CAN_Radar_TR60_AH_Server(void*)</STRONG> (Thumb, 208 bytes, Stack size 112 bytes, drv_can_radar_tr60_ah.o(.text._ZL24CAN_Radar_TR60_AH_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = CAN_Radar_TR60_AH_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_radar_tr60_ah.o(.text._ZL27CAN_Radar_TR60_AH_DriverRunv)
</UL>
<P><STRONG><a name="[1ad]"></a>CAN_QOAR1271_Av_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_can_qoar1271_av.o(.text._ZL26CAN_QOAR1271_Av_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_qoar1271_av.o(.text._Z24init_drv_CAN_QOAR1271_Avv)
</UL>
<P><STRONG><a name="[1ae]"></a>CAN_QOAR1271_Av_DriverRun()</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, drv_can_qoar1271_av.o(.text._ZL25CAN_QOAR1271_Av_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CAN_QOAR1271_Av_DriverRun() &rArr; CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_qoar1271_av.o(.text._Z24init_drv_CAN_QOAR1271_Avv)
</UL>
<P><STRONG><a name="[1bf]"></a>CAN_QOAR1271_Av_Server(void*)</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, drv_can_qoar1271_av.o(.text._ZL22CAN_QOAR1271_Av_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 544 + Unknown Stack Size
<LI>Call Chain = CAN_QOAR1271_Av_Server(void*) &rArr; set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_qoar1271_av.o(.text._ZL25CAN_QOAR1271_Av_DriverRunv)
</UL>
<P><STRONG><a name="[d6]"></a>CAN_MR72_Av_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_can_mr72_av.o(.text._ZL22CAN_MR72_Av_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_av.o(.text._Z20init_drv_CAN_MR72_Avv)
</UL>
<P><STRONG><a name="[d7]"></a>CAN_MR72_Av_DriverRun()</STRONG> (Thumb, 144 bytes, Stack size 88 bytes, drv_can_mr72_av.o(.text._ZL21CAN_MR72_Av_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = CAN_MR72_Av_DriverRun() &rArr; CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_av.o(.text._Z20init_drv_CAN_MR72_Avv)
</UL>
<P><STRONG><a name="[f1]"></a>CAN_MR72_Av_Server(void*)</STRONG> (Thumb, 1664 bytes, Stack size 1200 bytes, drv_can_mr72_av.o(.text._ZL18CAN_MR72_Av_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672 + Unknown Stack Size
<LI>Call Chain = CAN_MR72_Av_Server(void*) &rArr; set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvTarget(unsigned char, AvoidanceTarget*, double)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_av.o(.text._ZL21CAN_MR72_Av_DriverRunv)
</UL>
<P><STRONG><a name="[1a9]"></a>CAN_Radar_BMS_TATTU_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_can_bms_tattu.o(.text._ZL30CAN_Radar_BMS_TATTU_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_bms_tattu.o(.text._Z22init_drv_CAN_BMS_TATTUv)
</UL>
<P><STRONG><a name="[1aa]"></a>CAN_Radar_BMS_TATTU_DriverRun()</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, drv_can_bms_tattu.o(.text._ZL29CAN_Radar_BMS_TATTU_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = CAN_Radar_BMS_TATTU_DriverRun() &rArr; CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryRegister(unsigned char, double)
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_bms_tattu.o(.text._Z22init_drv_CAN_BMS_TATTUv)
</UL>
<P><STRONG><a name="[1c3]"></a>CAN_Radar_BMS_TATTU_Server(void*)</STRONG> (Thumb, 1356 bytes, Stack size 136 bytes, drv_can_bms_tattu.o(.text._ZL26CAN_Radar_BMS_TATTU_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = CAN_Radar_BMS_TATTU_Server(void*) &rArr; batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_bms_tattu.o(.text._ZL29CAN_Radar_BMS_TATTU_DriverRunv)
</UL>
<P><STRONG><a name="[dd]"></a>CAN_MR72_Av_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_can_mr72_backav.o(.text._ZL22CAN_MR72_Av_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_backav.o(.text._Z24init_drv_CAN_MR72_BackAvv)
</UL>
<P><STRONG><a name="[de]"></a>CAN_MR72_Av_DriverRun()</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, drv_can_mr72_backav.o(.text._ZL21CAN_MR72_Av_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CAN_MR72_Av_DriverRun() &rArr; CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short) &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::CanMailBox(unsigned short, CanId*, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_backav.o(.text._Z24init_drv_CAN_MR72_BackAvv)
</UL>
<P><STRONG><a name="[f2]"></a>CAN_MR72_Av_Server(void*)</STRONG> (Thumb, 768 bytes, Stack size 368 bytes, drv_can_mr72_backav.o(.text._ZL18CAN_MR72_Av_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = CAN_MR72_Av_Server(void*) &rArr; set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetXYStraightLine_RelativeFlu(unsigned char, vector2&lang;double&rang;, double, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanMailBox::receiveMail(CanPacket*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_can_mr72_backav.o(.text._ZL21CAN_MR72_Av_DriverRunv)
</UL>
<P><STRONG><a name="[1a3]"></a>I2C_InternalMag_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_internalmag.o(.text._ZL26I2C_InternalMag_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.text._Z20init_drv_InternalMagv)
</UL>
<P><STRONG><a name="[1a4]"></a>I2C_InternalMag_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_internalmag.o(.text._ZL25I2C_InternalMag_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_InternalMag_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.text._Z20init_drv_InternalMagv)
</UL>
<P><STRONG><a name="[1c0]"></a>InternalMag_Server(void*)</STRONG> (Thumb, 1204 bytes, Stack size 16 bytes, drv_internalmag.o(.text._ZL18InternalMag_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = InternalMag_Server(void*) &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.text._ZL25I2C_InternalMag_DriverRunv)
</UL>
<P><STRONG><a name="[161]"></a>_GLOBAL__sub_I_drv_InternalMag.cpp</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, drv_internalmag.o(.text._GLOBAL__sub_I_drv_InternalMag.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_drv_InternalMag.cpp &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_internalmag.o(.init_array)
</UL>
<P><STRONG><a name="[c8]"></a>I2C_ExtMag_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_extmag.o(.text._ZL21I2C_ExtMag_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.text._Z15init_drv_ExtMagv)
</UL>
<P><STRONG><a name="[c9]"></a>I2C_ExtMag_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_extmag.o(.text._ZL20I2C_ExtMag_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_ExtMag_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.text._Z15init_drv_ExtMagv)
</UL>
<P><STRONG><a name="[ee]"></a>ExtMag_Server(void*)</STRONG> (Thumb, 1164 bytes, Stack size 16 bytes, drv_extmag.o(.text._ZL13ExtMag_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1512 + Unknown Stack Size
<LI>Call Chain = ExtMag_Server(void*) &rArr; IMUMagnetometerRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerRegister(unsigned char, SName, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.text._ZL20I2C_ExtMag_DriverRunv)
</UL>
<P><STRONG><a name="[162]"></a>_GLOBAL__sub_I_drv_ExtMag.cpp</STRONG> (Thumb, 484 bytes, Stack size 32 bytes, drv_extmag.o(.text._GLOBAL__sub_I_drv_ExtMag.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_drv_ExtMag.cpp &rArr; SName::SName__sub_object(char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extmag.o(.init_array)
</UL>
<P><STRONG><a name="[638]"></a>ExtSPL06_Server(void*)</STRONG> (Thumb, 992 bytes, Stack size 176 bytes, drv_extbarometer.o(.text._ZL15ExtSPL06_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = ExtSPL06_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_y()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_x()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBarometer_Server(void*)
</UL>

<P><STRONG><a name="[63b]"></a>ExtMS5803_Server(void*)</STRONG> (Thumb, 2160 bytes, Stack size 192 bytes, drv_extbarometer.o(.text._ZL16ExtMS5803_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248 + Unknown Stack Size
<LI>Call Chain = ExtMS5803_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_y()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl_x()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtBarometer_Server(void*)
</UL>

<P><STRONG><a name="[1a7]"></a>I2C_ExtBarometer_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_extbarometer.o(.text._ZL27I2C_ExtBarometer_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_extbarometer.o(.text._Z21init_drv_ExtBarometerv)
</UL>
<P><STRONG><a name="[1a8]"></a>I2C_ExtBarometer_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_extbarometer.o(.text._ZL26I2C_ExtBarometer_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_ExtBarometer_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extbarometer.o(.text._Z21init_drv_ExtBarometerv)
</UL>
<P><STRONG><a name="[1c1]"></a>ExtBarometer_Server(void*)</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, drv_extbarometer.o(.text._ZL19ExtBarometer_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256 + Unknown Stack Size
<LI>Call Chain = ExtBarometer_Server(void*) &rArr; ExtMS5803_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendReceiveAddr7(unsigned char, unsigned char const*, unsigned short, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtMS5803_Server(void*)
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtSPL06_Server(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extbarometer.o(.text._ZL26I2C_ExtBarometer_DriverRunv)
</UL>
<P><STRONG><a name="[e0]"></a>I2C_ExtLed_TCA62724FMG_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_extled_tca62724fmg.o(.text._ZL33I2C_ExtLed_TCA62724FMG_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_extled_tca62724fmg.o(.text._Z27init_drv_ExtLed_TCA62724FMGv)
</UL>
<P><STRONG><a name="[e1]"></a>I2C_ExtLed_TCA62724FMG_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_extled_tca62724fmg.o(.text._ZL32I2C_ExtLed_TCA62724FMG_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_ExtLed_TCA62724FMG_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extled_tca62724fmg.o(.text._Z27init_drv_ExtLed_TCA62724FMGv)
</UL>
<P><STRONG><a name="[f9]"></a>ExtLed_Server(void*)</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, drv_extled_tca62724fmg.o(.text._ZL13ExtLed_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ExtLed_Server(void*) &rArr; ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double) &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_extled_tca62724fmg.o(.text._ZL32I2C_ExtLed_TCA62724FMG_DriverRunv)
</UL>
<P><STRONG><a name="[1a1]"></a>I2C_TFMiniAv_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_iictfmini_av.o(.text._ZL23I2C_TFMiniAv_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini_av.o(.text._Z20init_drv_IICTFMiniAvv)
</UL>
<P><STRONG><a name="[1a2]"></a>I2C_TFMiniAv_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_iictfmini_av.o(.text._ZL22I2C_TFMiniAv_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_TFMiniAv_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini_av.o(.text._Z20init_drv_IICTFMiniAvv)
</UL>
<P><STRONG><a name="[f3]"></a>TFMiniAv_Server(void*)</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, drv_iictfmini_av.o(.text._ZL15TFMiniAv_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = TFMiniAv_Server(void*) &rArr; set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetPoint3dPoint_RelativeFlu(unsigned char, vector3&lang;double&rang;, double)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_AvTargetInavailable(unsigned char, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;registere_AvTarget(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini_av.o(.text._ZL22I2C_TFMiniAv_DriverRunv)
</UL>
<P><STRONG><a name="[cf]"></a>I2C_IRLock_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_iic_irlock.o(.text._ZL21I2C_IRLock_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_iic_irlock.o(.text._Z18init_drv_IICIRLockv)
</UL>
<P><STRONG><a name="[d0]"></a>I2C_IRLock_DriverRun()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, drv_iic_irlock.o(.text._ZL20I2C_IRLock_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = I2C_IRLock_DriverRun() &rArr; xTaskCreate &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic_irlock.o(.text._Z18init_drv_IICIRLockv)
</UL>
<P><STRONG><a name="[1be]"></a>IRLock_Server(void*)</STRONG> (Thumb, 944 bytes, Stack size 16 bytes, drv_iic_irlock.o(.text._ZL13IRLock_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = IRLock_Server(void*) &rArr; update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setInavailable_followSensor(unsigned int, double)
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iic_irlock.o(.text._ZL20I2C_IRLock_DriverRunv)
</UL>
<P><STRONG><a name="[19b]"></a>I2C_TFMini_DriverInit()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, drv_iictfmini.o(.text._ZL21I2C_TFMini_DriverInitv))
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini.o(.text._Z18init_drv_IICTFMiniv)
</UL>
<P><STRONG><a name="[19c]"></a>I2C_TFMini_DriverRun()</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, drv_iictfmini.o(.text._ZL20I2C_TFMini_DriverRunv))
<BR><BR>[Stack]<UL><LI>Max Depth = 528 + Unknown Stack Size
<LI>Call Chain = I2C_TFMini_DriverRun() &rArr; PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini.o(.text._Z18init_drv_IICTFMiniv)
</UL>
<P><STRONG><a name="[ef]"></a>TFMini_Server(void*)</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, drv_iictfmini.o(.text._ZL13TFMini_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = TFMini_Server(void*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_ReceiveAddr7(unsigned char, unsigned char*, unsigned short, IICSpeed, double)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ExtIIC_SendAddr7(unsigned char, unsigned char const*, unsigned short, IICSpeed, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorSetInavailable(unsigned char, unsigned int, double const*, double)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Airframe_quat(Quaternion*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> drv_iictfmini.o(.text._ZL20I2C_TFMini_DriverRunv)
</UL>
<P><STRONG><a name="[573]"></a>lfs_init</STRONG> (Thumb, 676 bytes, Stack size 16 bytes, lfs.o(.text.lfs_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = lfs_init &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
</UL>

<P><STRONG><a name="[554]"></a>lfs_dir_alloc</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lfs.o(.text.lfs_dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = lfs_dir_alloc &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[560]"></a>lfs_dir_commit</STRONG> (Thumb, 1468 bytes, Stack size 176 bytes, lfs.o(.text.lfs_dir_commit))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[55f]"></a>lfs_dir_fetchmatch</STRONG> (Thumb, 1534 bytes, Stack size 152 bytes, lfs.o(.text.lfs_dir_fetchmatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_format
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_read
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_pred
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[fd]"></a>lfs_dir_find_match</STRONG> (Thumb, 154 bytes, Stack size 72 bytes, lfs.o(.text.lfs_dir_find_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = lfs_dir_find_match &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(.text.lfs_mount)
<LI> lfs.o(.text.lfs_dir_find)
</UL>
<P><STRONG><a name="[55c]"></a>lfs_dir_getslice</STRONG> (Thumb, 498 bytes, Stack size 56 bytes, lfs.o(.text.lfs_dir_getslice))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = lfs_dir_getslice &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mount
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_read
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_open
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_drop
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[570]"></a>lfs_fs_forceconsistency</STRONG> (Thumb, 792 bytes, Stack size 176 bytes, lfs.o(.text.lfs_fs_forceconsistency))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[564]"></a>lfs_dir_find</STRONG> (Thumb, 406 bytes, Stack size 88 bytes, lfs.o(.text.lfs_dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = lfs_dir_find &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_open
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_stat
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[561]"></a>lfs_fs_preporphans</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, lfs.o(.text.lfs_fs_preporphans))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = lfs_fs_preporphans &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_mkdir
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[574]"></a>lfs_fs_pred</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, lfs.o(.text.lfs_fs_pred))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = lfs_fs_pred &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
</UL>

<P><STRONG><a name="[563]"></a>lfs_dir_drop</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, lfs.o(.text.lfs_dir_drop))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = lfs_dir_drop &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_remove
</UL>

<P><STRONG><a name="[56f]"></a>lfs_file_rawopencfg</STRONG> (Thumb, 710 bytes, Stack size 80 bytes, lfs.o(.text.lfs_file_rawopencfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_forceconsistency
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_open
</UL>

<P><STRONG><a name="[569]"></a>lfs_file_rawsync</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lfs.o(.text.lfs_file_rawsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = lfs_file_rawsync &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>
<BR>[Called By]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_close
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawopencfg
</UL>

<P><STRONG><a name="[56a]"></a>lfs_file_flush</STRONG> (Thumb, 262 bytes, Stack size 120 bytes, lfs.o(.text.lfs_file_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_file_flush &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
</UL>
<BR>[Called By]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_seek
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawsync
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[56b]"></a>lfs_file_rawread</STRONG> (Thumb, 760 bytes, Stack size 80 bytes, lfs.o(.text.lfs_file_rawread))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_file_rawread &rArr;  lfs_file_flush (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[556]"></a>lfs_bd_read</STRONG> (Thumb, 438 bytes, Stack size 56 bytes, lfs.o(.text.lfs_bd_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_parent_match
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawread
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_find_match
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
</UL>

<P><STRONG><a name="[56c]"></a>lfs_file_rawwrite</STRONG> (Thumb, 1546 bytes, Stack size 112 bytes, lfs.o(.text.lfs_file_rawwrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_file_rawwrite &rArr;  lfs_file_rawwrite (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_write
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_truncate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[56e]"></a>lfs_file_relocate</STRONG> (Thumb, 1238 bytes, Stack size 136 bytes, lfs.o(.text.lfs_file_relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = lfs_file_relocate &rArr; lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[55a]"></a>lfs_bd_prog</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, lfs.o(.text.lfs_bd_prog))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_flush
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
</UL>

<P><STRONG><a name="[555]"></a>lfs_alloc</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, lfs.o(.text.lfs_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = lfs_alloc &rArr; lfs_fs_rawtraverse &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawtraverse
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_relocate
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_rawwrite
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
</UL>

<P><STRONG><a name="[559]"></a>lfs_fs_rawsize</STRONG> (Thumb, 832 bytes, Stack size 112 bytes, lfs.o(.text.lfs_fs_rawsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = lfs_fs_rawsize &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
</UL>

<P><STRONG><a name="[575]"></a>lfs_fs_rawtraverse</STRONG> (Thumb, 956 bytes, Stack size 120 bytes, lfs.o(.text.lfs_fs_rawtraverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = lfs_fs_rawtraverse &rArr; lfs_dir_fetchmatch &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
</UL>
<BR>[Called By]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
</UL>

<P><STRONG><a name="[fb]"></a>lfs_dir_commit_commit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lfs.o(.text.lfs_dir_commit_commit))
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(.text.lfs_dir_commit)
<LI> lfs.o(.text.lfs_dir_compact)
</UL>
<P><STRONG><a name="[558]"></a>lfs_dir_traverse</STRONG> (Thumb, 448 bytes, Stack size 104 bytes, lfs.o(.text.lfs_dir_traverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_traverse &rArr;  lfs_dir_traverse (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[557]"></a>lfs_dir_compact</STRONG> (Thumb, 2056 bytes, Stack size 192 bytes, lfs.o(.text.lfs_dir_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = lfs_dir_compact &rArr;  lfs_dir_compact (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitcrc
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commitattr
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_traverse
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_rawsize
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_alloc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_fs_preporphans
<LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_getslice
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_fetchmatch
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_alloc
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[55d]"></a>lfs_dir_commitattr</STRONG> (Thumb, 300 bytes, Stack size 64 bytes, lfs.o(.text.lfs_dir_commitattr))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commitattr &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[55e]"></a>lfs_dir_commitcrc</STRONG> (Thumb, 614 bytes, Stack size 88 bytes, lfs.o(.text.lfs_dir_commitcrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = lfs_dir_commitcrc &rArr; lfs_bd_prog &rArr; lfs_bd_flush &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_crc
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_compact
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_dir_commit
</UL>

<P><STRONG><a name="[1c5]"></a>lfs_alloc_lookahead</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lfs.o(.text.lfs_alloc_lookahead))
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_alloc)
</UL>
<P><STRONG><a name="[56d]"></a>lfs_bd_flush</STRONG> (Thumb, 286 bytes, Stack size 80 bytes, lfs.o(.text.lfs_bd_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = lfs_bd_flush &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_prog
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_file_flush
</UL>

<P><STRONG><a name="[1c6]"></a>lfs_dir_traverse_filter</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lfs.o(.text.lfs_dir_traverse_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lfs_dir_traverse_filter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_dir_traverse)
</UL>
<P><STRONG><a name="[fa]"></a>lfs_dir_commit_size</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lfs.o(.text.lfs_dir_commit_size))
<BR>[Address Reference Count : 1]<UL><LI> lfs.o(.text.lfs_dir_compact)
</UL>
<P><STRONG><a name="[fc]"></a>lfs_fs_parent_match</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, lfs.o(.text.lfs_fs_parent_match))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = lfs_fs_parent_match &rArr; lfs_bd_read &rArr; __aeabi_assert &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfs_bd_read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lfs.o(.text.lfs_dir_compact)
<LI> lfs.o(.text.lfs_fs_forceconsistency)
</UL>
<P><STRONG><a name="[542]"></a>mount_volume</STRONG> (Thumb, 1662 bytes, Stack size 48 bytes, ff.o(.text.mount_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mount_volume &rArr; ff_req_grant &rArr; osMutexWait &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_qword
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[57c]"></a>clear_lock</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, ff.o(.text.clear_lock))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[579]"></a>find_volume</STRONG> (Thumb, 1192 bytes, Stack size 40 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = find_volume &rArr; disk_read
</UL>
<BR>[Calls]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[57a]"></a>ld_qword</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ff.o(.text.ld_qword))
<BR><BR>[Called By]<UL><LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[57b]"></a>move_window</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mount_volume
</UL>

<P><STRONG><a name="[544]"></a>follow_path</STRONG> (Thumb, 2078 bytes, Stack size 56 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_uni2oem
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[535]"></a>dir_register</STRONG> (Thumb, 2844 bytes, Stack size 184 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 480 + Unknown Stack Size
<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[655]"></a>chk_lock</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, ff.o(.text.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[54e]"></a>inc_lock</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ff.o(.text.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[54d]"></a>init_alloc_info</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ff.o(.text.init_alloc_info))
<BR><BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[540]"></a>store_xdir</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ff.o(.text.store_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = store_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[552]"></a>remove_chain</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = remove_chain &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
</UL>

<P><STRONG><a name="[54b]"></a>get_fat</STRONG> (Thumb, 786 bytes, Stack size 32 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[538]"></a>dir_sdi</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[537]"></a>dir_find</STRONG> (Thumb, 1604 bytes, Stack size 56 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[536]"></a>dir_alloc</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[539]"></a>sum_sfn</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, ff.o(.text.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[53c]"></a>dir_next</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_clear
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_xdir
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[53d]"></a>put_fat</STRONG> (Thumb, 698 bytes, Stack size 40 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[53e]"></a>fill_last_frag</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, ff.o(.text.fill_last_frag))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[53f]"></a>load_obj_xdir</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ff.o(.text.load_obj_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = load_obj_xdir &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[64e]"></a>change_bitmap</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, ff.o(.text.change_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = change_bitmap &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[54c]"></a>create_chain</STRONG> (Thumb, 776 bytes, Stack size 48 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_bitmap
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_last_frag
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[545]"></a>sync_fs</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = sync_fs &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[651]"></a>load_xdir</STRONG> (Thumb, 1134 bytes, Stack size 40 bytes, ff.o(.text.load_xdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_obj_xdir
</UL>

<P><STRONG><a name="[650]"></a>dir_read</STRONG> (Thumb, 840 bytes, Stack size 40 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_xdir
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[550]"></a>get_fileinfo</STRONG> (Thumb, 670 bytes, Stack size 40 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_fileinfo &rArr; ff_oem2uni
</UL>
<BR>[Calls]<UL><LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_oem2uni
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_utf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
</UL>

<P><STRONG><a name="[658]"></a>put_utf</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, ff.o(.text.put_utf))
<BR><BR>[Called By]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
</UL>

<P><STRONG><a name="[64f]"></a>dir_clear</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, ff.o(.text.dir_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = dir_clear &rArr; ff_memfree &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[586]"></a>pattern_matching</STRONG> (Thumb, 1332 bytes, Stack size 48 bytes, ff.o(.text.pattern_matching))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + In Cycle
<LI>Call Chain = pattern_matching &rArr;  pattern_matching (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_findfirst
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pattern_matching
</UL>

<P><STRONG><a name="[652]"></a>dir_remove</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[54f]"></a>putc_bfd</STRONG> (Thumb, 494 bytes, Stack size 24 bytes, ff.o(.text.putc_bfd))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = putc_bfd &rArr; f_write &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_puts
</UL>

<P><STRONG><a name="[181]"></a>Debug_task(void*)</STRONG> (Thumb, 1312 bytes, Stack size 576 bytes, debug.o(.text._ZL10Debug_taskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = Debug_task(void*) &rArr; GetPositionSensorData(unsigned char, Position_Sensor_Data*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug.o(.text._Z10init_Debugv)
</UL>
<P><STRONG><a name="[17c]"></a>__cxx_global_array_dtor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, commulink.o(.text.__cxx_global_array_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __cxx_global_array_dtor &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, SDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, SDMsg&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
</UL>
<P><STRONG><a name="[17d]"></a>__cxx_global_array_dtor.2</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, commulink.o(.text.__cxx_global_array_dtor.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_array_dtor.2 &rArr; std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*) &rArr;  std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::__map_value_compare&lang;unsigned short, std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, std::__2::less&lang;unsigned short&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;&rang;&rang;::destroy(std::__2::__tree_node&lang;std::__2::__value_type&lang;unsigned short, PosSDMsg&rang;, void*&rang;*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._GLOBAL__sub_I_Commulink.cpp)
</UL>
<P><STRONG><a name="[ac]"></a>Commulink_Server(void*)</STRONG> (Thumb, 13934 bytes, Stack size 1648 bytes, commulink.o(.text._ZL16Commulink_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2664 + Unknown Stack Size
<LI>Call Chain = Commulink_Server(void*) &rArr; paramProtocolTask(bool) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFlyMode()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_SysState(double)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_Can()
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDAOSensorFixed()
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_init_YawSensor()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawHealthEst()
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGlobalXYSensorExist()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MSHealthXY()
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltFilted(float*, signed char*, double)
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_remove[abi:nn190000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommuPortRegister(unsigned char)
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDRefresh(float)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.text._Z14init_Commulinkv)
</UL>
<P><STRONG><a name="[485]"></a>LEDRefresh(float)</STRONG> (Thumb, 1424 bytes, Stack size 16 bytes, commulink.o(.text._ZL10LEDRefreshf))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = LEDRefresh(float) &rArr; set_LedBrightness(float, float, float) &rArr; __hardfp_pow &rArr; sqrt &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerOnOff(bool)
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_BuzzerFreq(unsigned short)
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_LedBrightness(float, float, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[4b4]"></a>CommuPortRegister(unsigned char)</STRONG> (Thumb, 624 bytes, Stack size 304 bytes, commulink.o(.text._ZL17CommuPortRegisterh))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = CommuPortRegister(unsigned char) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_init_chan
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[4b6]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, commulink.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[4be]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, commulink.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Commulink_Server(void*)
</UL>

<P><STRONG><a name="[163]"></a>_GLOBAL__sub_I_Commulink.cpp</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, commulink.o(.text._GLOBAL__sub_I_Commulink.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _GLOBAL__sub_I_Commulink.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commulink.o(.init_array)
</UL>
<P><STRONG><a name="[425]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, mavlinkcmdprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[426]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, mavlinkcmdprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)
</UL>

<P><STRONG><a name="[102]"></a>Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 192 bytes, Stack size 352 bytes, mavlinkcmdprocess.o(.text._ZL22Cmd10_MAV_CMD_SEND_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = Cmd10_MAV_CMD_SEND_WGA(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanupSD(short)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_WGA_Correct()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_get_WGA(unsigned int*)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[103]"></a>Cmd11_MAV_CMD_WRITE_WGA(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, mavlinkcmdprocess.o(.text._ZL23Cmd11_MAV_CMD_WRITE_WGAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1680 + Unknown Stack Size
<LI>Call Chain = Cmd11_MAV_CMD_WRITE_WGA(unsigned char, __mavlink_message const*) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[104]"></a>Cmd12_MAV_CMD_SET_RTC(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, mavlinkcmdprocess.o(.text._ZL21Cmd12_MAV_CMD_SET_RTChPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Cmd12_MAV_CMD_SET_RTC(unsigned char, __mavlink_message const*) &rArr; Set_RTC_Time &rArr; xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RTC_Time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[105]"></a>Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAM(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, mavlinkcmdprocess.o(.text._ZL49Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Cmd14_MAV_CMD_REQUEST_ACFLY_POSSENSOR_INFO_STREAM(unsigned char, __mavlink_message const*) &rArr; SetPosSensorMsg(unsigned char, unsigned char, short, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearPosSensorMsg(unsigned char, unsigned char, double)
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPosSensorMsg(unsigned char, unsigned char, short, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[106]"></a>Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 744 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL19Cmd183_DO_SET_SERVOhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408 + Unknown Stack Size
<LI>Call Chain = Cmd183_DO_SET_SERVO(unsigned char, __mavlink_message const*) &rArr; setAuxPWM(float, unsigned char) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAuxPWM(float, unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[107]"></a>Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 168 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL33Cmd203_MAV_CMD_DO_DIGICAM_CONTROLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 3440 + Unknown Stack Size
<LI>Call Chain = Cmd203_MAV_CMD_DO_DIGICAM_CONTROL(unsigned char, __mavlink_message const*) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[108]"></a>Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 200 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL28Cmd209_MAV_CMD_DO_MOTOR_TESThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = Cmd209_MAV_CMD_DO_MOTOR_TEST(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doMotorTest(unsigned int, double, double)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[109]"></a>Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 328 bytes, Stack size 336 bytes, mavlinkcmdprocess.o(.text._ZL40Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWNhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1840 + Unknown Stack Size
<LI>Call Chain = Cmd246_MAV_CMD_PREFLIGHT_REBOOT_SHUTDOWN(unsigned char, __mavlink_message const*) &rArr; InternalStorage_ResetCfg_ExceptWGA(double) &rArr; lfs_remove &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalStorage_ResetCfg_ExceptWGA(double)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_InternalStorage(double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[10a]"></a>Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 440 bytes, Stack size 408 bytes, mavlinkcmdprocess.o(.text._ZL32Cmd410_MAV_CMD_GET_HOME_POSITIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Cmd410_MAV_CMD_GET_HOME_POSITION(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[10b]"></a>Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 336 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL35Cmd511_MAV_CMD_SET_MESSAGE_INTERVALhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = Cmd511_MAV_CMD_SET_MESSAGE_INTERVAL(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[10c]"></a>Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 120 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL39Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSIONhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = Cmd519_MAV_CMD_REQUEST_PROTOCOL_VERSION(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[10d]"></a>Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 136 bytes, Stack size 328 bytes, mavlinkcmdprocess.o(.text._ZL45Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIEShPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304 + Unknown Stack Size
<LI>Call Chain = Cmd520_MAV_CMD_REQUEST_AUTOPILOT_CAPABILITIES(unsigned char, __mavlink_message const*) &rArr; send_AutoPilot_Version(unsigned char) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.rodata.Mavlink_CMD_Process)
</UL>
<P><STRONG><a name="[643]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, mavlinkcmdprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[164]"></a>_GLOBAL__sub_I_MavlinkCMDProcess.cpp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mavlinkcmdprocess.o(.text._GLOBAL__sub_I_MavlinkCMDProcess.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_MavlinkCMDProcess.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkcmdprocess.o(.init_array)
</UL>
<P><STRONG><a name="[4af]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, mavlinksendfuncs.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg242_HOME_POSITION(unsigned char, __mavlink_message*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg241_VIBRATION(unsigned char, __mavlink_message*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg124_GPS2_RAW(unsigned char, __mavlink_message*)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg74_VFR_HUD(unsigned char, __mavlink_message*)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg30_ATTITUDE(unsigned char, __mavlink_message*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg26_SCALED_IMU(unsigned char, __mavlink_message*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg01_SYS_STATUS(unsigned char, __mavlink_message*)
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg206_ACFlyPosSensor_INFO(unsigned char, __mavlink_message*, unsigned char)
</UL>

<P><STRONG><a name="[1e3]"></a>Msg01_SYS_STATUS(unsigned char, __mavlink_message*)</STRONG> (Thumb, 3048 bytes, Stack size 512 bytes, mavlinksendfuncs.o(.text._ZL16Msg01_SYS_STATUShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = Msg01_SYS_STATUS(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCPULoad
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdFreeSizeGB()
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdTotalSizeGB()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBatteryInfo(unsigned char, BatteryInfo*, double)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_WindDisturbance(vector3&lang;double&rang;*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawHealthEst()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e4]"></a>Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*)</STRONG> (Thumb, 256 bytes, Stack size 80 bytes, mavlinksendfuncs.o(.text._ZL17Msg02_SYSTEM_TIMEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = Msg02_SYSTEM_TIME(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LocalTime2Unix
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e5]"></a>Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*)</STRONG> (Thumb, 792 bytes, Stack size 360 bytes, mavlinksendfuncs.o(.text._ZL17Msg24_GPS_RAW_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = Msg24_GPS_RAW_INT(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e6]"></a>Msg26_SCALED_IMU(unsigned char, __mavlink_message*)</STRONG> (Thumb, 800 bytes, Stack size 304 bytes, mavlinksendfuncs.o(.text._ZL16Msg26_SCALED_IMUhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = Msg26_SCALED_IMU(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e7]"></a>Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*)</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, mavlinksendfuncs.o(.text._ZL21Msg29_SCALED_PRESSUREhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = Msg29_SCALED_PRESSURE(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e8]"></a>Msg30_ATTITUDE(unsigned char, __mavlink_message*)</STRONG> (Thumb, 608 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL14Msg30_ATTITUDEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Msg30_ATTITUDE(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1e9]"></a>Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*)</STRONG> (Thumb, 488 bytes, Stack size 120 bytes, mavlinksendfuncs.o(.text._ZL25Msg31_ATTITUDE_QUATERNIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = Msg31_ATTITUDE_QUATERNION(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1ea]"></a>Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*)</STRONG> (Thumb, 400 bytes, Stack size 104 bytes, mavlinksendfuncs.o(.text._ZL24Msg32_LOCAL_POSITION_NEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = Msg32_LOCAL_POSITION_NED(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1eb]"></a>Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*)</STRONG> (Thumb, 824 bytes, Stack size 400 bytes, mavlinksendfuncs.o(.text._ZL25Msg33_GLOBAL_POSITION_INThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = Msg33_GLOBAL_POSITION_INT(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_Z(PosSensorHealthInf1*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1ec]"></a>Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*)</STRONG> (Thumb, 632 bytes, Stack size 176 bytes, mavlinksendfuncs.o(.text._ZL24Msg34_RC_CHANNELS_SCALEDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = Msg34_RC_CHANNELS_SCALED(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1ed]"></a>Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*)</STRONG> (Thumb, 472 bytes, Stack size 256 bytes, mavlinksendfuncs.o(.text._ZL21Msg42_MISSION_CURRENThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = Msg42_MISSION_CURRENT(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFlyMode()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1ee]"></a>Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*)</STRONG> (Thumb, 1036 bytes, Stack size 400 bytes, mavlinksendfuncs.o(.text._ZL27Msg62_NAV_CONTROLLER_OUTPUThP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096 + Unknown Stack Size
<LI>Call Chain = Msg62_NAV_CONTROLLER_OUTPUT(unsigned char, __mavlink_message*) &rArr; ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetYaw(double*, double)
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_Target_RollPitch(double*, double*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1ef]"></a>Msg65_RC_CHANNELS(unsigned char, __mavlink_message*)</STRONG> (Thumb, 872 bytes, Stack size 216 bytes, mavlinksendfuncs.o(.text._ZL17Msg65_RC_CHANNELShP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 800 + Unknown Stack Size
<LI>Call Chain = Msg65_RC_CHANNELS(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f0]"></a>Msg74_VFR_HUD(unsigned char, __mavlink_message*)</STRONG> (Thumb, 320 bytes, Stack size 136 bytes, mavlinksendfuncs.o(.text._ZL13Msg74_VFR_HUDhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = Msg74_VFR_HUD(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f1]"></a>Msg116_SCALED_IMU2(unsigned char, __mavlink_message*)</STRONG> (Thumb, 624 bytes, Stack size 200 bytes, mavlinksendfuncs.o(.text._ZL18Msg116_SCALED_IMU2hP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = Msg116_SCALED_IMU2(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f2]"></a>Msg124_GPS2_RAW(unsigned char, __mavlink_message*)</STRONG> (Thumb, 704 bytes, Stack size 648 bytes, mavlinksendfuncs.o(.text._ZL15Msg124_GPS2_RAWhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232 + Unknown Stack Size
<LI>Call Chain = Msg124_GPS2_RAW(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f3]"></a>Msg129_SCALED_IMU3(unsigned char, __mavlink_message*)</STRONG> (Thumb, 624 bytes, Stack size 200 bytes, mavlinksendfuncs.o(.text._ZL18Msg129_SCALED_IMU3hP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = Msg129_SCALED_IMU3(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f4]"></a>Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*)</STRONG> (Thumb, 1904 bytes, Stack size 936 bytes, mavlinksendfuncs.o(.text._ZL19Msg234_HIGH_LATENCYhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2632 + Unknown Stack Size
<LI>Call Chain = Msg234_HIGH_LATENCY(unsigned char, __mavlink_message*) &rArr; ReadCurrentMission(MissionInf*, unsigned short*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadCurrentMission(MissionInf*, unsigned short*, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AngularRate_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_hover_throttle(double*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mav_modes(unsigned short&, unsigned short&, unsigned short&)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f5]"></a>Msg241_VIBRATION(unsigned char, __mavlink_message*)</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, mavlinksendfuncs.o(.text._ZL16Msg241_VIBRATIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = Msg241_VIBRATION(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Vibration(vector3&lang;float&rang;*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f6]"></a>Msg242_HOME_POSITION(unsigned char, __mavlink_message*)</STRONG> (Thumb, 440 bytes, Stack size 112 bytes, mavlinksendfuncs.o(.text._ZL20Msg242_HOME_POSITIONhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = Msg242_HOME_POSITION(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f7]"></a>Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*)</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, mavlinksendfuncs.o(.text._ZL25Msg245_EXTENDED_SYS_STATEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + Unknown Stack Size
<LI>Call Chain = Msg245_EXTENDED_SYS_STATE(unsigned char, __mavlink_message*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[1f8]"></a>Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*)</STRONG> (Thumb, 1856 bytes, Stack size 704 bytes, mavlinksendfuncs.o(.text._ZL24Msg330_OBSTACLE_DISTANCEhP17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776 + Unknown Stack Size
<LI>Call Chain = Msg330_OBSTACLE_DISTANCE(unsigned char, __mavlink_message*) &rArr; get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceFlu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinksendfuncs.o(.rodata.Mavlink_Send_Funcs)
</UL>
<P><STRONG><a name="[4d8]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, mavlinksendfuncs.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[3d9]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, mavlinkrcprocess.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[3da]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, mavlinkrcprocess.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg111_TIMESYNC(unsigned char, __mavlink_message const*)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg23_PARAM_SET(unsigned char, __mavlink_message const*)
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;paramProtocolTask(bool)
</UL>

<P><STRONG><a name="[9e]"></a>__cxx_global_array_dtor</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mavlinkrcprocess.o(.text.__cxx_global_array_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __cxx_global_array_dtor &rArr; parametersIterator::~parametersIterator() &rArr; operator delete(void*) &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::~parametersIterator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp)
</UL>
<P><STRONG><a name="[1c7]"></a>Msg0_HEARTBEAT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._ZL14Msg0_HEARTBEAThPK17__mavlink_message))
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1c8]"></a>Msg11_SET_MODE(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 152 bytes, Stack size 272 bytes, mavlinkrcprocess.o(.text._ZL14Msg11_SET_MODEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Msg11_SET_MODE(unsigned char, __mavlink_message const*) &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1c9]"></a>Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 448 bytes, Stack size 408 bytes, mavlinkrcprocess.o(.text._ZL24Msg20_PARAM_REQUEST_READhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Msg20_PARAM_REQUEST_READ(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(unsigned int, SName*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned int*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1ca]"></a>Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 936 bytes, Stack size 640 bytes, mavlinkrcprocess.o(.text._ZL24Msg21_PARAM_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1224 + Unknown Stack Size
<LI>Call Chain = Msg21_PARAM_REQUEST_LIST(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parametersIterator::reset()
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1cb]"></a>Msg23_PARAM_SET(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 704 bytes, Stack size 392 bytes, mavlinkrcprocess.o(.text._ZL15Msg23_PARAM_SEThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2000 + Unknown Stack Size
<LI>Call Chain = Msg23_PARAM_SET(unsigned char, __mavlink_message const*) &rArr; UpdateParam(SName, unsigned long long, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetParametersCount(unsigned int*)
<LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParam(SName, unsigned long long, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1cc]"></a>Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 1032 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL18Msg39_MISSION_ITEMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = Msg39_MISSION_ITEM(unsigned char, __mavlink_message const*) &rArr; addFence(FenceInf, bool, double) &rArr; WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingFencesCount()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1cd]"></a>Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 880 bytes, Stack size 544 bytes, mavlinkrcprocess.o(.text._ZL21Msg40_MISSION_REQUESThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = Msg40_MISSION_REQUEST(unsigned char, __mavlink_message const*) &rArr; ReadFence(unsigned short, FenceInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFence(unsigned short, FenceInf*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1ce]"></a>Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 648 bytes, Stack size 584 bytes, mavlinkrcprocess.o(.text._ZL25Msg41_MISSION_SET_CURRENThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = Msg41_MISSION_SET_CURRENT(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMission(unsigned short)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentFlyMode()
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1cf]"></a>Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 208 bytes, Stack size 344 bytes, mavlinkrcprocess.o(.text._ZL26Msg43_MISSION_REQUEST_LISThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = Msg43_MISSION_REQUEST_LIST(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getFencesCount()
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMissionsCount()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d0]"></a>Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 624 bytes, Stack size 344 bytes, mavlinkrcprocess.o(.text._ZL19Msg44_MISSION_COUNThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2120 + Unknown Stack Size
<LI>Call Chain = Msg44_MISSION_COUNT(unsigned char, __mavlink_message const*) &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d1]"></a>Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 200 bytes, Stack size 328 bytes, mavlinkrcprocess.o(.text._ZL23Msg45_MISSION_CLEAR_ALLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2104 + Unknown Stack Size
<LI>Call Chain = Msg45_MISSION_CLEAR_ALL(unsigned char, __mavlink_message const*) &rArr; clearMissions(double) &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearFences(double)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearMissions(double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d2]"></a>Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 880 bytes, Stack size 544 bytes, mavlinkrcprocess.o(.text._ZL25Msg51_MISSION_REQUEST_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2232 + Unknown Stack Size
<LI>Call Chain = Msg51_MISSION_REQUEST_INT(unsigned char, __mavlink_message const*) &rArr; ReadFence(unsigned short, FenceInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadFence(unsigned short, FenceInf*, double)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMission(unsigned short, MissionInf*, double)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMissionInd()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d3]"></a>Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, mavlinkrcprocess.o(.text._ZL25Msg66_REQUEST_DATA_STREAMhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Msg66_REQUEST_DATA_STREAM(unsigned char, __mavlink_message const*) &rArr; SetMsgRate(unsigned char, unsigned short, float, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMsgRate(unsigned char, unsigned short, float, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d4]"></a>Msg69_MANUAL_CONTROL(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 984 bytes, Stack size 160 bytes, mavlinkrcprocess.o(.text._ZL20Msg69_MANUAL_CONTROLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 496 + Unknown Stack Size
<LI>Call Chain = Msg69_MANUAL_CONTROL(unsigned char, __mavlink_message const*) &rArr; ReceiverUpdate(SName, bool, float*, unsigned char, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiverUpdate(SName, bool, float*, unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d5]"></a>Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 1048 bytes, Stack size 400 bytes, mavlinkrcprocess.o(.text._ZL22Msg73_MISSION_ITEM_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = Msg73_MISSION_ITEM_INT(unsigned char, __mavlink_message const*) &rArr; addFence(FenceInf, bool, double) &rArr; WriteVolatileParamGroup(SName, void const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveFences(double)
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFence(FenceInf, bool, double)
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingFencesCount()
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saveMissions(double)
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addMission(MissionInf, bool, double)
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getUploadingMissionsCount()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d6]"></a>Msg75_COMMAND_INT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 432 bytes, Stack size 432 bytes, mavlinkrcprocess.o(.text._ZL17Msg75_COMMAND_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = Msg75_COMMAND_INT(unsigned char, __mavlink_message const*) &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToTask(CmdMsg, unsigned short, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d7]"></a>Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 584 bytes, Stack size 568 bytes, mavlinkrcprocess.o(.text._ZL18Msg76_COMMAND_LONGhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = Msg76_COMMAND_LONG(unsigned char, __mavlink_message const*) &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendCmdMsgToTask(CmdMsg, unsigned short, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d8]"></a>Msg84_SET_POSITION_TARGET_LOCAL_NED(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 224 bytes, Stack size 264 bytes, mavlinkrcprocess.o(.text._ZL35Msg84_SET_POSITION_TARGET_LOCAL_NEDhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Msg84_SET_POSITION_TARGET_LOCAL_NED(unsigned char, __mavlink_message const*) &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1d9]"></a>Msg86_SET_POSITION_TARGET_GLOBAL_INT(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 240 bytes, Stack size 264 bytes, mavlinkrcprocess.o(.text._ZL36Msg86_SET_POSITION_TARGET_GLOBAL_INThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = Msg86_SET_POSITION_TARGET_GLOBAL_INT(unsigned char, __mavlink_message const*) &rArr; SendMsgToMode(ModeMsg, double) &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToMode(ModeMsg, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1da]"></a>Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 296 bytes, Stack size 112 bytes, mavlinkrcprocess.o(.text._ZL31Msg102_VISION_POSITION_ESTIMATEhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1168 + Unknown Stack Size
<LI>Call Chain = Msg102_VISION_POSITION_ESTIMATE(unsigned char, __mavlink_message const*) &rArr; PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double) &rArr; SDLog_Msg_PosSensor(unsigned char, Position_Sensor, double) &rArr; xStreamBufferSend &rArr; xTaskNotifyWait &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1db]"></a>Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 3072 bytes, Stack size 36 bytes, mavlinkrcprocess.o(.text._ZL29Msg110_FILE_TRANSFER_PROTOCOLhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = Msg110_FILE_TRANSFER_PROTOCOL(unsigned char, __mavlink_message const*) &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_read &rArr; load_xdir &rArr; dir_next &rArr; create_chain &rArr; fill_last_frag &rArr; put_fat &rArr; move_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_usb_connected
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SD_Init_Success
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1dc]"></a>Msg111_TIMESYNC(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 280 bytes, Stack size 336 bytes, mavlinkrcprocess.o(.text._ZL15Msg111_TIMESYNChPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 920 + Unknown Stack Size
<LI>Call Chain = Msg111_TIMESYNC(unsigned char, __mavlink_message const*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1dd]"></a>Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, mavlinkrcprocess.o(.text._ZL20Msg144_FOLLOW_TARGEThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = Msg144_FOLLOW_TARGET(unsigned char, __mavlink_message const*) &rArr; update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_followSensor(unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, double, bool, double, double)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;followSensorRegister(followDataType, double)
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_precLandSensorYaw(double, bool, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1de]"></a>Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mavlinkrcprocess.o(.text._ZL32Msg183_AUTOPILOT_VERSION_REQUESThPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = Msg183_AUTOPILOT_VERSION_REQUEST(unsigned char, __mavlink_message const*) &rArr; send_AutoPilot_Version(unsigned char) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_AutoPilot_Version(unsigned char)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1df]"></a>Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 580 bytes, Stack size 136 bytes, mavlinkrcprocess.o(.text._ZL31Msg208_ACFly_RegeisterPosSensorhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = Msg208_ACFly_RegeisterPosSensor(unsigned char, __mavlink_message const*) &rArr; PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double, double const*, double, double, double)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorRegister(unsigned char, SName, Position_Sensor_Type, Position_Sensor_DataType, Position_Sensor_frame, double, double, double, double const*, double, double, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1e0]"></a>Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 1672 bytes, Stack size 192 bytes, mavlinkrcprocess.o(.text._ZL28Msg209_ACFly_UpdatePosSensorhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 1688 + Unknown Stack Size
<LI>Call Chain = Msg209_ACFly_UpdatePosSensor(unsigned char, __mavlink_message const*) &rArr; IMUMagnetometerSlamRegister(unsigned char, SName, double, double) &rArr; ParamGroupRegister(SName, unsigned short, unsigned int, MAV_PARAM_TYPE const*, SName const*, unsigned long long const*) &rArr; InternalStorage_ReadFile(char const*, char const*, void*, unsigned int*, unsigned int, int, double) &rArr; lfs_file_open &rArr; lfs_file_rawopencfg &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdateVel(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePositionVel(unsigned char, unsigned int, vector3&lang;double&rang;, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorUpdatePosition(unsigned char, unsigned int, vector3&lang;double&rang;, bool, double, double, double, double const*, double, double, double)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSlamSensorResetAngleOffset(unsigned char, unsigned int, double, double)
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PositionSensorChangeDataType(unsigned char, unsigned int, Position_Sensor_DataType, double)
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUpdate(unsigned char, unsigned int, vector3&lang;int&rang;, bool, double)
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerUnRegister(unsigned char, unsigned int, double)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUMagnetometerSlamRegister(unsigned char, SName, double, double)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1e1]"></a>Msg233_GPS_RTCM_DATA(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, mavlinkrcprocess.o(.text._ZL20Msg233_GPS_RTCM_DATAhPK17__mavlink_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Msg233_GPS_RTCM_DATA(unsigned char, __mavlink_message const*) &rArr; inject_RtkPorts(unsigned char const*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inject_RtkPorts(unsigned char const*, unsigned short)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[1e2]"></a>Msg243_SET_HOME_POSITION(unsigned char, __mavlink_message const*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._ZL24Msg243_SET_HOME_POSITIONhPK17__mavlink_message))
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.rodata.Mavlink_RC_Process)
</UL>
<P><STRONG><a name="[644]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, mavlinkrcprocess.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[165]"></a>_GLOBAL__sub_I_MavlinkRCProcess.cpp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, mavlinkrcprocess.o(.text._GLOBAL__sub_I_MavlinkRCProcess.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _GLOBAL__sub_I_MavlinkRCProcess.cpp &rArr; __cxa_atexit &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mavlinkrcprocess.o(.init_array)
</UL>
<P><STRONG><a name="[183]"></a>Modes_Server(void*)</STRONG> (Thumb, 3264 bytes, Stack size 1064 bytes, modes.o(.text._ZL12Modes_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 5696 + Unknown Stack Size
<LI>Call Chain = Modes_Server(void*) &rArr; process_AuxFuncs(Receiver const*, double) &rArr; AuxCamTakePhoto() &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_MSafeCtrl()
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_process_AuxFuncs()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mav_state(MAV_STATE)
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedManualCtrl(float, float, float, bool, unsigned short)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.text._Z10init_Modesv)
</UL>
<P><STRONG><a name="[494]"></a>changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)</STRONG> (Thumb, 256 bytes, Stack size 344 bytes, modes.o(.text._ZL10changeModetPvjP10ModeResultPbS2_P7ModeMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*) &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setLedMode(LEDMode)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[4aa]"></a>runPreflightCheck(ModeFuncCfg const&, bool)</STRONG> (Thumb, 3192 bytes, Stack size 568 bytes, modes.o(.text._ZL17runPreflightCheckRK11ModeFuncCfgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 2912 + Unknown Stack Size
<LI>Call Chain = runPreflightCheck(ModeFuncCfg const&, bool) &rArr; is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*) &rArr; ReadFence(unsigned short, FenceInf*, double) &rArr; ReadVolatileParamGroup(SName, void*, unsigned short, unsigned short, double) &rArr; InternalStorage_WriteFile(char const*, char const*, void const*, unsigned int, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSdFreeSizeGB()
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_insideFence(vector3&lang;double&rang; const&, vector3&lang;double&rang; const&, double*, FRS*)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isDAOSensorFixed()
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawHealthEst()
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_MSHealthXY()
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[495]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, modes.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Modes_Server(void*)
</UL>

<P><STRONG><a name="[496]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, modes.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runPreflightCheck(ModeFuncCfg const&, bool)
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;changeMode(unsigned short, void*, unsigned int, ModeResult*, bool*, bool*, ModeMsg*)
</UL>

<P><STRONG><a name="[4d9]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, modes.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[166]"></a>_GLOBAL__sub_I_Modes.cpp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modes.o(.text._GLOBAL__sub_I_Modes.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_Modes.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> modes.o(.init_array)
</UL>
<P><STRONG><a name="[4f4]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1242 bytes, Stack size 224 bytes, m10_rccalib.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[506]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m10_rccalib.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M10_RCCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4f5]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m10_rccalib.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[647]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1242 bytes, Stack size 224 bytes, m11_tempcalib.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[649]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m11_tempcalib.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M11_TempCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4da]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m11_tempcalib.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4f6]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1242 bytes, Stack size 224 bytes, m12_acccalib.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[648]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m12_acccalib.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M12_AccCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4f7]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m12_acccalib.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[51b]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1242 bytes, Stack size 224 bytes, m13_magcalib.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[51c]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m13_magcalib.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M13_MagCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4db]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m13_magcalib.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[4f8]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1242 bytes, Stack size 224 bytes, m14_horizoncalib.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[523]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m14_horizoncalib.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M14_HorizonCalib::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4f9]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m14_horizoncalib.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[50a]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, m32_posctrl.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[50b]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, m32_posctrl.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4de]"></a>map_projection_project(Map_Projection const*, double, double, double*, double*)</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, m32_posctrl.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = map_projection_project(Map_Projection const*, double, double, double*, double*) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M32_PosCtrl::main_func(void*, unsigned int)
</UL>

<P><STRONG><a name="[4dc]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, m32_posctrl.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[182]"></a>MSafe_Server(void*)</STRONG> (Thumb, 7192 bytes, Stack size 1072 bytes, msafe.o(.text._ZL12MSafe_ServerPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2152 + Unknown Stack Size
<LI>Call Chain = MSafe_Server(void*) &rArr; setPump1(float) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_precLandSensor(precLandSensor*, double)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Msg_DebugVect(char const*, double*, unsigned char, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Position_Control_Enabled(bool*, double)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Attitude_Control_Enabled(bool*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPump1(float)
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_Disable(double)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentFlyMode(AFunc)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_history_PositionErr(vector3&lang;double&rang;*, double, double)
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastZCtrlTime(TIME*, double)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lastXYCtrlTime(TIME*, double)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccZ_OffBoard(double, double, double, double)
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU(vector3&lang;double&rang;*, double)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_TargetTrackYaw(double*, double)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_YawDeclination(double*, double)
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackVel(double*, double)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityFLU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_NavCmd(unsigned short, double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Disable(double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Enable(double)
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Altitude_Control_Enable(double)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRate(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_RollPitch(double, double, double)
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAttCtrlCfg()
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_nan
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> msafe.o(.text._Z10init_MSafev)
</UL>
<P><STRONG><a name="[442]"></a>map_projection_project(Map_Projection const*, double, double, double*, double*)</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, navcmdprocess.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = map_projection_project(Map_Projection const*, double, double, double*, double*) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
</UL>

<P><STRONG><a name="[10e]"></a>NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 4152 bytes, Stack size 560 bytes, navcmdprocess.o(.text._ZL17NavCmd16_WAYPOINTdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1480 + Unknown Stack Size
<LI>Call Chain = NavCmd16_WAYPOINT(double, unsigned char, double*, NavCmdInf*) &rArr; get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelativeBodyheading(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[10f]"></a>NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 1688 bytes, Stack size 480 bytes, navcmdprocess.o(.text._ZL25NavCmd20_RETURN_TO_LAUNCHdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = NavCmd20_RETURN_TO_LAUNCH(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_followSensor(followSensor*, double)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_precLandSensor(precLandSensor*, double)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomePoint(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLatLon(vector2&lang;double&rang;*, double*, double)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeOptSensorZ(double*, double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityBodyHeadingXY_AngleLimit(double, double, double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[110]"></a>NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 1800 bytes, Stack size 280 bytes, navcmdprocess.o(.text._ZL13NavCmd21_LANDdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = NavCmd21_LAND(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_projection_project(Map_Projection const*, double, double, double*, double*)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_TargetPosInf(Position_ControlMode*, Position_ControlMode*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[111]"></a>NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, navcmdprocess.o(.text._ZL16NavCmd22_TAKEOFFdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = NavCmd22_TAKEOFF(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_TargetPositionZGlobal(double, double, double) &rArr; Position_Control_set_TargetPositionZ(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_Height(double, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightRelative(double, double)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_Takeoff_HeightGlobal(double, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[112]"></a>NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 1496 bytes, Stack size 128 bytes, navcmdprocess.o(.text._ZL19NavCmd23_LAND_LOCALdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 616 + Unknown Stack Size
<LI>Call Chain = NavCmd23_LAND_LOCAL(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double) &rArr; Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double) &rArr; prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fast_sin_cos(double, double*, double*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelativeBodyheading(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[113]"></a>NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, navcmdprocess.o(.text._ZL14NavCmd93_DELAYdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = NavCmd93_DELAY(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[114]"></a>NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, navcmdprocess.o(.text._ZL25NavCmd112_CONDITION_DELAYdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NavCmd112_CONDITION_DELAY(double, unsigned char, double*, NavCmdInf*) &rArr; Position_Control_set_ZLock(double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[115]"></a>NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, navcmdprocess.o(.text._ZL23NavCmd115_CONDITION_YAWdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = NavCmd115_CONDITION_YAW(double, unsigned char, double*, NavCmdInf*) &rArr; Attitude_Control_set_Target_Yaw(double, double) &rArr; get_Airframe_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_YawRelative(double, double)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[116]"></a>NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*)</STRONG> (Thumb, 1992 bytes, Stack size 392 bytes, navcmdprocess.o(.text._ZL23NavCmd192_DO_REPOSITIONdhPdP9NavCmdInf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312 + Unknown Stack Size
<LI>Call Chain = NavCmd192_DO_REPOSITION(double, unsigned char, double*, NavCmdInf*) &rArr; get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getAvCfg()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalRange_Z(PosSensorHealthInf1*, double)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_LineFlightABDistance(vector3&lang;double&rang;*, double*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_RouteLineAvoidanceRelative(double, double, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZGlobal(double, double, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRelative(double, double, double)
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NavCmd16_WAYPOINT_GetInfo(unsigned char, double*, vector3&lang;double&rang;*, vector3&lang;double&rang;*, vector3&lang;double&rang;*)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_get_YawTrackErr(double*, double)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZ(double, double, double)
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AvLineDistanceEnu(double*, vector3&lang;double&rang;, double, vector3&lang;double&rang; const*, unsigned char, double)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionZRA(double, double, double)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_Target_Yaw(double, double)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetVelocityZ(double, double)
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPosCtrlCfg()
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_ControlMode(Position_ControlMode*, double*, vector3&lang;double&rang;*, double)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_ControlMode(Position_ControlMode*, double)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZLock(double)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYLock(double, double)
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attitude_Control_set_YawLock(double)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> navcmdprocess.o(.rodata._ZL13NavCmdProcess)
</UL>
<P><STRONG><a name="[208]"></a>InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*)</STRONG> (Thumb, 576 bytes, Stack size 48 bytes, inflightcmdprocess.o(.text._ZL38InflightCmd178_MAV_CMD_DO_CHANGE_SPEEDtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = InflightCmd178_MAV_CMD_DO_CHANGE_SPEED(unsigned short, double*) &rArr; Position_Control_set_ZAutoSpeed(double, double, double) &rArr; LockCtrl(double) &rArr; xQueueTakeMutexRecursive &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_ZAutoSpeed(double, double, double)
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_ZAutoSpeed(double*, double*, double)
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYZAutoSpeed(double, double)
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYZAutoSpeed(double*, double)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_get_XYAutoSpeed(double*, double)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_XYAutoSpeed(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[209]"></a>InflightCmd183_DO_SET_SERVO(unsigned short, double*)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, inflightcmdprocess.o(.text._ZL27InflightCmd183_DO_SET_SERVOtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1096 + Unknown Stack Size
<LI>Call Chain = InflightCmd183_DO_SET_SERVO(unsigned short, double*) &rArr; setAuxPWM(float, unsigned char) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAuxPWM(float, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[20a]"></a>InflightCmd205_MAV_CMD_DO_MOUNT_CONTROL(unsigned short, double*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, inflightcmdprocess.o(.text._ZL39InflightCmd205_MAV_CMD_DO_MOUNT_CONTROLtPd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1088 + Unknown Stack Size
<LI>Call Chain = InflightCmd205_MAV_CMD_DO_MOUNT_CONTROL(unsigned short, double*) &rArr; AuxGimbalSetAngle(double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxGimbalSetAngle(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[20b]"></a>InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DIST(unsigned short, double*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, inflightcmdprocess.o(.text._ZL44InflightCmd206_MAV_CMD_DO_SET_CAM_TRIGG_DISTtPd))
<BR>[Address Reference Count : 1]<UL><LI> inflightcmdprocess.o(.rodata._ZL18InflightCmdProcess)
</UL>
<P><STRONG><a name="[177]"></a>IOTrigTCB(void*, unsigned int)</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, auxfuncs.o(.text._ZL9IOTrigTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1616 + Unknown Stack Size
<LI>Call Chain = IOTrigTCB(void*, unsigned int) &rArr; SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendLedSignal(LEDSignal)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxfuncs.o(.text.TIM4_IRQHandler)
</UL>
<P><STRONG><a name="[3b0]"></a>SD_Pos_Record()</STRONG> (Thumb, 2272 bytes, Stack size 984 bytes, auxfuncs.o(.text._ZL13SD_Pos_Recordv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1568 + Unknown Stack Size
<LI>Call Chain = SD_Pos_Record() &rArr; mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDLog_Txt1(char const*, unsigned short, double)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_VelocityENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RTC_Time
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensor(unsigned char, Position_Sensor*, double)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_unlock_chan
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkSysId()
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_lock_chan
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommuPort(unsigned char)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHomeLocalZ(double*, double*, double)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_quat(Quaternion*, double)
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_CommulinkCompId()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_PosSensorHealth_XYZ(PosSensorHealthInf3*, unsigned char, double)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XYZ(PosSensorHealthInf3*, double)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IOTrigTCB(void*, unsigned int)
</UL>

<P><STRONG><a name="[3ac]"></a>mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 1250 bytes, Stack size 224 bytes, auxfuncs.o(.text._ZL29mavlink_finalize_message_chanP17__mavlink_messagehhhhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 584 + Unknown Stack Size
<LI>Call Chain = mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char) &rArr; mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[3ae]"></a>mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)</STRONG> (Thumb, 336 bytes, Stack size 56 bytes, auxfuncs.o(.text._ZL26mavlink_msg_to_send_bufferPFtPKhtddEPFbdEPFvvEPK17__mavlink_messagedd))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mavlink_msg_to_send_buffer(unsigned short (*)(unsigned char const*, unsigned short, double, double), bool (*)(double), void (*)(), __mavlink_message const*, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_AuxFuncs(Receiver const*, double)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AuxCamTakePhoto()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Pos_Record()
</UL>

<P><STRONG><a name="[4fa]"></a>mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)</STRONG> (Thumb, 1114 bytes, Stack size 360 bytes, auxfuncs.o(.text._ZL21mavlink_sha256_updateP18mavlink_sha256_ctxPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mavlink_sha256_update(mavlink_sha256_ctx*, void const*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mavlink_finalize_message_chan(__mavlink_message*, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[167]"></a>_GLOBAL__sub_I_AuxFuncs.cpp</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, auxfuncs.o(.text._GLOBAL__sub_I_AuxFuncs.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _GLOBAL__sub_I_AuxFuncs.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> auxfuncs.o(.init_array)
</UL>
<P><STRONG><a name="[168]"></a>_GLOBAL__sub_I_Avoidance.cpp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, avoidance.o(.text._GLOBAL__sub_I_Avoidance.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_Avoidance.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> avoidance.o(.init_array)
</UL>
<P><STRONG><a name="[ce]"></a>ControlSystem_Task(void*)</STRONG> (Thumb, 5900 bytes, Stack size 256 bytes, ctrl_main.o(.text._ZL18ControlSystem_TaskPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2032 + Unknown Stack Size
<LI>Call Chain = ControlSystem_Task(void*) &rArr; ctrl_Attitude() &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_MainMotorCount(unsigned char, unsigned char, float)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParam(SName, unsigned int*, MAV_PARAM_TYPE*, unsigned long long*, bool*, double)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getInitializationCompleted()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry2_Voltage()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Voltage()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adcGet_MainBaterry1_Current()
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAccelerometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroscope(unsigned char, IMU_Sensor*, double)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batteryUpdate(unsigned char, unsigned int, bool, float, float, float, float, float const*, float, float, float, unsigned short, unsigned int, unsigned char, float const*, double)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Attitude_MSStatus()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Altitude_MSStatus()
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUGyroscope()
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_current_use_IMUAccelerometer()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Position()
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_1()
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_ESO_2()
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getVoltKp()
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCtrlBatId()
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OutputThrottle(double*, double)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.text._Z18init_ControlSystemv)
</UL>
<P><STRONG><a name="[169]"></a>_GLOBAL__sub_I_ctrl_Main.cpp</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ctrl_main.o(.text._GLOBAL__sub_I_ctrl_Main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_ctrl_Main.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_main.o(.init_array)
</UL>
<P><STRONG><a name="[333]"></a>update_output_throttle(double, double)</STRONG> (Thumb, 2056 bytes, Stack size 544 bytes, ctrl_attitude.o(.text._ZL22update_output_throttledd))
<BR><BR>[Stack]<UL><LI>Max Depth = 872 + Unknown Stack Size
<LI>Call Chain = update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_OptimalGlobal_XY(PosSensorHealthInf2*, double)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AccelerationENU_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_Ctrl(vector3&lang;double&rang;*, double)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_AirframeY_quat(Quaternion*, double)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Position_MSStatus()
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_Health_XY(PosSensorHealthInf2*, double)
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRaw(float*, signed char*, double)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_MotorControl(double, double, double, double, bool)
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S2_MotorControl(double, double, double, double, bool)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_MotorControl(double, double, double, double, bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriRotorX_MotorControl(double, double, double, double, bool)
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_Attitude()
</UL>

<P><STRONG><a name="[121]"></a>MultiRotor_Init()</STRONG> (Thumb, 768 bytes, Stack size 32 bytes, ctrl_attitude.o(.text._ZL15MultiRotor_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1656 + Unknown Stack Size
<LI>Call Chain = MultiRotor_Init() &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 9]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
</UL>
<P><STRONG><a name="[122]"></a>MultiRotor_DeInit()</STRONG> (Thumb, 354 bytes, Stack size 36 bytes, ctrl_attitude.o(.text._ZL17MultiRotor_DeInitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1660 + Unknown Stack Size
<LI>Call Chain = MultiRotor_DeInit() &rArr; UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateParamGroup(SName, unsigned long long const*, unsigned short, unsigned short, bool, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Address Reference Count : 9]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
</UL>
<P><STRONG><a name="[123]"></a>MultiRotor_PreArmControl(Receiver)</STRONG> (Thumb, 608 bytes, Stack size 120 bytes, ctrl_attitude.o(.text._ZL24MultiRotor_PreArmControl8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MultiRotor_PreArmControl(Receiver) &rArr; __aeabi_ul2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 9]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
</UL>
<P><STRONG><a name="[124]"></a>MultiRotor_InitControl(bool)</STRONG> (Thumb, 936 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._ZL22MultiRotor_InitControlb))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MultiRotor_InitControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 9]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
<LI> ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
</UL>
<P><STRONG><a name="[20c]"></a>MultiRotor4X_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._ZL25MultiRotor4X_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = MultiRotor4X_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4X_CtrlM)
</UL>
<P><STRONG><a name="[4e0]"></a>MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)</STRONG> (Thumb, 3784 bytes, Stack size 552 bytes, ctrl_attitude.o(.text._ZL23MultiRotor_MotorControlhddddPdS_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424 + Unknown Stack Size
<LI>Call Chain = MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getReceiver(Receiver*, SName*, double)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor6S1_MotorControl(double, double, double, double, bool)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor62X_MotorControl(double, double, double, double, bool)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor42X_MotorControl(double, double, double, double, bool)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor8C_MotorControl(double, double, double, double, bool)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor6C_MotorControl(double, double, double, double, bool)
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor4C_MotorControl(double, double, double, double, bool)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor8X_MotorControl(double, double, double, double, bool)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor6X_MotorControl(double, double, double, double, bool)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor4X_MotorControl(double, double, double, double, bool)
</UL>

<P><STRONG><a name="[126]"></a>MultiRotor6X_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._ZL25MultiRotor6X_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = MultiRotor6X_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6X_CtrlM)
</UL>
<P><STRONG><a name="[20e]"></a>MultiRotor8X_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 104 bytes, Stack size 136 bytes, ctrl_attitude.o(.text._ZL25MultiRotor8X_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = MultiRotor8X_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8X_CtrlM)
</UL>
<P><STRONG><a name="[125]"></a>MultiRotor4C_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._ZL25MultiRotor4C_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1496 + Unknown Stack Size
<LI>Call Chain = MultiRotor4C_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor4C_CtrlM)
</UL>
<P><STRONG><a name="[20d]"></a>MultiRotor6C_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._ZL25MultiRotor6C_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = MultiRotor6C_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor6C_CtrlM)
</UL>
<P><STRONG><a name="[127]"></a>MultiRotor8C_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 124 bytes, Stack size 136 bytes, ctrl_attitude.o(.text._ZL25MultiRotor8C_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = MultiRotor8C_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL18MultiRotor8C_CtrlM)
</UL>
<P><STRONG><a name="[20f]"></a>MultiRotor42X_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 94 bytes, Stack size 136 bytes, ctrl_attitude.o(.text._ZL26MultiRotor42X_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1560 + Unknown Stack Size
<LI>Call Chain = MultiRotor42X_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL19MultiRotor42X_CtrlM)
</UL>
<P><STRONG><a name="[128]"></a>MultiRotor62X_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 168 bytes, Stack size 216 bytes, ctrl_attitude.o(.text._ZL26MultiRotor62X_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1640 + Unknown Stack Size
<LI>Call Chain = MultiRotor62X_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL19MultiRotor62X_CtrlM)
</UL>
<P><STRONG><a name="[210]"></a>MultiRotor6S1_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, ctrl_attitude.o(.text._ZL26MultiRotor6S1_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528 + Unknown Stack Size
<LI>Call Chain = MultiRotor6S1_MotorControl(double, double, double, double, bool) &rArr; MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiRotor_MotorControl(unsigned char, double, double, double, double, double*, double*, bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL19MultiRotor6S1_CtrlM)
</UL>
<P><STRONG><a name="[117]"></a>TriRotor_Init()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._ZL13TriRotor_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = TriRotor_Init() &rArr; ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double) &rArr; Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
</UL>
<P><STRONG><a name="[118]"></a>TriRotor_DeInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._ZL15TriRotor_DeInitv))
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
</UL>
<P><STRONG><a name="[119]"></a>TriRotor_PreArmControl(Receiver)</STRONG> (Thumb, 400 bytes, Stack size 72 bytes, ctrl_attitude.o(.text._ZL22TriRotor_PreArmControl8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TriRotor_PreArmControl(Receiver)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
</UL>
<P><STRONG><a name="[11a]"></a>TriRotor_InitControl(bool)</STRONG> (Thumb, 280 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._ZL20TriRotor_InitControlb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = TriRotor_InitControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
</UL>
<P><STRONG><a name="[11b]"></a>TriRotorX_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 1416 bytes, Stack size 264 bytes, ctrl_attitude.o(.text._ZL22TriRotorX_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136 + Unknown Stack Size
<LI>Call Chain = TriRotorX_MotorControl(double, double, double, double, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL15TriRotorX_CtrlM)
</UL>
<P><STRONG><a name="[1fe]"></a>Heli131_Init()</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, ctrl_attitude.o(.text._ZL12Heli131_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = Heli131_Init() &rArr; ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double) &rArr; Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRateHeli::init_ft()
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
</UL>
<P><STRONG><a name="[1ff]"></a>Heli131_DeInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._ZL14Heli131_DeInitv))
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
</UL>
<P><STRONG><a name="[200]"></a>Heli131_PreArmControl(Receiver)</STRONG> (Thumb, 1032 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._ZL21Heli131_PreArmControl8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Heli131_PreArmControl(Receiver) &rArr; Heli131_Map(double, double, double, double, double*, double*, double*, double*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_Map(double, double, double, double, double*, double*, double*, double*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
</UL>
<P><STRONG><a name="[4d7]"></a>Heli131_Map(double, double, double, double, double*, double*, double*, double*)</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, ctrl_attitude.o(.text._ZL11Heli131_MapddddPdS_S_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Heli131_Map(double, double, double, double, double*, double*, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_MotorControl(double, double, double, double, bool)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_PreArmControl(Receiver)
</UL>

<P><STRONG><a name="[201]"></a>Heli131_InitControl(bool)</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._ZL19Heli131_InitControlb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Heli131_InitControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
</UL>
<P><STRONG><a name="[202]"></a>Heli131_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 1208 bytes, Stack size 192 bytes, ctrl_attitude.o(.text._ZL20Heli131_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = Heli131_MotorControl(double, double, double, double, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heli131_Map(double, double, double, double, double*, double*, double*, double*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL13Heli131_CtrlM)
</UL>
<P><STRONG><a name="[11c]"></a>CoaxialM2S2_Init()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._ZL16CoaxialM2S2_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = CoaxialM2S2_Init() &rArr; ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double) &rArr; Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
</UL>
<P><STRONG><a name="[11d]"></a>CoaxialM2S2_DeInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._ZL18CoaxialM2S2_DeInitv))
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
</UL>
<P><STRONG><a name="[11e]"></a>CoaxialM2S2_PreArmControl(Receiver)</STRONG> (Thumb, 456 bytes, Stack size 64 bytes, ctrl_attitude.o(.text._ZL25CoaxialM2S2_PreArmControl8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CoaxialM2S2_PreArmControl(Receiver)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
</UL>
<P><STRONG><a name="[11f]"></a>CoaxialM2S2_InitControl(bool)</STRONG> (Thumb, 704 bytes, Stack size 80 bytes, ctrl_attitude.o(.text._ZL23CoaxialM2S2_InitControlb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = CoaxialM2S2_InitControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
</UL>
<P><STRONG><a name="[120]"></a>CoaxialM2S2_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 1736 bytes, Stack size 280 bytes, ctrl_attitude.o(.text._ZL24CoaxialM2S2_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = CoaxialM2S2_MotorControl(double, double, double, double, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryTotalVoltRawFilted(float*, signed char*, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S2_CtrlM)
</UL>
<P><STRONG><a name="[203]"></a>CoaxialM2S3_Init()</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._ZL16CoaxialM2S3_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + Unknown Stack Size
<LI>Call Chain = CoaxialM2S3_Init() &rArr; ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double) &rArr; Filter_Butter_LP::set_cutoff_frequency(unsigned char, double, double) &rArr; __hardfp_tan &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESO_AngularRate::init(bool, unsigned char, double, double, double, double, unsigned char, double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
</UL>
<P><STRONG><a name="[204]"></a>CoaxialM2S3_DeInit()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ctrl_attitude.o(.text._ZL18CoaxialM2S3_DeInitv))
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
</UL>
<P><STRONG><a name="[205]"></a>CoaxialM2S3_PreArmControl(Receiver)</STRONG> (Thumb, 856 bytes, Stack size 96 bytes, ctrl_attitude.o(.text._ZL25CoaxialM2S3_PreArmControl8Receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CoaxialM2S3_PreArmControl(Receiver) &rArr; CoaxialM2S3_Map(double, double, double, double*, double*, double*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_Map(double, double, double, double*, double*, double*)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
</UL>
<P><STRONG><a name="[646]"></a>CoaxialM2S3_Map(double, double, double, double*, double*, double*)</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, ctrl_attitude.o(.text._ZL15CoaxialM2S3_MapdddPdS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CoaxialM2S3_Map(double, double, double, double*, double*, double*)
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_MotorControl(double, double, double, double, bool)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_PreArmControl(Receiver)
</UL>

<P><STRONG><a name="[206]"></a>CoaxialM2S3_InitControl(bool)</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, ctrl_attitude.o(.text._ZL23CoaxialM2S3_InitControlb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CoaxialM2S3_InitControl(bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PullDownAll()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
</UL>
<P><STRONG><a name="[207]"></a>CoaxialM2S3_MotorControl(double, double, double, double, bool)</STRONG> (Thumb, 1160 bytes, Stack size 192 bytes, ctrl_attitude.o(.text._ZL24CoaxialM2S3_MotorControlddddb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = CoaxialM2S3_MotorControl(double, double, double, double, bool) &rArr; update_output_throttle(double, double) &rArr; get_AirframeY_quat(Quaternion*, double) &rArr; ReadParamGroup(SName, unsigned long long*, bool*, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentBatteryInfo(BatteryInfo*, signed char*, double)
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MainMotor_PWM_Out(double*)
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CoaxialM2S3_Map(double, double, double, double*, double*, double*)
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_output_throttle(double, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_attitude.o(.rodata._ZL17CoaxialM2S3_CtrlM)
</UL>
<P><STRONG><a name="[473]"></a>map_projection_project(Map_Projection const*, double, double, double*, double*)</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, ctrl_position.o(.text._ZL22map_projection_projectPK14Map_ProjectionddPdS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = map_projection_project(Map_Projection const*, double, double, double*, double*) &rArr; __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRA_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ_LatLon(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetGlobalPosVelAccXY_OffBoard(double, double, double, double, double, double, double)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY_LatLon(double, double, double, MissionPrestoreMode, bool*, double)
</UL>

<P><STRONG><a name="[466]"></a>prestoreMissionLine(vector2&lang;double&rang;)</STRONG> (Thumb, 984 bytes, Stack size 176 bytes, ctrl_position.o(.text._ZL19prestoreMissionLine7vector2IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = prestoreMissionLine(vector2&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMissionEndArc(double, double, double, vector3&lang;double&rang;, vector3&lang;double&rang;)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYRelative(double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXY(double, double, double, MissionPrestoreMode, bool*, double)
</UL>

<P><STRONG><a name="[4d4]"></a>setMissionEndArc(double, double, double, vector3&lang;double&rang;, vector3&lang;double&rang;)</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, ctrl_position.o(.text._ZL16setMissionEndArcddd7vector3IdES0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setMissionEndArc(double, double, double, vector3&lang;double&rang;, vector3&lang;double&rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector3&lang;double&rang;)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prestoreMissionLine(vector2&lang;double&rang;)
</UL>

<P><STRONG><a name="[476]"></a>prestoreMissionLine(vector3&lang;double&rang;)</STRONG> (Thumb, 1392 bytes, Stack size 248 bytes, ctrl_position.o(.text._ZL19prestoreMissionLine7vector3IdE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = prestoreMissionLine(vector3&lang;double&rang;) &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __ARM_fpclassify
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setMissionEndArc(double, double, double, vector3&lang;double&rang;, vector3&lang;double&rang;)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZRelative(double, double, double, double, MissionPrestoreMode, bool*, double)
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Position_Control_set_TargetPositionXYZ(double, double, double, double, MissionPrestoreMode, bool*, double)
</UL>

<P><STRONG><a name="[16a]"></a>_GLOBAL__sub_I_ctrl_Position.cpp</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, ctrl_position.o(.text._GLOBAL__sub_I_ctrl_Position.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_ctrl_Position.cpp &rArr; operator new[](unsigned int) &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ctrl_position.o(.init_array)
</UL>
<P><STRONG><a name="[40f]"></a>NVIC_SystemReset()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, drv_bootloader.o(.text._ZL16NVIC_SystemResetv))
<BR><BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_drv_BootLoader()
</UL>

<P><STRONG><a name="[52f]"></a>_prep_out_transaction</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, usb_composite.o(.text._prep_out_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _prep_out_transaction &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usbd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_xfer_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cdcd_open
</UL>

<P><STRONG><a name="[65c]"></a>proc_read10_cmd</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, usb_composite.o(.text.proc_read10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = proc_read10_cmd &rArr; dcd_event_handler &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SD_IsDetected
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_event_handler
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[65d]"></a>proc_write10_cmd</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, usb_composite.o(.text.proc_write10_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proc_write10_cmd &rArr; dcd_edpt_xfer
</UL>
<BR>[Calls]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tud_msc_is_writable_cb
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_xfer
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dcd_edpt_stall
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mscd_xfer_cb
</UL>

<P><STRONG><a name="[16b]"></a>_GLOBAL__sub_I_MS_Attitude.cpp</STRONG> (Thumb, 1454 bytes, Stack size 40 bytes, ms_attitude.o(.text._GLOBAL__sub_I_MS_Attitude.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_MS_Attitude.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.init_array)
</UL>
<P><STRONG><a name="[a3]"></a>gyroOffsetSaveTCB(void*, unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ms_attitude.o(.text._ZL17gyroOffsetSaveTCBPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 1768 + Unknown Stack Size
<LI>Call Chain = gyroOffsetSaveTCB(void*, unsigned int) &rArr; IMUGyroscopeSaveBodyOffset(unsigned char, double) &rArr; SaveParamGroup(SName, double) &rArr; InternalStorage_SaveFile(char const*, char const*, void const*, unsigned int, double) &rArr; lfs_mkdir &rArr; lfs_fs_forceconsistency &rArr; lfs_dir_commit &rArr;  lfs_dir_commit (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMUGyroscopeSaveBodyOffset(unsigned char, double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_attitude.o(.text._Z11MS_Attitudeh10IMU_Sensor)
</UL>
<P><STRONG><a name="[2ef]"></a>MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)</STRONG> (Thumb, 13120 bytes, Stack size 600 bytes, ms_attitude.o(.text._ZL18MS_AttitudeHeadingdPP9PosAccInfRK10IMU_Sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&) &rArr; rotate_heading_correction_quat(double, TIME const*, TIME const*, bool) &rArr; __PositionSensorIncreaseSlamAngle(unsigned char, double const&, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_is_inFlight(bool*, double)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadParamGroup(SName, unsigned long long*, bool*, double)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SName::SName__sub_object(char const*)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PositionSensorIncreaseSlamAngle(unsigned char, double const&, double)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetDAOSensor(unsigned char, DAO_Sensor*, double)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagnetometer(unsigned char, IMU_Sensor*, double)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_tan
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_Attitude(unsigned char, IMU_Sensor)
</UL>

<P><STRONG><a name="[4d3]"></a>rotate_heading_correction_quat(double, TIME const*, TIME const*, bool)</STRONG> (Thumb, 584 bytes, Stack size 296 bytes, ms_attitude.o(.text._ZL30rotate_heading_correction_quatdPK4TIMES1_b))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = rotate_heading_correction_quat(double, TIME const*, TIME const*, bool) &rArr; __PositionSensorIncreaseSlamAngle(unsigned char, double const&, double) &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPositionSensorData(unsigned char, Position_Sensor_Data*, double)
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__PositionSensorIncreaseSlamAngle(unsigned char, double const&, double)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quaternion::rotate_delta_angle(vector3&lang;double&rang;)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MS_AttitudeHeading(double, PosAccInf**, IMU_Sensor const&)
</UL>

<P><STRONG><a name="[16c]"></a>_GLOBAL__sub_I_MS_Position.cpp</STRONG> (Thumb, 546 bytes, Stack size 32 bytes, ms_position.o(.text._GLOBAL__sub_I_MS_Position.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_MS_Position.cpp &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_atexit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ms_position.o(.init_array)
</UL>
<P><STRONG><a name="[253]"></a>_tm_carry</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tm_carry
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[257]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[16e]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[5e0]"></a>_local_sscanf</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _local_sscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[5ee]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>
<BR>[Called By]<UL><LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
